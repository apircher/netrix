<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GuruComponents.Netrix.PlugIns.AspDotNetDesigner.v45</name>
    </assembly>
    <members>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner">
            <summary>
            AspDotNet (ASP.NET) control designer extender provider.
            </summary>
            <remarks>
            This plug-in extends NetRix so it can handle webcontrols, htmlcontrols and usercontrols from the ASP.NET namespaces.
            <para>
            The intention of this plug-in is providing a low level access to a design time environment to display ASP.NET controls,
            user controls and types derived from System.Web.UI.WebControl. It's not intended to build a whole IDE like Visual
            Studio.NET. Therefore a couple of rules are applying:
            <list type="bullet">
                <item>Documents loaded must appear as simple HTML documents, e.g. neither as ASPX nor ASCX.</item>
                <item>Directives defined in the document header has to be stripped out and the directives has to be defined separatly.</item>
                <item>The host application is responsible for any non-HTML parts of an document and is supposed to define a decument engine to handle embedded directives.</item>
            </list>
            The usage of user controls requires several steps, e.g. the registration of namespaces and control names, as well as
            instructions for the formatter and registration of the type. The type is required to create objects on-the-fly and
            use them internally. The assembly where the type is defined must be part of the app domain and loadable at runtime.
            </para>
            <para>
            <b>Basic Steps to Show and Edit ASP.NET based Controls:</b><br/>
            Before you can show ASP.NET controls and derived objects, like user controls, you must prepare several steps to get the
            designer running:
            <list type="bullet">
                <item>Have an element class that you wish to use. For legacy ASP.NET controls this is already done, you can use types from .NET framework.</item>
                <item>For private elements, implement a user control, derive from WebControl, and attach a designer.</item>
                <item>Register the private element in both, the AspDotNetDesigner plugin as assembly and in HtmlEditor for formatting.</item>
                <item></item>
            </list>
            Registering the element is a two-step procedure. Both steps take place before loading (or first time after constructor).
            First, add a handler to get the right call from <see cref="E:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.RegisterDirectives"/> event:
            <code>
            aspDotNetDesigner1.RegisterDirectives += new EventHandler(aspDotNetDesigner1_RegisterDirectives);
            </code>
            Then, in the handler, add your element:
            <code>
            RegisterDirective directive = new RegisterDirective("uc", "MyUserControl", typeof(MyUserControl).AssemblyQualifiedName, typeof(MyUserControl), true);
            aspDotNetDesigner1.RegisterDirective(directive, htmlEditor1);
            AspTagInfo tagInfo = new AspTagInfo("uc:MyUserControl", FormattingFlags.Xml);
            htmlEditor1.RegisterElement(tagInfo, typeof(MyUserControl));
            </code>
            In this example, "uc" is the alias used in the document for the element "MyUserControl". Also the class has the same name
            "MyUserControl" (but it could have a different name). <see cref="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,GuruComponents.Netrix.IHtmlEditor)"/> registers the information usually 
            found in the &lt;%@ Register %&gt; statement in the document. If you're working with ASCX or ASPX documents it's necessary
            to transform them first, following these steps:
            <list type="bullet">
                <item>Strip out any content above the HTML tag.</item>
                <item>Add HTML, HEAD and BODY section if not already there (especially for ASCX files), and load content into BODY.</item>
                <item>Scan any Register directives and call <see cref="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,GuruComponents.Netrix.IHtmlEditor)"/> as described below.</item>
                <item>Remove any Control or Page directives. This is part of the host application and not supported by AspDotNetDesigner class.</item>
                <item>Load the prepared document and call <see cref="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,GuruComponents.Netrix.IHtmlEditor)"/> during Loading event (see above).</item>
            </list>
            After document has been edited by user just get body content by calling InnerHtml and restore the document structure. 
            It's also possible to use the formatter separatly to format the content and get XHTML back.
            </para>
            <para>
            Probably showing the webcontrols within the PropertyGrid is a good solution for a VS.NET like IDE. If you want to
            do so, just connect the event HtmlElementChanged and handle the current control. However, to avoid conflicts
            with <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/> based objects, two properties allow access:
            <code>
            if (e.CurrentElement == null)
            {
                propertyGrid1.SelectedObject = e.CurrentControl;
            }
            else
            {
                propertyGrid1.SelectedObject = e.CurrentElement;
            }
            </code>
            All elements handled internally by NetRix derive from <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>. Foreign sources for components,
            derived from <see cref="T:System.ComponentModel.IComponent"/> and subsequently implementing <see cref="T:System.Web.UI.Control"/> are handled properly
            by the infrastructure, however, all internal procedures based on <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/> can not handle this.
            For that reason, some event argument classes provide distinguish access to "controls" and "native controls".
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.IHtmlEditor"/>
            <seealso cref="M:GuruComponents.Netrix.IHtmlEditor.RegisterElement(GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo,System.Type)">RegisterElement (IHtmlEditor)</seealso>
            <seealso cref="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,GuruComponents.Netrix.IHtmlEditor)"/>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo"/>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.#ctor">
            <summary>
            Default Constructor supports design time behavior.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Default Constructor supports design time behavior
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.GetAspDotNetDesigner(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Returns the designer's properties at design time.
            </summary>
            <param name="htmlEditor"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.SetAspDotNetDesigner(GuruComponents.Netrix.IHtmlEditor,GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties)">
            <summary>
            Sets the designer's properties at design time.
            </summary>
            <param name="htmlEditor"></param>
            <param name="Properties"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.NotifyReadyStateCompleted(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Called by Host to notify the document state. You should not call this from user code.
            </summary>
            <param name="htmlEditor"></param>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.Version">
            <summary>
            Assembly version
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.ShouldSerializeAspDotNetDesigner(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Supports property grid and VS designer
            </summary>
            <param name="htmlEditor"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.CanExtend(System.Object)">
            <summary>
            Allows the extension of HTML Editor.
            </summary>
            <param name="extendee"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.ToString">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.CreateElement(System.String,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Create a new element in the given editor control.
            </summary>
            <remarks>
            Element types must be registered and well known before they could created. After creation the
            element exists within the local element cache and the current document, but is not yet appended
            to the DOM. It's recommended to add the element to the DOM using ElementDom functions like
            AppendChild.
            <para>
            
            </para>
            </remarks>
            <param name="tagName">The tagname, including the alias (like 'asp:button').</param>
            <param name="htmlEditor">The editor this element refers to.</param>
            <returns>Returns the element or <c>null</c>, if creation fails. See remarks for reasons.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.CreateElement(System.String,GuruComponents.Netrix.IHtmlEditor,System.Boolean)">
            <summary>
            Create a new element in the given editor control.
            </summary>
            <remarks>
            Element types must be registered and well known before they could created. After creation the
            element exists within the local element cache and the current document, but is not yet appended
            to the DOM. It's recommended to add the element to the DOM using ElementDom functions like
            AppendChild.
            </remarks>
            <param name="tagName">The tagname, including the alias (like 'asp:button').</param>
            <param name="htmlEditor">The editor this element refers to.</param>
            <param name="createRunatServerAttr">Creates the runat="server" attribute.</param>
            <returns>Returns the element or <c>null</c>, if creation fails. See remarks for reasons.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.InsertElementAtCaret(System.Web.UI.Control,GuruComponents.Netrix.HtmlEditor)">
            <summary>
            Insert an element and returns the inserted object instance.
            </summary>
            <remarks>
            Caller's are supposed to get the returned instance, because the parameter is orphaned (in fact, it's
            disposed right now) and removed from DOM.
            <para>
            Inserting a huge number of elements is not recommended, because the function runs several internal steps
            and therefore could result in performance flaw.
            </para>
            </remarks>
            <exception cref="T:System.NotImplementedException">The element you're trying to create is not yet registered.</exception>
            <param name="newElem">The element object being inserted.</param>
            <param name="htmlEditor">The editor we reference to.</param>
            <returns>Returns the new element instances after creation.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.InsertAdjacentElement(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,GuruComponents.Netrix.WebEditing.Elements.IElement,System.Web.UI.Control,GuruComponents.Netrix.IHtmlEditor)">
            <summary> 
            Insert Element related to another element. 
            </summary> 
            <param name="method">Inserting method</param> 
            <param name="relative">Element relative to which the control is inserted.</param> 
            <param name="ctrlToInsert">Control to insert</param>
            <param name="htmlEditor">Editor reference</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Register a user control assembly using a Directive object.
            </summary>
            <remarks>
            In case of multiple editors on a form you must register your directive for any editor which should
            display the content.
            <seealso cref="T:GuruComponents.Netrix.Designer.IReferenceManager"/>
            <seealso cref="T:GuruComponents.Netrix.Designer.IRegisterDirective"/>
            <seealso cref="E:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.DirectiveAdded"/>
            </remarks>
            <param name="directive">The item contains information about the registered object.</param>
            <param name="htmlEditor">Reference to HtmlEditor, this directive is related to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.GetReferenceManager(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Returns the reference manager, which manages user controls. 
            </summary>
            <remarks>
            The reference manager is responsible for the relation between user controls in the code, recognized
            by there prefix (namespace alias) and name, and the assembly which contains the type, which in turn
            resolves the control and its designer.
            <para>
            The manager can be used simple by call <see cref="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,GuruComponents.Netrix.IHtmlEditor)"/> directly. The directive of type
            <see cref="T:GuruComponents.Netrix.Designer.IRegisterDirective"/> will contain the necessary information. The reference manager is simple
            some sort of container to provide the directive information to the renderer.
            </para>
            <seealso cref="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,GuruComponents.Netrix.IHtmlEditor)"/>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.RegisterRootComponent(System.Web.UI.Page,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            The page which acts as the root component and forms the host for all components.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown if host service does not exists (Wrong usage).</exception>
            <param name="rootComponent">An object derived from Page.</param>
            <param name="htmlEditor"></param>
        </member>
        <member name="E:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.DirectiveAdded">
            <summary>
            Fired if the host application adds a new directive.
            </summary>f
        </member>
        <member name="E:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.RegisterDirectives">
            <summary>
            Fired during document load process to let host application register the directives.
            </summary>
            <remarks>
            Host application should register usercontrol directives in this event to create
            all internal references needed to resolve user types.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.Name">
            <summary>
            Returns "AspDotNetDesigner".
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.IsExtenderProvider">
            <summary>
            Declares that this is an extender provider. Returns <c>true</c>.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.Features">
            <summary>
            Supported Features. This supports the plug-in infrastructure.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.GetSupportedNamespaces(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            returns http://asp.schema for the asp alias.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.GetElementExtenders(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            List of element types, which the extender plugin extends.
            </summary>
            <remarks>
            See <see cref="M:GuruComponents.Netrix.PlugIns.IPlugIn.GetElementExtenders(GuruComponents.Netrix.WebEditing.Elements.IElement)"/> for background information.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.LoadFile(System.String,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Load an aspx file from path.
            </summary>
            <param name="filepath">File path. Ignores if file not found.</param>
            <param name="refEditor">The editor instance the contents is loaded into.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.LoadAspx(System.String,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Load an aspx file from string.
            </summary>
            <remarks>
            &lt;%@ Control Language="C#" ClassName="SampleA1" %>
            &lt;%@ Register Assembly="Custom.Kernel.Web" Namespace="v.Kernel.Web.UI.WebControls.AspFields" TagPrefix="aspfield" %>
            &lt;%@ Register Assembly="Custom.Library.WebRenderFields" Namespace="Custom.Library.WebRenderFields" TagPrefix="aspField" %>
            </remarks>
            <param name="content">Content to be loaded.</param>
            <param name="refEditor">The editor instance the contents is loaded into.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.SaveAspx(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Get the content as formatted aspx page. All directives are parsed and put to document's beginning.
            </summary>
            <param name="refEditor">The editor instance the contents is loaded from.</param>
            <returns>String with content</returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.AspDotNetDesigner.GetNativeElement(System.Web.UI.Control,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Try to get the native (internal) generic element that represents the ASCX controls container.
            </summary>
            <param name="aspControl">Control what we're looking for. Must be part of document.</param>
            <param name="htmlEditor1">Reference to editor</param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.BehaviorEventHandler">
            <summary>
            Generic handler for all behavior generated element events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.BehaviorEventArgs">
            <summary>
            Event arguments for generic element events.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.BehaviorEventArgs.#ctor(System.Web.UI.Control)">
            <summary>
            ctor
            </summary>
            <param name="control"></param>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.BehaviorEventArgs.CurrentElement">
            <summary>
            element
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.GlobalEvents">
            <summary>
            Supports events an a very low level to achieve global event handling.
            </summary>
            <remarks>This class supports the infrastructure and is not intended to being used from custom code.</remarks>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties">
            <summary>
            Properties for AspDotNet Extender Provider.
            </summary>
            <remarks>
            See properties for further information.
            By default the properties are set to the following values:
            <list type="bullet">
                <item>Active == true, e.g. is activated by default.</item>
                <item>ExpandUserControls == true, e.g. expands user controls by default.</item>
                <item>RequireServerAttribute == true, e.g. controls must have this attribute.</item>
                <item>Namespaces = null, e.g. no custom aliases registered.</item>
            </list>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            ctor
            </summary>
            <param name="editor"></param>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.RequireServerAttribute">
            <summary>
            Forces the component to check for existing runat="server" attribute and add on insertion if required.
            </summary>
            <remarks>
            When used with ASP.NET controls it's required. For custom elements it's
            recommended. However, custom controls may or may not rely on this attribute.
            <para>
            Default is <c>true</c>.
            </para>
            In case of inserting controls by using the methods provided by the plug-in the required
            attribute runat="server" will be added automatically, if the property is <c>true</c>.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.Active">
            <summary>
            Activates the designer at runtime.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.LoadAscx">
            <summary>
            Allows loading of ASCX files directly.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.ExpandUserControls">
            <summary>
            Shows content of user controls in design view.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.Namespaces">
            <summary>
            The default namespaces alias and urls used to identify elements.
            </summary>
            <remarks>
            This property contains an array of alias/namespace pairs, such like
            <c>rss,http://www.rss.org/</c>, separated with commas. The leading (first) part contains the alias.
            For XML snippets it's not required to declare the namespaces elsewhere in the document, though,
            for EDX documents the namespace must be declared following the XML rules.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignerProperties.ToString">
            <summary>
            Property description to support property grid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.EmbeddedSerializer">
            <summary>
            Serializes an control back into native element within document.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior">
            <summary>
            This class creates the design time HTML for ASP.NET control,
            which are linked to the underlying HTML designer.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.Name">
            <summary>
            Unique name of behavior.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.Control">
            <summary>
            Current webcontrol handled by this design time behavior.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.Editor">
            <summary>
            Related to editor that contains the element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            ctor
            </summary>
            <param name="editor"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior._eventSink_ElementEvent(System.Object,GuruComponents.Netrix.ComInterop.Interop.IHTMLEventObj)">
            <summary>
            Redirect internal events from sink to outer control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.OnContentRefresh">
            <summary>
            Let the view follow the properties.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.DesignTimeElementView">
            <summary>
            View Element
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.DesignTimeHtml">
            <summary>
            Design time HTML
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.OnTemplateModeChanged">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.Designer">
            <summary>
            Designer instance.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.NativeElement">
            <summary>
            Native (MSHTML) element that's behind the ASP.NET control.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.DesignTimeElement">
            <summary>
            design time instance.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetAttribute(System.String,System.Boolean)">
            <summary>
            Gets an attribute.
            </summary>
            <param name="attribute"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetStyleAttribute(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get Style
            </summary>
            <param name="attribute"></param>
            <param name="designTimeOnly"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetStyle(System.Boolean)">
            <summary>
            
            </summary>
            <param name="designTimeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.RemoveAttribute(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.RemoveStyleAttribute(System.String,System.Boolean,System.Boolean)">
            <summary>
            Removes a style attribute.
            </summary>
            <param name="attribute"></param>
            <param name="designTimeOnly"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.SetAttribute(System.String,System.Object,System.Boolean)">
            <summary>
             Set Attribute
            </summary>
            <param name="attribute"></param>
            <param name="val"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.SetStyleAttribute(System.String,System.Boolean,System.Object,System.Boolean)">
            <summary>
            SetStyleAttribute.
            </summary>
            <param name="attribute"></param>
            <param name="designTimeOnly"></param>
            <param name="val"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.SetStyle(System.String,System.Boolean)">
            <summary>
            Set all styles as string.
            </summary>
            <param name="cssText"></param>
            <param name="designTimeOnly"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetElement(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Get the elements container.
            </summary>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.ElementDefaults">
            <summary>
            Defaults. Not for user code, just public to support the infrastructure.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetAttribute(System.String)">
            <summary>
            Retrieves the value of the identified attribute on the tag.
            </summary>
            
            <returns>
            A string containing the value of the attribute.
            </returns>
            
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetContent">
            <summary>
            Retrieves the HTML markup for the content of the tag.
            </summary>
            
            <returns>
            The HTML markup for the content of the tag.
            </returns>
            
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.RemoveAttribute(System.String)">
            <summary>
            Deletes the specified attribute from the tag.
            </summary>
            
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.SetAttribute(System.String,System.String)">
            <summary>
            Sets the value of the specified attribute and creates the attribute, if necessary.
            </summary>
            
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.SetContent(System.String)">
            <summary>
            Sets the HTML markup for the content of the tag.
            </summary>
            
            <param name="content">The HTML markup for the content of the tag.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.SetDirty(System.Boolean)">
            <summary>
            Sets the <see cref="P:System.Web.UI.Design.IControlDesignerTag.IsDirty"></see> property of the tag.
            </summary>
            
            <param name="dirty">The value for the <see cref="P:System.Web.UI.Design.IControlDesignerTag.IsDirty"></see> property.</param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetOuterContent">
            <summary>
            Retrieves the complete HTML markup for the control, including the outer tags.
            </summary>
            
            <returns>
            The outer HTML markup for the control.
            </returns>
            
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.FreezeElement">
            <summary>
            Freezes the element so it's content is no longer editable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.RefreshWebControl">
            <summary>
            Forces refresh of current display.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetEventInfoFlags(System.Int32@)">
            <summary>
            
            </summary>
            <param name="plEventInfoFlags"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.GetEventTarget(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            The method or operation is not implemented.
            </summary>
            <param name="ppElement"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.SetCursor(System.Int32)">
            <summary>
            The method or operation is not implemented.
            </summary>
            <param name="lPartID"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior.StringFromPartID(System.Int32,System.String@)">
            <summary>
            The method or operation is not implemented.
            </summary>
            <param name="lPartID"></param>
            <param name="pbstrPart"></param>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.ErrorControl">
            <summary>
            The purpose of this class is the creation of some HTML for design time
            error messages.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.EventSink">
            <summary>
            The purpose of this class is to deal with the events a control will
            fire at design time.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.EventSink.Connect(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Connects the specified control and its underlying element to the event sink.
            </summary>        
            <param name="element">Underlying element of control.</param>
            <param name="editor">Reference to editor control.</param>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.EventSink.AllowResize">
            <summary>
            Gets <c>true</c>, when resizing is allowed. The property responds
            to the internally forced setting, if set to <c>false</c> . Otherwise it
            calls the underlying <see cref="T:System.Windows.Forms.Design.ControlDesigner">ControlDesigner</see> to 
            get the appropriate property.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.NameCreationService">
            <summary>
            Creates new names for components that need a name.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.NameCreationService.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            ctor
            </summary>
            <param name="editor"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.NameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
            <summary>
            Create a new valid name for given type.
            </summary>
            <param name="container"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.NameCreationService.IsValidName(System.String)">
            <summary>
            Checks if a name is valid.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.NameCreationService.ValidateName(System.String)">
            <summary>
            Validates a name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.UserControlTypeResolution">
            <summary>
            Resolves types of user controls from directives.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.UserControlTypeResolution.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Resolves an user control's type.
            </summary>
            <param name="htmlEditor"></param>
        </member>
        <member name="T:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner">
            <summary>
            Base designer for elements.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner.Behavior">
            <summary>
            behavior
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner.Verbs">
            <summary>
            Expose private werbs to netrix webcontrol.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Filter
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner.PreFilterEvents(System.Collections.IDictionary)">
            <summary>
            Filter
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner.ShouldCodeSerialize">
            <summary>
            Gets or sets a value indicating whether to create a field declaration for
                the control in the code-behind file for the current design document during
                serialization.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.AspDotNetDesigner.ElementDesigner.DataBindings">
            <summary>
            Gets the data bindings collection for the current control.
            </summary>
            <remarks>A System.Web.UI.DataBindingCollection that contains the data bindings for
               the current control.</remarks>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.ControlDirective">
            <summary>
            A class that handels the @Control directive.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.ControlDirective.DirectiveName">
            <summary>
            Name of directive. Always returns "Control".
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.Directive">
            <summary>
            Base implementation for register directives storage.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.Directive.Dictionary">
            <summary>
            All attributes
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.Directive.DirectiveName">
            <summary>
            The name
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.Directive.AddAttribute(System.String,System.String)">
            <summary>
            Adds an attribute
            </summary>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.Directive.GetCasedName(System.String)">
            <summary>
            gets cased name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.Directive.ToString">
            <summary>
            As it appears in code
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.PageDirective">
            <summary>
            A class that handels the @Page directive
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.PageDirective.DirectiveName">
            <summary>
            Returns always 'Page'.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PageDirective.GetDirectiveFromString(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            Create a directive object from string.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <param name="cc">Regex</param>
            <returns>Directive object, or throws an exception if format is invalid.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PageDirective.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PageDirective.#ctor(System.Text.RegularExpressions.CaptureCollection)">
            <summary>
            ctor
            </summary>
            <param name="cc"></param>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.RegisterDirective">
            <summary>
            A class that handles the @Register directive.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.ObjectType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.AssemblyName">
            <summary>
            Assembly name
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.DirectiveName">
            <summary>
            Returns "Register"
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.IsUserControl">
            <summary>
            True if user control made from ascx file.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.NamespaceName">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.SourceFile">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.TagName">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.TagPrefix">
            <summary>
            Prefix
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirective.GetDirectiveFromString(System.Text.RegularExpressions.CaptureCollection,System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Create a directive object from string.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <param name="cc">String, like &lt;%@ Register Assembly="Name" Namespace="Field" TagPrefix="Pref" %&gt;.</param>
            <param name="host">Reference to host.</param>
            <returns>Directive object, or throws an exception if format is invalid.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirective.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirective.#ctor(System.String,System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Ctor with params.
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <param name="sourceFile"></param>
            <param name="type"></param>
            <param name="userControl"></param>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirective.ExpandUserControl">
            <summary>
            Expand the user control in design view.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirective.#ctor(System.String,System.String,System.Type)">
            <summary>
            Ctor
            </summary>
            <param name="tagPrefix"></param>
            <param name="namespaceName"></param>
            <param name="assemblyOfType"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirective.#ctor(System.String,System.String,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="tagPrefix"></param>
            <param name="namespaceName"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirective.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <param name="sourceFile"></param>
            <param name="userControl"></param>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.RegisterDirectiveCollection">
            <summary>
            Supports the register directives for ASP.NET as well as user controls.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.ASPTAGPREFIX">
            <summary>
            asp
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.Count">
            <summary>
            Number of directives.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.IsReadOnly">
            <summary>
            Readonly, always false.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.IsSynchronized">
            <summary>
            Sync always false.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.SyncRoot">
            <summary>
            Always null.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.Item(System.String)">
            <summary>
            Directive
            </summary>
            <param name="tagPrefix"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.Item(System.String,System.String)">
            <summary>
            Directive
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.DirectiveAdded">
            <summary>
            Added event
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.AddParsedRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective)">
            <summary>
            
            </summary>
            <param name="directive"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective)">
            <summary>
            Add directive.
            </summary>
            <param name="directive"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,System.Boolean)">
            <summary>
            Add directive.
            </summary>
            <param name="directive"></param>
            <param name="raiseEvent"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            copy to array
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.Clear">
            <summary>
            clear table
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.GetEnumerator">
            <summary>
            enumerate
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.GetRegisterDirective(System.String,System.String)">
            <summary>
            Get directive.
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.GetObjectType(System.IServiceProvider,System.String,System.String)">
            <summary>
            Get object type
            </summary>
            <param name="serviceProvider"></param>
            <param name="tagPrefix"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.GetTagPrefix(System.Type)">
            <summary>
            get prefix
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.GetTagName(System.Type)">
            <summary>
            get tag name
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.RegisterDirectiveCollection.ToString">
            <summary>
            Makes register directives string representation.
            </summary>
            <remarks>
            Returns things like &lt;%@ Register TagPrefix=\"uc1\" TagName=\"AvanteamTextField\" Src=\"Avanteam.Library.WebRenderFields\" %&gt;.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.WebFormsReferenceManager">
            <summary>
            Aclass for accessing the types, directives, and controls in the current Web project document.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.#ctor(GuruComponents.Netrix.IHtmlEditor,GuruComponents.Netrix.Designer.RegisterDirectiveCollection)">
            <summary>
            ctor
            </summary>
            <param name="htmlEditor"></param>
            <param name="registerDirectives"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetObjectType(System.String,System.String)">
            <summary>
            type
            </summary>
            <param name="tagPrefix"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetTagName(System.Type)">
            <summary>
            The type name.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective,System.Boolean)">
            <summary>
            Add a directive.
            </summary>
            <param name="directive"></param>
            <param name="raiseEvent"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.AddRegisterDirective(GuruComponents.Netrix.Designer.IRegisterDirective)">
            <summary>
            Add a directive
            </summary>
            <param name="directive"></param>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.WebFormsReferenceManager.DirectiveAdded">
            <summary>
            Fired if a new directive has been added.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetObjectType(System.IServiceProvider,System.String,System.String)">
            <summary>
            The Type.
            </summary>
            <param name="serviceProvider"></param>
            <param name="tagPrefix"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetRegisterDirective(System.String,System.String)">
            <summary>
            The directive.
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.WebFormsReferenceManager.Item(System.String)">
            <summary>
            The directive.
            </summary>
            <param name="tagPrefix"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.WebFormsReferenceManager.Item(System.String,System.String)">
            <summary>
            The directive.
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetRegisterDirectives">
            <summary>
            directives
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetTagPrefix(System.Type)">
            <summary>
            prefix
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetType(System.String,System.String)">
            <summary>
            type
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.GetUserControlPath(System.String,System.String)">
            <summary>
            control path
            </summary>
            <param name="tagPrefix"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.WebFormsReferenceManager.RegisterTagPrefix(System.Type)">
            <summary>
            "asp"
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AscxElement">
            <summary>
            A generic class for access to methods which can't handle System.Web.UI.Control based elements.
            </summary>
            <remarks>
            Internally this class is used to resolve and show User Controls loaded from ASCX files.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.Behavior">
            <summary>
            Behavior 
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.#ctor(GuruComponents.Netrix.IHtmlEditor,GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            ctor
            </summary>
            <param name="editor"></param>
            <param name="peer"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.#ctor(GuruComponents.Netrix.IHtmlEditor,GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior)">
            <summary>
            ctor
            </summary>
            <param name="editor"></param>
            <param name="peer"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.AssociatePeer(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            Add peer. This is internally used und shall never be called from user code.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.AssociatePeer(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,GuruComponents.Netrix.AspDotNetDesigner.DesignTimeBehavior)">
            <summary>
            ctor
            </summary>
            <param name="element"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.IsSelectable">
            <summary>
            Selectable
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.IsAbsolutePositioned">
            <summary>
            Position style.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.InsertAdjacentElement(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Insert an element
            </summary>
            <param name="method"></param>
            <param name="element"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.InsertAdjacentHtml(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Insert Html
            </summary>
            <param name="method"></param>
            <param name="html"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.InsertAdjacentText(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Insert text.
            </summary>
            <param name="method"></param>
            <param name="text"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetAbsoluteArea">
            <summary>
            Get area of element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetBaseElement">
            <summary>
            The peer element (generic base element)
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.HtmlEditor">
            <summary>
            Editor reference.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.ContentEditable">
            <summary>
            Is editable in browse mode.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.AtomicSelection">
            <summary>
            Supports atomic selection.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.Unselectable">
            <summary>
            Is selectable
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.ElementBehaviors">
            <summary>
            Access to the binary behavior manager at element level.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GuruComponents#Netrix#WebEditing#Elements#IElement#InnerHtml">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.OuterHtml">
            <summary>
            Thre outer HTML. Set path not implemented.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.TagName">
            <summary>
            Tag's name.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.TagElement">
            <summary>
            Self reference.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.Alias">
            <summary>
            Alias for designer
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxElement.ElementName">
            <summary>
            Name of element
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetStyle">
            <summary>
            Get
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.SetStyle(System.String)">
            <summary>
            Set
            </summary>
            <param name="CssText"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetStyleAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="styleName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.SetAttribute(System.String,System.Object)">
            <summary>
            Set
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.RemoveAttribute(System.String)">
            <summary>
            Remove
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetAttribute(System.String)">
            <summary>
            Get
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetNativeAttribute(System.String)">
            <summary>
            Universal access to any attribute.
            </summary>
            <remarks>
            The type returned may vary depended on the internal type.
            </remarks>
            <param name="attribute">The name of the attribute.</param>
            <returns>The object which is the value of the attribute.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetStringAttribute(System.String)">
            <summary>
            Returns an attribute's value which is supposedly string.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.GetStringAttribute(System.String,System.String)">
            <summary>
            Returns an attribute's value which is supposedly string.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <param name="defaultValue"></param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.SetStringAttribute(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxElement.SetStringAttribute(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo">
            <summary>
            This class is used to store information about the kind of element.
            </summary>
            <remarks>
            It is used internally to control the formatting behavior. Externally it is used to provide such information for plug-in modules.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.Type">
            <summary>
            The type of element controls the generel formatting behavior.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.Flags">
            <summary>
            Determines how to format this kind of element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.FollowingWhiteSpaceType">
            <summary>
            Determines how significant are whitespaces following this element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.InnerWhiteSpaceType">
            <summary>
            Determines how significant are whitespaces within this element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.IsComment">
            <summary>
            The element has to treated as comment.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.IsInline">
            <summary>
            The element is an inline element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.IsXml">
            <summary>
            The element has to be treated as pure XML.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.NoEndTag">
            <summary>
            The element does not has an end tag, e.g. it is not a container.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.NoIndent">
            <summary>
            The element does not being indented, even if it starts at a new line.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.PreserveContent">
            <summary>
            The element is supposed to preserve its content.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.TagName">
            <summary>
            The tag name of the element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags)">
            <overloads/>
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags,GuruComponents.Netrix.HtmlFormatting.Elements.ElementType)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
            <param name="innerWhiteSpace"></param>
            <param name="followingWhiteSpace"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType,GuruComponents.Netrix.HtmlFormatting.Elements.ElementType)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
            <param name="innerWhiteSpace"></param>
            <param name="followingWhiteSpace"></param>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="newTagName"></param>
            <param name="info"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AscxTagInfo.CanContainTag(GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo)">
            <summary>
            Informs that a element can carry another one.
            </summary>
            <remarks>
            This method always returns true. Classes derive from <see cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.TagInfo"/> may
            overwrite it to control the behavior of complex elements.
            </remarks>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo">
            <summary>
            This class is used to store information about the kind of element.
            </summary>
            <remarks>
            It is used internally to control the formatting behavior. Externally it is used to provide such information for plug-in modules.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.Type">
            <summary>
            The type of element controls the generel formatting behavior.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.Flags">
            <summary>
            Determines how to format this kind of element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.FollowingWhiteSpaceType">
            <summary>
            Determines how significant are whitespaces following this element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.InnerWhiteSpaceType">
            <summary>
            Determines how significant are whitespaces within this element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.IsComment">
            <summary>
            The element has to treated as comment.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.IsInline">
            <summary>
            The element is an inline element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.IsXml">
            <summary>
            The element has to be treated as pure XML.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.NoEndTag">
            <summary>
            The element does not has an end tag, e.g. it is not a container.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.NoIndent">
            <summary>
            The element does not being indented, even if it starts at a new line.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.PreserveContent">
            <summary>
            The element is supposed to preserve its content.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.TagName">
            <summary>
            The tag name of the element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags)">
            <overloads/>
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags,GuruComponents.Netrix.HtmlFormatting.Elements.ElementType)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
            <param name="innerWhiteSpace"></param>
            <param name="followingWhiteSpace"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.FormattingFlags,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType,GuruComponents.Netrix.HtmlFormatting.Elements.WhiteSpaceType,GuruComponents.Netrix.HtmlFormatting.Elements.ElementType)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="tagName"></param>
            <param name="flags"></param>
            <param name="innerWhiteSpace"></param>
            <param name="followingWhiteSpace"></param>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.#ctor(System.String,GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo)">
            <summary>
            Creates a new tag info with basic parameters. 
            </summary>
            <param name="newTagName"></param>
            <param name="info"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AspTagInfo.CanContainTag(GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo)">
            <summary>
            Informs that a element can carry another one.
            </summary>
            <remarks>
            This method always returns true. Classes derive from <see cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.TagInfo"/> may
            overwrite it to control the behavior of complex elements.
            </remarks>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx">
            <summary>
            This class allows access to additional information about an element and advanced element manipulation.
            </summary>
            <remarks>
            This class enhances the basic Element class. It was introduced to avoid
            the ability of non-HTML attributes for propertygrid access. The ScrollXX properties allow the
            detection of the current scroll position to synchronize external controls like ruler or bars.
            <para>
            The positions are in pixel and relative to the control window.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.DoScroll(GuruComponents.Netrix.WebEditing.Elements.ScrollAction)">
            <summary>
            Simulates a click on a scroll-bar component.
            </summary>
            <remarks>
            Cascading Style Sheets (CSS) allow you to scroll on all objects through the IHTMLStyle::overflow property.
            <para>When the content of an element changes and causes scroll bars to display, the IHTMLElement2::doScroll method might not work correctly immediately following the content update. When this happens, you can use the IHTMLWindow2::setTimeout method to enable the browser to recognize the dynamic changes that affect scrolling.</para>
            </remarks>
            <param name="scroll"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ComponentFromPoint(System.Drawing.Point)">
            <summary>
            Returns the component located at the specified coordinates via certain events. 
            </summary>
            <remarks>
            A component is a part of the element, which acts as an specific interaction point. Typically these
            are the scrollbars as well as parts of the scrollbar, and the resizing handles. The property can
            be used to determine such an element at a specific client location.
            <para>The ComponentFromPoint method, available as of MSHTML 5, is applicable to any object that can be given scroll bars through Cascading Style Sheets (CSS).</para> 
            <para>The ComponentFromPoint method may not consistently return the same object when used with the onmouseover event. Because a user's mouse speed and entry point can vary, different components of an element can fire the onmouseover event. For example, when a user moves the cursor over a textArea object with scroll bars, the event might fire when the mouse enters the component border, the scroll bars, or the client region. Once the event fires, the expected element may not be returned unless the scroll bars were the point of entry for the mouse. In this case, the onmousemove event can be used to provide more consistent results.</para>
            </remarks>
            <param name="loc">Location in client coordinates of the point for which the component is retrieved.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ScrollLeft">
            <summary>
            Sets or retrieves the distance between the left edge of the object and the leftmost portion of the content currently visible in the window.
            </summary>
            <remarks>
            This property's value equals the current horizontal offset of the content within the scrollable range. Although you can set this property to any value, if you assign a value less than 0, the property is set to 0. If you assign a value greater than the maximum value, the property is set to the maximum value.
            <para>This property is always 0 for objects that do not have scroll bars. For these objects, setting the property has no effect.</para>
            <para>When a marquee object scrolls vertically, its ScrollLeft extended property is set to 0.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ScrollTop">
            <summary>
            Sets or retrieves the distance between the top of the object and the topmost portion of the content currently visible in the window.
            </summary>
            <remarks>
            This property's value equals the current vertical offset of the content within the scrollable range. Although you can set this property to any value, if you assign a value less than 0, the property is set to 0. If you assign a value greater than the maximum value, the property is set to the maximum value.
            <para>This property is always 0 for objects that do not have scroll bars. For these objects, setting the property has no effect.</para>
            <para>When a marquee object scrolls horizontally, its ScrollTop extended property is set to 0.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ScrollHeight">
            <summary>
            Retrieves the scrolling height of the object.
            </summary>
            <remarks>
            The height is the distance between the top and bottom edges of the object's content.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ScrollWidth">
            <summary>
            Retrieves the scrolling width of the object.
            </summary>
            <remarks>
            The width is the distance between the left and right edges of the object's visible content.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ClientArea">
            <summary>
            Retrieves the client area of the object including padding, but not including margin, border, or scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.AbsoluteArea">
            <summary>
            Retrieves an object that specifies the bounds of the elements.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.Normalize">
            <summary>
            Merges adjacent <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement"/> objects to produce a normalized document object model.
            </summary>
            <remarks>
            Calling Normalize before manipulating the subelements of an object ensures that the document object model has a consistent structure. The normal form is useful for operations that require a consistent document tree structure, and it ensures that the document object model view is identical when saved and reloaded.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ScrollIntoView">
            <overloads/>
            <summary>
            Causes the object to scroll into view, aligning at the top of the window.
            </summary>
            <remarks>
            The ScrollIntoView method is useful for immediately showing the user the result of some action without requiring the user to manually scroll through the document to find the result.
            <para>Depending on the size of the given object and the current window, this method might not be able to put the item at the very top or very bottom, but will position the object as close to the requested position as possible.</para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ScrollIntoView(System.Boolean)">
            <summary>
            Causes the object to scroll into view, aligning it either at the top or bottom of the window.
            </summary>
            <remarks>
            The ScrollIntoView method is useful for immediately showing the user the result of some action without requiring the user to manually scroll through the document to find the result.
            <para>Depending on the size of the given object and the current window, this method might not be able to put the item at the very top or very bottom, but will position the object as close to the requested position as possible.</para>
            </remarks>
            <param name="top">Specifies where to scroll to. If <c>true</c> the element is scrolled to top position.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.DOMIndex">
            <summary>
            Retrieves the ordinal position of the object, in source order, as the object appears in the document's all collection.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.SetActive">
            <summary>
            Activate
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.SetCapture(System.Boolean)">
            <summary>
            Set the ability to capture the focus.
            </summary>
            <param name="containerCapture"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.ReleaseCapture">
            <summary>
            Release the ability to capture the focus.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericPropertiesEx.HideFocus">
            <summary>
            Control focus
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.GenericElement">
            <summary>
            A generic class for access to methods which can't handle System.Web.UI.Control based elements.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.Behavior">
            <summary>
            Behavior
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.IsSelectable">
            <summary>
            Selectable
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.IsAbsolutePositioned">
            <summary>
            positioned
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.InsertAdjacentElement(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Insert element
            </summary>
            <param name="method"></param>
            <param name="element"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.InsertAdjacentHtml(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Insert Html.
            </summary>
            <param name="method"></param>
            <param name="html"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.InsertAdjacentText(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Insert Text
            </summary>
            <param name="method"></param>
            <param name="text"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.GetAbsoluteArea">
            <summary>
            Area
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.GetBaseElement">
            <summary>
            Base element
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.HtmlEditor">
            <summary>
            Editor
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.ContentEditable">
            <summary>
            Is editable in browse mode.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.AtomicSelection">
            <summary>
            Select as once.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.Unselectable">
            <summary>
            Make unselectable.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.ElementBehaviors">
            <summary>
            Access to the binary behavior manager at element level.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.OuterHtml">
            <summary>
            Outer Html. Readonly.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.TagName">
            <summary>
            Tag's name.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.TagElement">
            <summary>
            Self reference.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.Alias">
            <summary>
            Alias
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.GenericElement.ElementName">
            <summary>
            Element's name
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.GetStyle">
            <summary>
            Get style
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.SetStyle(System.String)">
            <summary>
            Set style.
            </summary>
            <param name="CssText"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.SetAttribute(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.RemoveAttribute(System.String)">
            <summary>
            Remove attribute
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.GetAttribute(System.String)">
            <summary>
            Read attribute
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.GetNativeAttribute(System.String)">
            <summary>
            Universal access to any attribute.
            </summary>
            <remarks>
            The type returned may vary depended on the internal type.
            </remarks>
            <param name="attribute">The name of the attribute.</param>
            <returns>The object which is the value of the attribute.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.GetStringAttribute(System.String)">
            <summary>
            Returns an attribute's value which is supposedly string.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.GetStringAttribute(System.String,System.String)">
            <summary>
            Returns an attribute's value which is supposedly string.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <param name="defaultValue"></param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.SetStringAttribute(System.String,System.String)">
            <summary>
            Set attribute
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.GenericElement.SetStringAttribute(System.String,System.String,System.String)">
            <summary>
            Set attribute
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <param name="defaultValue"></param>
        </member>
    </members>
</doc>
