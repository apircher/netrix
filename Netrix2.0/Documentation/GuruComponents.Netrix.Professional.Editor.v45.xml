<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GuruComponents.Netrix.Professional.Editor.v45</name>
    </assembly>
    <members>
        <member name="T:GuruComponents.Netrix.CssTextFormatting">
            <summary>
            CssTextFormatting provides methods to format text selections or text blocks using CSS inline styles.
            </summary>
            <remarks>
            This class should never called directly from user code. It is necessary to use the 
            <see cref="P:GuruComponents.Netrix.HtmlEditor.CssTextFormatting"/> property to request a singleton instance
            of the class to access the various properties and methods. This assures that all requests are assigned
            to the current document only.
            <para>
            For dealing with an instance of the class it is recommended to use the <see cref="T:GuruComponents.Netrix.ITextFormatting"/>
            interface as type.
            </para>
            <para>
            This class was introduced with Netrix 2 in Spring 2011 release to avoid conflicts with the classic formatting behavior, as exposed
            by the <see cref="T:GuruComponents.Netrix.HtmlTextFormatting"/> class.
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.HtmlTextFormatting">HtmlTextFormatting</seealso>
            <seealso cref="T:GuruComponents.Netrix.ITextFormatting">ITextFormatting</seealso>
        </member>
        <member name="M:GuruComponents.Netrix.CssTextFormatting.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Constructor which simply takes an HtmlEditor to interface with MSHTML.
            </summary>
            <remarks>
            This constructor supports the
            NetRix infrastructure and should never called directly from user code.
            </remarks>
            <param name="editor"></param>
        </member>
        <member name="M:GuruComponents.Netrix.CssTextFormatting.RemoveInlineFormat">
            <summary>
            Removes the current inline formatting with &lt;font&gt; tag.
            </summary>
            <example>
            The following code assumes menu item to RemoveInlineFormat and its click event 
            is handle like this:
            <code>
            private void mnuRemoveInlineFormat_Click(object sender, System.EventArgs e)
            {
            	htmlEditor2.TextFormatting.RemoveInlineFormat();
            }
            </code>
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.CanSetBackColor">
            <summary>
            Indicates if the background color can be set
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.CanSetFontName">
            <summary>
            Indicates if the font face can be set.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.CanSetFontSize">
            <summary>
            Indicates if the font size can get set.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.CanSetForeColor">
            <summary>
            Indicates if the foreground color can be set.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.FontName">
            <summary>
            Gets and sets the font name of the current text.
            </summary>
            <remarks>
            Any call to the set path will remove empty attributes, if the current element is a font element and
            the attribute is empty. If no more attributes left the font tag is removed.  
            <para>
            The intention if this property is NOT to change the font face of any font attribute which is valid in
            the parent hierarchy. This means, that only an active selection with one or more characters will
            encapsulated with the font tag. To get the current element just use <c>HtmlEditor.GetCurrentElement</c>
            or get the current element form HtmlElementChanged event. If the current element is the font
            element the property <c>face</c> can be used to set or retrieve the current font face value.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.CssFontSize">
            <summary>
            Gets or sets the font size using a span tag and local CSS style 'font-size'.
            </summary>
            <remarks>
            Use as a replacement for <see cref="T:System.Web.UI.WebControls.FontSize"/>.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.ForeColor">
             <summary>
             The foreground color of the current text.
             </summary>
             <remarks>
             Any call to the set path will remove empty attributes, if the current element is a font element and
             the attribute is empty. If no more attributes left the font tag is removed.  
             <para>
             The intention if this property is NOT to change the color of any font attribute which is valid in
             the parent hierarchy. This means, that only an active selection with one or more characters will
             encapsulated with the font tag. To get the current element just use <c>HtmlEditor.GetCurrentElement</c>
             or get the current element form HtmlElementChanged event. If the current element is the font
             element the property color can be used to set or retrieve the current color value.
             </para>
             <seealso cref="P:GuruComponents.Netrix.HtmlTextFormatting.BackColor">BackColor</seealso>
             </remarks>
             <example>
             Assuming you have a dialog <c>ColorWizard</c> that provides both, ForeColor and BackColor settings,
             the following code will change the current selection to the selected colors (C#):
             <code>
            ColorWizardDlg = new ColorWizard();
            ColorWizardDlg.FontForeColor = this.htmlEditor1.TextFormatting.ForeColor;
            ColorWizardDlg.FontBackColor = this.htmlEditor1.TextFormatting.BackColor;
            if (ColorWizardDlg.ShowDialog() == DialogResult.OK)
            {
               this.htmlEditor1.TextFormatting.ForeColor = ColorWizardDlg.FontForeColor;
               this.htmlEditor1.TextFormatting.BackColor = ColorWizardDlg.FontBackColor;
            }
             </code>
             The dialog is best build using the ColorPicker user control from NetRix UI package. The following code
             is a good example of how to do this (C#):
             <code>
            using System;
            using System.Drawing;
            using System.Collections;
            using System.ComponentModel;
            using System.Windows.Forms;
            
            using GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker;
            
            namespace Comzept.DemoApplication
            {
            public class ColorWizard : System.Windows.Forms.Form
            {
                private ColorPickerUserControl colorPickerUserControlFore;
                private ColorPickerUserControl colorPickerUserControlBack;
                private System.Windows.Forms.Button buttonOK;
                private System.Windows.Forms.Button buttonCancel;
                private System.Windows.Forms.Label labelHeader;
                private System.Windows.Forms.Label labelForeground;
                private System.Windows.Forms.Label labelBackground;
                private System.Windows.Forms.Label labelSample;
                private System.ComponentModel.Container components = null;
            
                public ColorWizard()
                {
                    InitializeComponent();
                }
            
                protected override void Dispose( bool disposing )
                {
                    if( disposing )
                    {
                        if(components != null)
                        {
                            components.Dispose();
                        }
                    }
                    base.Dispose( disposing );
                }
            
                private void InitializeComponent()
                {
                    this.labelHeader = new System.Windows.Forms.Label();
                    this.colorPickerUserControlFore = new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorPickerUserControl();
                    this.colorPickerUserControlBack = new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorPickerUserControl();
                    this.labelForeground = new System.Windows.Forms.Label();
                    this.labelBackground = new System.Windows.Forms.Label();
                    this.buttonOK = new System.Windows.Forms.Button();
                    this.buttonCancel = new System.Windows.Forms.Button();
                    this.labelSample = new System.Windows.Forms.Label();
                    this.SuspendLayout();
                    /// 
                    /// labelHeader
                    /// 
                    this.labelHeader.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.labelHeader.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                    this.labelHeader.Location = new System.Drawing.Point(8, 8);
                    this.labelHeader.Name = "labelHeader";
                    this.labelHeader.Size = new System.Drawing.Size(272, 24);
                    this.labelHeader.TabIndex = 0;
                    this.labelHeader.Text = "Change the currently selected color:";
                    /// 
                    /// colorPickerUserControlFore
                    /// 
                    this.colorPickerUserControlFore.CurrentColor = System.Drawing.Color.Empty;
                    this.colorPickerUserControlFore.Location = new System.Drawing.Point(8, 48);
                    this.colorPickerUserControlFore.Name = "colorPickerUserControlFore";
                    this.colorPickerUserControlFore.Size = new System.Drawing.Size(272, 23);
                    this.colorPickerUserControlFore.TabIndex = 1;
                    this.colorPickerUserControlFore.ColorChanged += new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorChangedEventHandler(this.colorPickerUserControlFore_ColorChanged);
                    /// 
                    /// colorPickerUserControlBack
                    /// 
                    this.colorPickerUserControlBack.CurrentColor = System.Drawing.Color.Empty;
                    this.colorPickerUserControlBack.Location = new System.Drawing.Point(8, 96);
                    this.colorPickerUserControlBack.Name = "colorPickerUserControlBack";
                    this.colorPickerUserControlBack.Size = new System.Drawing.Size(272, 23);
                    this.colorPickerUserControlBack.TabIndex = 2;
                    this.colorPickerUserControlBack.ColorChanged += new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorChangedEventHandler(this.colorPickerUserControlBack_ColorChanged);
                    /// 
                    /// labelForeground
                    /// 
                    this.labelForeground.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.labelForeground.Location = new System.Drawing.Point(8, 32);
                    this.labelForeground.Name = "labelForeground";
                    this.labelForeground.Size = new System.Drawing.Size(100, 16);
                    this.labelForeground.TabIndex = 3;
                    this.labelForeground.Text = "Foreground:";
                    /// 
                    /// labelBackground
                    /// 
                    this.labelBackground.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.labelBackground.Location = new System.Drawing.Point(8, 80);
                    this.labelBackground.Name = "labelBackground";
                    this.labelBackground.Size = new System.Drawing.Size(100, 16);
                    this.labelBackground.TabIndex = 4;
                    this.labelBackground.Text = "Background";
                    /// 
                    /// buttonOK
                    /// 
                    this.buttonOK.DialogResult = System.Windows.Forms.DialogResult.OK;
                    this.buttonOK.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.buttonOK.Location = new System.Drawing.Point(208, 176);
                    this.buttonOK.Name = "buttonOK";
                    this.buttonOK.TabIndex = 5;
                    this.buttonOK.Text = "OK";
                    /// 
                    /// buttonCancel
                    /// 
                    this.buttonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                    this.buttonCancel.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.buttonCancel.Location = new System.Drawing.Point(128, 176);
                    this.buttonCancel.Name = "buttonCancel";
                    this.buttonCancel.TabIndex = 6;
                    this.buttonCancel.Text = "Cancel";
                    /// 
                    /// labelSample
                    /// 
                    this.labelSample.BackColor = System.Drawing.SystemColors.ControlLightLight;
                    this.labelSample.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
                    this.labelSample.Font = new System.Drawing.Font("Verdana", 14F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))), System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                    this.labelSample.Location = new System.Drawing.Point(8, 128);
                    this.labelSample.Name = "labelSample";
                    this.labelSample.Size = new System.Drawing.Size(272, 40);
                    this.labelSample.TabIndex = 7;
                    this.labelSample.Text = "Worldsoft Color Sample";
                    this.labelSample.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
                    /// 
                    /// ColorWizard
                    /// 
                    this.AcceptButton = this.buttonOK;
                    this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
                    this.BackColor = System.Drawing.SystemColors.InactiveCaptionText;
                    this.CancelButton = this.buttonCancel;
                    this.ClientSize = new System.Drawing.Size(290, 208);
                    this.Controls.Add(this.labelSample);
                    this.Controls.Add(this.buttonCancel);
                    this.Controls.Add(this.buttonOK);
                    this.Controls.Add(this.labelBackground);
                    this.Controls.Add(this.labelForeground);
                    this.Controls.Add(this.colorPickerUserControlBack);
                    this.Controls.Add(this.colorPickerUserControlFore);
                    this.Controls.Add(this.labelHeader);
                    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedToolWindow;
                    this.MaximizeBox = false;
                    this.MinimizeBox = false;
                    this.Name = "ColorWizard";
                    this.ShowInTaskbar = false;
                    this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
                    this.Text = "Color Wizard";
                    this.ResumeLayout(false);
            
                }
            
                private void colorPickerUserControlFore_ColorChanged(object sender, ColorChangedEventArgs e)
                {
                    this.labelSample.ForeColor = e.Color;
                }
            
                private void colorPickerUserControlBack_ColorChanged(object sender, ColorChangedEventArgs e)
                {
                    this.labelSample.BackColor = e.Color;
                }
            
                public Color FontBackColor
                {
                    set
                    {
                        this.colorPickerUserControlBack.CurrentColor = value;
                        this.labelSample.BackColor = value;
                    }
                    get
                    {
                        return this.colorPickerUserControlBack.CurrentColor;
                    }
                }
            
                public Color FontForeColor
                {
                    set
                    {
                        this.colorPickerUserControlFore.CurrentColor = value;
                        this.labelSample.ForeColor = value;
                    }
                    get
                    {
                        return this.colorPickerUserControlFore.CurrentColor;
                    }
                }
            }
            }        
             </code>
             </example>
        </member>
        <member name="P:GuruComponents.Netrix.CssTextFormatting.BackColor">
            <summary>
            Sets the background of the current text selection to the given color.
            </summary>
            <remarks>
            This property cannot be 
            applied if no text is selected. 
            Any call to the set path will remove empty attributes, if the current element is a font element and
            the attribute is empty. If no more attributes left the font tag is removed.  
            <para>
            The intention if this property is NOT to change the font face of any font attribute which is valid in
            the parent hierarchy. This means, that only an active selection with one or more characters will
            encapsulated with the font tag. To get the current element just use <code>HtmlEditor.GetCurrentElement</code>
            or get the current element form HtmlElementChanged event. If the current element is the font
            element the style attribute <code>background-color</code> can be used.
            </para>
            <para>
            For an example see <see cref="P:GuruComponents.Netrix.HtmlTextFormatting.ForeColor">ForeColor</see> property.
            </para>
            <seealso cref="P:GuruComponents.Netrix.HtmlTextFormatting.ForeColor">ForeColor</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.CssTextFormatting.SetAlignment(GuruComponents.Netrix.Alignment)">
            <summary>
            Align the current block selection or current block.
            </summary>
            <remarks>Full alignment justifies the text.</remarks>
            <param name="alignment"></param>
        </member>
        <member name="M:GuruComponents.Netrix.CssTextFormatting.GetAlignment">
            <summary>
            Get the current Alignment of the paragraph where the caret resides.
            </summary>
            <returns>A value of the Alignment enumeration.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.NameCreationService">
            <summary>
            Creates new names for components that need a name.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.CommandService">
            <summary>
            Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.
            </summary>
            <remarks>
            Provides support for commands and verbs. Verbs are opposite to properties and does not have any value one can set but instead provide method invoking. Though, the methods being invoked cannot have parameters. An good example of usage is the TableDesigner plugin. It exposes some commands like "AddRow", "DeleteColumn", or "RemoveCell". These commands are related to the current object and context and does not need any parameters.
            The way commands appear to the user depends on the host's user interface. The PropertyGrid will show them as links the ould click on. Implementers often add the commands to the context menu or extend parts of the main menu dynamically. This way the menu can show only valuable commands available for the current selection.
            The interface calls also the ContextMenu (and <see cref="P:GuruComponents.Netrix.HtmlEditor.ContextMenuStrip">ContextMenuStrip</see>) event. It does not provide any information about the menu itself. The latter is part of the user interface and not of NetRix. However, it provides the element which causes the menu being shown and from the element's Site property we have access to the services and the IMenuCommandService allows us to get the appropriate verbs.
            Adding verbs is done on several ways:
            <list type="bullet">
            <item>Using default verbs, implemented by NetRix. These verbs are available for all elements.</item>
            <item>Add verbs globally by calling the interface's AddCommand method. These verbs are available for al elements.</item>
            <item>Add verbs from plugin. The plugin can decide to add verbs based on current element or globally.</item>
            <item>Add verbs using a designer. The element's designer (if one exists) can provide individual verbs for each object instance.</item>
            </list>
            As you can see, adding verbs can be very flexible. Commands can appear permanently and globally, per element type, or per element instance.
            Verbs have specific properties to manage the appearance. The appearance itself depends on the hosts capabilities. The PropertyGrid for instance does not support the Checked property, whereas a context menu could support this and show a check sign accordingly. The NetRix implementation tries to apply these properties:
            <list type="bullet">
            <item><c>Checked</c> *</item>
            <item><c>Enabled</c></item>
            <item><c>Visible</c></item>
            <item><c>Supported</c> *</item>
            </list>
            * = Not supported by PropertyGrid
            <para>
            The properties does control the UI only, setting a the Enabled property to false does not prevent an object from calling the Invoke method and invoking the command. It's up to the host to prevent unwanted access to commands.
            </para>
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.Designer.CommandService.Verbs">Verbs (property)</seealso>
            <seealso cref="T:GuruComponents.Netrix.Designer.DesignerHost">DesignerHost (class)</seealso>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates an instance of the MenuCommandService.
            </summary>
            <param name="editor">Reference to the editor this service belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
            <summary>
            Adds the specified standard menu command to the menu.
            </summary>
            <param name="command">The System.ComponentModel.Design.MenuCommand to add.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
            <summary>
            Removes the specified designer verb from the collection of global designer verbs.
            </summary>
            <param name="verb">The System.ComponentModel.Design.DesignerVerb to remove.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
            <summary>
            Removes the specified standard menu command from the menu.
            </summary>
            <param name="command">The System.ComponentModel.Design.MenuCommand to remove.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.FindCommand(System.ComponentModel.Design.CommandID)">
            <summary>
            Searches for the specified command ID and returns the menu command associated
            with it.
            </summary>
            <param name="commandID">The System.ComponentModel.Design.CommandID to search for.</param>
            <returns>The System.ComponentModel.Design.MenuCommand associated with the command
            ID, or <c>null</c> if no command is found.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
            <summary>
            Invokes a menu or designer verb command matching the specified command ID.
            </summary>
            <remarks>
            This is widely used by plug-ins to add commands to the base control.
            </remarks>
            <seealso cref="T:System.ComponentModel.Design.CommandID"/>
            <param name="commandID">The System.ComponentModel.Design.CommandID of the command to search for and execute.</param>
            <returns><c>True</c> if the command was found and invoked successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
            <summary>
            Shows the specified shortcut menu at the specified location.
            </summary>
            <remarks>
            Calling this method invokes the <see cref="E:GuruComponents.Netrix.Designer.CommandService.OnShowContextMenu"/> event.
            </remarks>
            <seealso cref="T:System.ComponentModel.Design.CommandID"/>
            <param name="menuID">The System.ComponentModel.Design.CommandID for the shortcut menu to show.</param>
            <param name="x">The x-coordinate at which to display the menu, in screen coordinates.</param>
            <param name="y">The y-coordinate at which to display the menu, in screen coordinates.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.CommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
            <summary>
            Adds the specified designer verb to the set of global designer verbs.
            </summary>
            <param name="verb">The System.ComponentModel.Design.DesignerVerb to add.</param>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.CommandService.Verbs">
            <summary>
            Default designer verb collection. 
            </summary>
            <remarks>
            By default only one verb is added to invoke the element delete command.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.CommandService.OnShowContextMenu">
            <summary>
            Fired when the command service recognizes a right click and is up to show the context menu.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.DesignerHost">
            <summary>
            DesignerHost creates the designer to add WebForms controls. 
            </summary>
            <remarks>
            The designer host is responsible for all designer related tasks and design time features. Design time in the sense
            of this control means running the NetRix control in its "Design Mode" (compared with "Browse Mode"). NetRix provides
            a fully implemented design time environment at host applications runtime. The interfaces implemented by this class
            as well as several others form this environment. Components such as PropertyGrid are being able to use this by calling
            services (classes exposed as services are available through the ServiceProvider) or using reflection to indicate
            features added as attributes.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.DesignerHost.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates a new instance of the designer that hosts all components.
            </summary>
            <param name="editor">Related NetRix editor control.</param>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.DesignerHost.Container">
            <summary>
            Exposes this as a container for components.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.DesignerHost.Item(System.String)">
            <summary>
            Return the component with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.DesignerHost.Remove(System.ComponentModel.IComponent)">
            <summary>
            Remove a component. Does not remove connected element from DOM.
            </summary>
            <remarks>To remove from DOM, use the <see cref="E:GuruComponents.Netrix.Designer.DesignerHost.ComponentRemoved"/> event and ElementNode operations in the event handler.</remarks>
            <param name="component"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.DesignerHost.Add(System.ComponentModel.IComponent,System.String)">
            <summary>
            Add a component. Used internally. Does not add anything to the document.
            </summary>
            <param name="component">The component</param>
            <param name="uniquename">The internal (HTML) name, MSHTML internally generates for the generic element. Such as 'ms_id3'.</param>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.Descriptor">
            <summary>
            Descriptor value which controls the literalcontent attribute for element behaviors.
            </summary>
            <remarks>
            Element behaviors attached via namespaces are a common way to render XML within the HTML document.
            To control the render behavior, the literalcontent attribute is used. In NetRix the
            <see cref="T:GuruComponents.Netrix.Designer.ElementDescriptorAttribute"/> attribute is used to control the behavior, and the descriptors
            replace the attribute accordingly. 
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.Designer.Descriptor.Default">
            <summary>
            Default behavior (literalcontent=false).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Designer.Descriptor.Literal">
            <summary>
            Literal behavior (content is treated as literal, and not rendered, literalcontent=true).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Designer.Descriptor.NestedLiteral">
            <summary>
            Nested behavior (content is nested literal element, literalcontent=nested).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.ElementDescriptorAttribute">
            <summary>
            Decorates an XML element type to control the render behavior.
            </summary>
            <remarks>
            Element behaviors attached via namespaces are a common way to render XML within the HTML document.
            To control the render behavior, the literalcontent attribute is used. In NetRix the
            <see cref="P:GuruComponents.Netrix.Designer.ElementDescriptorAttribute.Descriptor"/> attributenum is used to control the behavior, and the attribute decorates
            the XML element class.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDescriptorAttribute.#ctor(GuruComponents.Netrix.Designer.Descriptor)">
            <summary>
            Creates a new attribute instance with the given descriptor.
            </summary>
            <param name="d">Descriptor (Default is Descriptor.Default).</param>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.ElementDescriptorAttribute.Descriptor">
            <summary>
            Returns the descriptor, used internally by namespace manager.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.ElementDesigner">
            <summary>
            Default designer support class. 
            </summary>
            <remarks>
            Primarily, this class supports the elements infrastructur behavior. User can replace this class
            by adding the <see cref="T:System.ComponentModel.DesignerAttribute"/> to element derived from <see cref="P:GuruComponents.Netrix.Designer.ElementDesigner.Element"/> as well other inheritable classes,
            which derive from <see cref="P:GuruComponents.Netrix.Designer.ElementDesigner.Element"/>. 
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            <seealso cref="P:GuruComponents.Netrix.Designer.ElementDesigner.Element"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.ElementDesigner.Element">
            <summary>
            The element which is currently assigned to this designer.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.OnSetComponentDefaults">
            <summary>
            Just override to avoid null ref exception in case of UI calls (like PropertyGrid).
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Called by internal designer host to initialize the designer.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the default event attribute is being used, but the exposed event did not exists.</exception>
            <param name="component"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.DoDefaultAction">
            <summary>
            The default action for the component.
            </summary>
            <remarks>
            The default event on an element causes this method to be called. Override this method to change the default
            behavior. In an application which behaves like Visual Studio a double click might open the code editor
            and add a event handler for the default event of the element. 
            <para>
            The abstract base class, <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element">Element</see> defines the 
            attribute <see cref="T:System.ComponentModel.DefaultEventAttribute"/> with the value "Click". This makes the click event the default
            event for any element. If one writes a new element class, which derives from <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element">Element</see>
            or which implements <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</see>, the attribute could
            be overwritten with each other handler name.
            </para>
            <para>
            To fully implement this behavior one must:
            <list type="bullet">
                <item>1. Add the DefaultEventAttribute to the component's class.</item>
                <item>2. Override the DoDefaultAction method to receive the event at design time.</item>
            </list>
            At design time, the user may issue the event by some action. Then the event manager receives the event and calles
            the attached handler, which in turn calles DoDefaultAction. 
            </para>
            <para>
            <b>Important Note to implementors:</b> Some events, like MouseMove, PropertyChange, or Resize are called very 
            frequently and using these event in the scenario described above could slow the performance drastically. It's strongly
            recommended to use only events which have slow performance impact (so called single event actions). This is the case
            for events like Click, ResizeStart, ResizeEnd, MoveStart, MoveEnd, DblClick, MouseUp, MouseDown. It could be critical
            for key events and several mixed events, like those for drag 'n drop, for editing (cut/copy/paste) and selection.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Allows adding properties to the properties which show up in the PropertyGrid.
            </summary>
            <remarks>
            Allows a designer to add to the set of properties that it exposes through
             a <see cref="T:System.ComponentModel.TypeDescriptor"/>.
            </remarks>
            <param name="properties">List of properties defined by the component.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            Allows change or modify properties to the properties which show up in the PropertyGrid.
            </summary>
            <remarks>
            Allows a designer to change or modify to the set of properties that it exposes through
             a <see cref="T:System.ComponentModel.TypeDescriptor"/>.
            </remarks>
            <param name="properties">List of properties defined by the component.</param>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.ElementDesigner.ParentComponent">
            <summary>
            Gets the parent element in the element's hierarchy.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.ElementDesigner.AssociatedComponents">
            <summary>
            Gets the children of the element in the element's hierarchy.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.ElementDesigner.Verbs">
            <summary>
            This property provides commands.
            </summary>
            <remarks>
            Command apperar in PropertyGrid's command area or a IMenuCommandService driven context menu, if the
            host makes use of the designer host. Inheritors should override this property and either add commands
            or replace the existing command.
            </remarks>
            <example>
            The following example shows how to create new commands:
            <code>
            <![CDATA[
            DesignerVerbCollection verbs = new DesignerVerbCollection();
            verbs.Add(new DesignerVerb("This Name appears in the menu", OnAction));
            ]]>
            </code>
            <c>OnAction</c> is a default event handler (<see cref="T:System.EventHandler"/>). To access the component which
            later issues the command one can get the <see cref="P:GuruComponents.Netrix.Designer.ElementDesigner.Element"/>.
            </example>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.OnPreHandleEvent(System.Object,GuruComponents.Netrix.Events.DocumentEventArgs)">
            <summary>
            Called from event chain before any internal processing.
            </summary>
            <remarks>
            Inheritors may implement here private behavior to change the default event handling.
            Returning <c>True</c> will cause the internal chain to stop event processing.
            </remarks>
            <param name="sender">The EditHost which received and re-fired the event.</param>
            <param name="e">Information about the event.</param>
            <returns>Return <c>true</c> to inform the caller that any default handling has to be suppressed. Default is <c>false</c>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.OnPostHandleEvent(System.Object,GuruComponents.Netrix.Events.DocumentEventArgs)">
            <summary>
            Called from event chain after default internal processing.
            </summary>
            <remarks>
            Inheritors may implement here private behavior to change the default event handling.
            Returning <c>True</c> will cause the internal chain to stop event processing.
            </remarks>
            <param name="sender">The EditHost which received and re-fired the event.</param>
            <param name="e">Information about the event.</param>
            <returns>Return <c>true</c> to inform the caller that any default handling has to be suppressed. Default is <c>false</c>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.ElementDesigner.OnPostEditorNotify(System.Object,GuruComponents.Netrix.Events.DocumentEventArgs)">
            <summary>
            Called from event chain before any internal and external processing.
            </summary>
            <remarks>
            This is to inform the designer that any internal processing is done. The purpose is to check the results of any
            previous action or refresh the state of an object after finishing the event chain.
            </remarks>
            <param name="sender">The EditHost which received and re-fired the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.EventBindingService">
            <summary>
            This class controls the access to events if shown in the PropertyGrid.
            </summary>
            <remarks>
            For simplified access use <see cref="T:GuruComponents.Netrix.Events.EventBinding">EventBinding</see> instead.
            This class is available through the <see cref="P:GuruComponents.Netrix.HtmlEditor.EventBinding">EventBinding</see>
            property, implemented by the base class.
            <para>
            
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.EventBindingService.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates a new instance of the EventBindingService.
            </summary>
            <remarks>
            This ctor supports the designer's infrastructure and should called externally.
            </remarks>
            <param name="editor">The Editor instance this class is related to.</param>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.EventBindingService.EventDisplay">
            <summary>
            Controls which events has to be displayed.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventBindingService.ShowCodeRequest">
            <summary>
            Fired when the host UI requests showing the code of the event handler.
            </summary>
            <remarks>
            In the PropertyGrid then a double click into the event handlers name text field or hitting the enter key
            invokes this event.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventBindingService.CreateUniqueNameRequest">
            <summary>
            Fired when the host requests a unique name for the event handler of the current event.
            </summary>
            <remarks>
            In the PropertyGrid then a double click into the event handlers name text field or hitting the enter key
            invokes this event. In case the field was empty this event could be used to get the right handler name.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventBindingService.GetCompatibleMethodsRequest">
            <summary>
            Fired when the host needs a list of comaptible methods.
            </summary>
            <remarks>
            This is event is fired if the PropertyGrid is used and the user opens the drop down list for the list
            of available event handlers.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventBindingService.EventSetValueRequest">
            <summary>
            Fired if the host needs to set the value of a specific event handler, e.g. the currently specified name.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventBindingService.EventGetValueRequest">
            <summary>
            Fired if the host needs to get the value of a specific event handler, e.g. the currently specified name.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventBindingService.EventResetValueRequest">
            <summary>
            Fired if the host needs the remove value of a specific event handler.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.EventPropertyDescriptor">
            <summary>
            Zusammenfassung für EventPropertyDescriptor.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventPropertyDescriptor.SetValueRequest">
            <summary>
            Requests a value set.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventPropertyDescriptor.GetValueRequest">
            <summary>
            Requests a value get.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.EventPropertyDescriptor.ResetValueRequest">
            <summary>
            Requests a value reset.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.EventTypeConverter">
            <summary>
            Handle display of events in PropertyGrid.
            </summary>
            <remarks>
            We handle events as strings, which means we handle the names of the handlers in code here.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.EventTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Allows a dropdown list for event handlers.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.EventTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Allows not only values from dropdown list but also entering a string directly.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.EventTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Get the values to form the list by calling the <c>IEventBindingService</c> service
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.EventTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Optionally validates the names (Currently not implemented, always returns <c>true</c>).
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.NamespaceManager">
            <summary>
            The purpose of this class is the management of namespaces.
            </summary>
            <remarks>
            Any element containing a namespace alias, like &lt;asp:button&gt; can have its own designer behavior.
            The namespace manager is called if this kind of element occurs and is supposed to attach a designer to 
            that element. Once the designer is attached, the renderer usese the designer to request the design time
            behavior. For applicable designers, various plug-ins are attachable.
            <seealso cref="T:GuruComponents.Netrix.Designer.IDesignTimeBehavior"/>
            <seealso cref="T:GuruComponents.Netrix.Designer.CommandWrapper"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.NamespaceManager.AliasList">
            <summary>
            Returns a list of registered namespace aliases.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.NamespaceManager.NamespaceList">
            <summary>
            Returns a list of registered namespaces.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Designer.NamespaceManager.RegisteredNamespaces">
            <summary>
            Returns the list of registered namespaces as dictionary with alias:ns pairs.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.NamespaceManager.RegisterNamespace(System.String,System.String)">
            <summary>
            Registers a namespace 
            </summary>
            <param name="alias"></param>
            <param name="namespaceName"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.NamespaceManager.RegisterNamespace(System.String,System.String,System.Type)">
            <summary>
            Registers a namespace and the callback class which is responsible for the painting of all
            elements that are associated with the namespace.
            </summary>
            <remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Behaviors.IBaseBehavior"/>
            </remarks>
            <param name="alias">Alias for namespace, like "asp" for ASP.NET objects.</param>
            <param name="namespaceName">URN of namespace, it's allowed to set to empty string if not required.</param>
            <param name="behavior">Callback object of type IBaseBehavior and any derived class, which has the right painting methods.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.NamespaceManager.IsRenderable(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            We're looking recursively for the latest instance of the element, to get the one we really need to render.
            To achieve this, we're rendering when either the parent is a custom tag too or the body has been reached.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.NamespaceManager.GuruComponents#Netrix#ComInterop#Interop#IElementBehaviorFactory#FindBehavior(System.String,System.String,GuruComponents.Netrix.ComInterop.Interop.IElementBehaviorSite)">
            <summary>
            this version supports global (per namespace) designers only, for &lt;asp:hyperlink> it is "asp" bstrBehavior contains the 
            element name, for &lt;asp:hyperlink> it is "hyperlink".
            </summary>
            <param name="bstrBehavior"></param>
            <param name="bstrBehaviorUrl"></param>
            <param name="pSite"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.PropertyValueUIService">
            <summary>
            Provides an interface to manage the images, ToolTips, and event handlers for the properties of a component displayed in a property browser.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PropertyValueUIService.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Default ctor creating an instance of the service.
            </summary>
            <param name="editor"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PropertyValueUIService.AddPropertyValueUIHandler(System.Drawing.Design.PropertyValueUIHandler)">
            <summary>
            The method or operation is not implemented.
            </summary>
            <param name="newHandler"></param>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PropertyValueUIService.GetPropertyUIValueItems(System.ComponentModel.ITypeDescriptorContext,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Provides information about a property displayed in the Properties window, including the associated event handler, pop-up information string, and the icon to display for the property. 
            </summary>
            <param name="context"></param>
            <param name="propDesc"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PropertyValueUIService.NotifyPropertyValueUIItemsChanged">
            <summary>
            The method or operation is not implemented.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Designer.PropertyValueUIService.PropertyUIValueItemsChanged">
            <summary>
            Fired when a value item is being changed. Currently not used.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Designer.PropertyValueUIService.RemovePropertyValueUIHandler(System.Drawing.Design.PropertyValueUIHandler)">
            <summary>
            The method or operation is not implemented.
            </summary>
            <param name="newHandler"></param>
        </member>
        <member name="T:GuruComponents.Netrix.Designer.UIService">
            <summary>
            UIService.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.DragDrop.DropInfo">
            <summary>
            Exposes information about drag 'n drop procedure for better control.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.DragDrop.DropInfo.Converter">
            <summary>
            
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.DragDrop.DropInfo.ConverterInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverter">
            <summary>
            This class converts data for dragged objects.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverter.CanConvertToHtml(System.Windows.Forms.DataObject)">
            <summary>
            Checks out if we can convert the dropsource into HTML.
            </summary>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverter.ConvertToHtml(System.Windows.Forms.DataObject,System.Boolean,System.Drawing.Point,System.Windows.Forms.DataObject@)">
            <summary>
            Determines a dropped data source and build HTML strings that can be inserted into the document.
            </summary>
            <param name="originalDataObject"></param>
            <param name="IsInAbsolutePositionMode"></param>
            <param name="absolutePosition"></param>
            <param name="newDataObject"></param>
            <returns>Returns <c>false</c> if the convertion fails.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverterInfo">
            <summary>
            The kind of drag conversion detected at drag enter event. Only CanConvert is handled
            internally, otherwise the Drop event will fired and the ConvertInfo will provided together
            with the dragged data.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverterInfo.Disabled">
            <summary>
            Drag drop disabled
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverterInfo.CanConvert">
            <summary>
            Drag content determined as HTML ans dropping is possible
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverterInfo.Unhandled">
            <summary>
            Dropping possible but not handled by NetRix, may be, MSHTML is handle this internally.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverterInfo.Externally">
            <summary>
            FileDrop from operating system. Not handled but events are fired to handle this in the
            host application.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverterInfo.Text">
            <summary>
            Text, HTML
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DataObjectConverterInfo.Native">
            <summary>
            Expects an object of type IElement
            </summary> 
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands">
            <summary>
            All possible commands that can be send as drop event data.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.DefaultNot">
            <summary>
            Presents the move icon if action is not allowed.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.DefaultMove">
            <summary>
            Presents the move icon if no element was detected and Move operation is running.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.DefaultCopy">
            <summary>
            Presents the copy icon if no element was detected and Copy operation is running.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Anchor">
            <summary>
            The attached data represents an anchor.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Break">
            <summary>
            The attached data represents a break.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Button">
            <summary>
            The attached data represents a button.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Div">
            <summary>
            The attached data represents a div element.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Form">
            <summary>
            The attached data represents a form element.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.HorizontalRule">
            <summary>
            The attached data represents a horizontal rule.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Textbox">
            <summary>
            The attached data represents a textbox.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.TextArea">
            <summary>
            The attached data represents a textarea.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Checkbox">
            <summary>
            The attached data represents a checkbox.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.RadioButton">
            <summary>
            The attached data represents a radiobutton.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.ImageButton">
            <summary>
            The attached data represents an image button.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.FileButton">
            <summary>
            The attached data represents a file button.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Password">
            <summary>
            The attached data represents a password field.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.ResetButton">
            <summary>
            The attached data represents a reset button.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.SubmitButton">
            <summary>
            The attached data represents a submit button.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.ListBox">
            <summary>
            The attached data represents a listbox.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.DropDown">
            <summary>
            The attached data represents a dropdown field.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Paragraph">
            <summary>
            The attached data represents a paragraph tag.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Image">
            <summary>
            The attached data represents an image tag.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Table">
            <summary>
            The attached data represents a table.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.HiddenField">
            <summary>
            The attached data represents a hidden field.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands.Span">
            <summary>
            The attached data represents a Span tag.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.DragDrop.DropTarget">
            <summary>
            Handles incoming drop events. Caller should prepare objects to insert elements, otherwise text
            will inserted as plain ascii into HTML.
            </summary>
            <remarks>
            Rev II: JK
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.EventSink">
            <summary>
            The purpose of this class is to deal with the events a control will
            fire at design time.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.EventSink.HtmlEvents.GetSafeReturn">
            <summary>
            This method checks whether the element has been disposed during the call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.EventSink.HTMLSpecialEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.EventSink.Connect">
            <summary>
            Connects the specified control and its underlying element to the event sink.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.AsideElement">
            <summary>
            This class represents the &lt;aside&gt; element.
            </summary>
            <remarks>
            <para>
            The tag specifies some content aside from the content it is placed in. The aside content should be related to the surrounding content.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AsideElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.AsideElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.ArticleElement">
             <summary>
             This class represents the &lt;article&gt; element.
             </summary>
             <remarks>
             <para>
             This element indicates an article. The tag specifies independent, self-contained content.
             An article should make sense on its own and it should be possible to distribute it independently from the rest of the site.
            
            Examples of possible articles:
            <list type="bullet">
            <term>forum post</term>
            <term>newspaper article</term>
            <term>blog entry</term>
            <term>user comment</term>
            </list>
             </para>
             Classes directly or indirectly inherited from 
             <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
             directly by the host application. Use the various insertion or creation methods in the base classes
             instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
             and can be casted into the element just created.
             <para>
             Examples of how to create and modify elements with the native element classes can be found in the 
             description of other element classes.
             </para>
             </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.ArticleElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.ArticleElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement">
             <summary>
             This class represents the &lt;article&gt; element.
             </summary>
             <remarks>
             <para>
             This element indicates an article. The tag specifies independent, self-contained content.
             An article should make sense on its own and it should be possible to distribute it independently from the rest of the site.
            
            Examples of possible articles:
            <list type="bullet">
            <term>forum post</term>
            <term>newspaper article</term>
            <term>blog entry</term>
            <term>user comment</term>
            </list>
             </para>
             Classes directly or indirectly inherited from 
             <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
             directly by the host application. Use the various insertion or creation methods in the base classes
             instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
             and can be casted into the element just created.
             <para>
             Examples of how to create and modify elements with the native element classes can be found in the 
             description of other element classes.
             </para>
             </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement._sources">
            <summary>
            This field stores the option elements which are part of the select box.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.Options">
            <summary>
            Gets a collection of SOURCE elements. Optional.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.src">
            <summary>
            SRC tells where to get the audio source that should be put on the page.
            </summary>
            <remarks>
            SRC is the one required attribute. It is recommended to use relative paths. If a filename is given the property will recognize and set
            the relative path automatically.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.controls">
            <summary>
            Specifies that playback controls should be displayed.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.loop">
            <summary>
            Specifies that the audio should start over again, when it is finished.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.autoplay">
            <summary>
            Specifies that the audio should start playing as soon as it is ready
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.preload">
            <summary>
            Specifies whether or not the audio should be loaded when the page loads.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement.#ctor(System.String,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Supports VIDEO inheritance only.
            </summary>
            <param name="tagname"></param>
            <param name="editor"></param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.CanvasElement">
            <summary>
            The canvas tag is used to display graphics.
            </summary>
            <remarks>
            <para>
            The &lt;canvas&gt; tag is only a container for graphics, you must use a script to actually paint graphics. 
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CanvasElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CanvasElement.height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CanvasElement.width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.CanvasElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement">
            <summary>
            This class represents the &lt;command&gt; element. (HTML 5)
            </summary>
            <remarks>
            <para>
            The command tag defines a command button, like a radiobutton, a checkbox, or a button.
            The command element is only visible if it is inside a menu element. If not, it will not be displayed, but can be used to specify a keyboard shortcut.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.checked">
            <summary>
            Defines if the command is checked or not. Use only if type is radio or checkbox.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.disabled">
            <summary>
            Defines if the command is available or not.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.icon">
            <summary>
            Defines the url of an image to display as the command.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.label">
            <summary>
            Defines a name for the command. The label is visible.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.radiogroup">
            <summary>
            Defines the name of the radiogroup this command belongs to. Use only if type is radio.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.type">
            <summary>
            Defines the type of command. Default value is command.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandType">
            <summary>
            Defines the type of command. Default value is Command. (HTML 5)
            </summary>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.Html5.CommandElement"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.EmbedElement.src">
            <summary>
            SRC tells where to get the picture that should be put on the page.
            </summary>
            <remarks>
            SRC is the one required attribute. It is recommended to use relative paths. If a filename is given the property will recognize and set
            the relative path automatically.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.EmbedElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.FigCaptionElement">
            <summary>
            This class represents the &lt;figcation&gt; element.
            </summary>
            <remarks>
            <para>
            The figcaption tag contains a caption for the figure tag.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;figure&gt;
              &lt;figcaption&gt;A view of the Brocken rock in Germany&lt;/figcaption&gt;
              &lt;img src="img_brocken.jpg" width="304" height="228" /&gt;
            &lt;/figure&gt;
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.FigCaptionElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.FigCaptionElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.FigureElement">
            <summary>
            This class represents the &lt;figure&gt; element.
            </summary>
            <remarks>
            <para>
            The figure tag specifies self-contained flow content (like images, diagrams, photos, code, etc).
            The content of the figure element should be relevant to the main content, but if removed it should 
            not affect the flow of the document.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;figure&gt;
              &lt;figcaption&gt;A view of the Brocken rock in Germany&lt;/figcaption&gt;
              &lt;img src="img_brocken.jpg" width="304" height="228" /&gt;
            &lt;/figure&gt;
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.FigureElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.FigureElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.FooterElement">
            <summary>
            The footer element defines a footer area.
            </summary>
            <remarks>
            A footer is a semantic HTML 5 element.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.FooterElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.FooterElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified header element.
            </summary>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.HeaderElement">
            <summary>
            This class represents the &lt;header&gt; element.
            </summary>
            <remarks>
            <para>
            The header tag specifies an introduction, or a group of navigation elements for the document.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;header&gt;
            &lt;h1&gt;Welcome to my homepage&lt;/h1&gt;
            &lt;p&gt;My name is Donald Duck&lt;/p&gt;
            &lt;/header&gt; 
            
            &lt;p&gt;The rest of my home page...&lt;/p&gt;
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.HeaderElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.HeaderElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.HGroupElement">
            <summary>
            This class represents the &lt;hgroup&gt; element.
            </summary>
            <remarks>
            <para>
            The hgroup tag specifies the heading of a section or a document.
            The hgroup element is used to group headers, &lt;h1&gt; to &lt;h6&gt;, where the largest is the main heading of 
            the section, and the others are sub-headings.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;hgroup&gt;
            &lt;h1&gt;Welcome to my homepage&lt;/h1&gt;
            &lt;h2&gt;My name is Donald Duck&lt;/h2&gt;
            &lt;/hgroup&gt; 
            
            &lt;p&gt;The rest of my home page...&lt;/p&gt;
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.HGroupElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.HGroupElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.Html5Base.spellcheck">
            <summary>
            Specifies if the element must have its spelling and grammar checked
            </summary>
            <remarks>
            This attribute does not has any internal meaning. It's just to support the creation of valid HTML 5 content.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.Html5Base.hidden">
            <summary>
            Specifies that the element is not relevant. 
            </summary>
            <remarks>
            Hidden elements are not displayed.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.MarkElement">
            <summary>
            This class represents the &lt;mark&gt; element.
            </summary>
            <remarks>
            <para>
            The mark tag defines marked text.
            Use the mark tag if you want to highlight parts of your text.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;p>Do not forget to buy &lt;mark>milk&lt;/mark> today.&lt;/p>
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.MarkElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.MarkElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.NavElement">
            <summary>
            This class represents the &lt;nav&gt; element.
            </summary>
            <remarks>
            <para>
            The nav tag defines a section of navigation links. If you have "previous" and "next" buttons in your document, they should be placed inside the nav element.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;nav>
            &lt;a href="default.asp">Home&lt;/a>
            &lt;a href="tag_meter.asp">Previous&lt;/a>
            &lt;a href="tag_noscript.asp">Next&lt;/a>
            &lt;/nav>
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.NavElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.NavElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.SectionElement">
            <summary>
            This class represents the &lt;section&gt; element.
            </summary>
            <remarks>
            <para>
            The section tag defines sections in a document. Such as chapters, headers, footers, or any other sections of the document.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;section>
              &lt;h1>WWF&lt;/h1>
              &lt;p>The World Wildlife Foundation was born in 1961...&lt;/p>
            &lt;/section>
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.SectionElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.SectionElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElement">
            <summary>
            This class represents the &lt;source&gt; element. (HTML 5)
            </summary>
            <remarks>
            <para>
            The SOURCE tag defines media resources for media elements, such as VIDEO and AUDIO.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            <example>
            &lt;audio controls="controls">
              &lt;source src="song.ogg" type="audio/ogg" />
              &lt;source src="song.mp3" type="audio/mpeg" />
            Your browser does not support the audio element.
            &lt;/audio>
            </example>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.Html5.AudioElement"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElement.src">
            <summary>
            The URL of the media.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElement.type">
            <summary>
            The TYPE attribute of SOURCE specifies the media type.
            </summary>
            <remarks>
            Specifies the MIME type of the media resource.
            The TYPE attribute of SOURCE specifies the media type of the scripting language, e.g., audio/mp3.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElementsCollection">
            <summary>
            Stores a collection of SOURCE elements. (HTML 5)
            </summary>
            <remarks>
            This class stores SOURCE elements in any combination for AUDIO and VIDEO elements.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElementsCollection.SourceElementType">
            <summary>
            Provide one possible type to the propertygrid's collection editor to help them building elements
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElementsCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Html5.SourceElementsCollection.OnClearHandler">
            <summary>
            Fired if the collection editor starts a new sequence.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.TimeElement">
            <summary>
            This class represents the &lt;time&gt; element. (HTML 5)
            </summary>
            <remarks>
            <para>
            The TIME tag defines a time or a date, or both.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.TimeElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.TimeElement.datetime">
            <summary>
            Specifies the date or time for the time element. This attribute is used if no date or time is specified in the element's content.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.TimeElement.pubdate">
            <summary>
            Specifies that date and time in the time element is the publication date and time of of the document, or the nearest ancestor article element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.TimeElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Html5.VideoElement">
            <summary>
            This class represents the &lt;video&gt; element.
            </summary>
            <remarks>
            <para>
            The VIDEO tag specifies video, such as a movie clip or other video streams.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.VideoElement.width">
            <summary>
            Sets the width of the video player.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Html5.VideoElement.height">
            <summary>
            Sets the height of the video player.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Html5.VideoElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AbbreviationElement">
            <summary>
            This class represents the &lt;abbr&gt; element.
            </summary>
            <remarks>
            <para>
            This element indicates an abbreviation.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AbbreviationElement.title">
            <summary>
            In some browsers the title attribute can be used to show the full version of the expression 
            when you are holding the mouse over the abbreviation.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AbbreviationElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AcronymElement">
            <summary>
            This class represents the &lt;acronym&gt; element.
            </summary>
            <remarks>
            <para>
            This element indicates an acronym (e.g., WAC, radar, etc.).
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AcronymElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AddressElement">
            <summary>
            This class represents the &lt;address&gt; element.    
            </summary>
            <remarks>
            <para>
            The &lt;address&gt; element may be used by authors to supply contact information for a document or a major part of a 
            document such as a form. This element often appears at the beginning or end of a document.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AddressElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AnchorElement">
            <summary>
            This class represents the &lt;a&gt; element.
            </summary>
            <remarks>
            <para>
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
            <example>
            The following code will set up double click event handlers for all anchor tags in the document:
            <code>
            ArrayList anchors = this.HtmlEditor.DocumentStructure.GetElementCollection("A") as ArrayList;
            if (anchors != null)
            {
              foreach (AnchorElement a in anchors)
              {
                a.OnDblClick += new GuruComponents.NetrixEvents.DocumentEventHandler(a_OnDblClick);
              }
            }
            </code>
            Remember, that this is a one-time action. If the user removes an anchor and inserts another one later, the event 
            handler will no longer be active. You can control this by adding the event handler after creating a new element; 
            the following code inserts a new hyperlink, using the current selection as viewable content and presets to properties. 
            Then the double click event will be tied with the event handler.
            <code>
            AnchorElement a = (AnchorElement) this.HtmlEditor.Document.InsertHyperlink();
            a.href = "http://www.comzept.de";
            a.target = "_blank";
            a.OnDblClick += new GuruComponents.NetrixEvents.DocumentEventHandler(a_OnDblClick);
            </code>
            The handler should be the same as in the previous example. The DEMO application uses the following code:
            <code>
            private void a_OnDblClick(GuruComponents.NetrixEvents.DocumentEventArgs e)
            {
              if (HyperlinkWizardDlg.ShowDialog() == DialogResult.OK)
              {
                AnchorElement a = (AnchorElement) e.SrcElement;
                a.href = String.Concat(HyperlinkWizardDlg.Protocol,"//",HyperlinkWizardDlg.Url);
                a.target = HyperlinkWizardDlg.Target;
              }
            }
            </code>
            HyperlinkWizardDlg is the dialog, which appears, if the user double clicks an anchor to change the behavior in a more user friendly and individual way than the PropertyGrid.
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AnchorElement.href">
            <summary>
            HREF indicates the URL being linked to.
            </summary>
            <remarks>HREF makes the anchor into a link.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AnchorElement.name">
            <summary>
            NAME gives the anchor a name.
            </summary>
            <remarks>Other links target the anchor using that name. This allows you to link to specific places within the page.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AnchorElement.target">
            <!-- Für folgende Include-Kennung wurden keine übereinstimmenden Elemente gefunden. --><include file="DocumentorIncludes.xml" path="WebEditing/Elements[@name=&quot;TargetAttribute&quot;]" />
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AnchorElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AppletElement">
            <summary>
            This class represents the &lt;applet&gt; element.
            </summary>
            <remarks>
            <para>
            APPLET is deprecated (with all its attributes) in favor of OBJECT. See <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ObjectElement"/>
            for more information.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AppletElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">
             <summary>
             This class represents an AREA element.
             </summary>
             <remarks>
             &lt;AREA ...&gt; defines a single area within an image map. &lt;AREA ...&gt; requires the SHAPE and ALT attributes. 
             In most cases also requires the HREF attribute to indicate the page the area points to.
             <para>
             A typical AREA section should look like this:
             </para>
             <code>
            &lt;DIV ALIGN=CENTER>
            &lt;MAP NAME="map1">
            &lt;AREA 
            HREF="contacts.html" ALT="Contacts" TITLE="Contacts"
            SHAPE=RECT COORDS="6,116,  97,184">
            &lt;AREA 
            HREF="products.html" ALT="Products" TITLE="Products"
            SHAPE=CIRCLE COORDS="251,143,  47">
            &lt;AREA 
            HREF="new.html" ALT="New!" TITLE="New!"
            SHAPE=POLY COORDS="150,217, 190,257,  150,297,  110,257">
            &lt;AREA HREF="default.html" SHAPE=DEFAULT>
            &lt;/MAP>
            &lt;IMG SRC="testmap.gif" 
            ALT="map of GH site" BORDER=0 WIDTH=300 HEIGHT=300
            USEMAP="#map1">
            &lt;/DIV>
             </code>
             </remarks>
             <example>
             To create a new AREA element one can use the default constructor of this class 
             </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AreaElement.href">
            <summary>
            HREF indicates the URL being linked to.
            </summary>
            <remarks>HREF makes the anchor into a link.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AreaElement.nohref">
            <summary>
            Indicates that this area is not a link.
            </summary>
            <remarks>
            NOHREF indicates that the AREA is not a link. Of course, NOHREF doesn't make much sense unless the area 
            is in a map that uses &lt;AREA SHAPE=DEFAULT&gt; or the area overlies another area that does have an HREF. 
            For example, suppose we wanted an image map in which a circle in the map is a link, but a smaller circle inside 
            the link circle is not a link. We could accomplish that by first putting the tag for the inner area 
            (earlier &lt;AREA ...> tags overlay later &lt;AREA ...> tags), and using the NOHREF atribute, then putting 
            the tag for the outer &lt;AREA ...>: 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AreaElement.alt">
            <summary>
            Use as alt="text" attribute.
            </summary>
            <remarks>
            For user agents that cannot display images, forms, or applets, this 
            attribute specifies alternate text. The language of the alternate text is specified by the lang attribute. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AreaElement.coords">
            <summary>
            Coordinates for the link area shape.
            </summary>
            <remarks>
            COORDS indicates whare the shape is located in the image map. COORDS is necessary if you set SHAPE to RECT, CIRCLE, 
            or POLY. COORDS is not required if you set SHAPE to DEFAULT. 
            <para>Coordinates are always entered as a comma delimited string of numbers. That is, the stirng consists of 
            a number, then a comma, then another number, then a comma, etc. Don’t put a comma after the last number. 
            The exact meaning of those list of numbers is different for each shape, so see the descriptions of the 
            values for the SHAPE attribute for details.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AreaElement.shape">
            <summary>
            The shap which creates the sensitive area.
            </summary>                                
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaShape"/> for more details.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AreaElement.tabIndex">
            <summary>
            Gets or set the TAB index.
            </summary>
            <remarks>
            If the user hits the TAB key the focus moves from block element to block element, beginning with the first element on a page.
            To change the default TAB chain the tabIndex can be set to any numeric (integer) value which force the order of the TAB key.
            The value must be greater or equal than 0 (zero).
            <para>
            To remove the attribute set the value to 0 (zero).
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AreaElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AreaElementsCollection">
            <summary>
            Stores a collection of area definitions as subsequent part of the map element.
            </summary>
            <remarks>
            Areas define hotspots in image maps. See <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</see>
            for more information about the elements this collection is build from.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.MapElement">MapElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AreaElementsCollection.Add(GuruComponents.Netrix.WebEditing.Elements.AreaElement)">
            <summary>
            Adds the given element to the collection.
            </summary>
            <remarks>
            To create an area element use the default constructor of the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</see> class.
            This constructor creates the element and adds it to the document, but the element is still not part
            of the DOM. To make it usable it must be inserted into the AREA collection of an existing MAP element.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.MapElement">MapElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</seealso>
            </remarks>
            <param name="o">The element which should be added to the collection.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AreaElementsCollection.Contains(GuruComponents.Netrix.WebEditing.Elements.AreaElement)">
            <summary>
            Checks if the MAP contains the AREA tag.
            </summary>
            <remarks>
            This method is used from withing the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</see> class.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.MapElement">MapElement</seealso>
            </remarks>
            <param name="o">The AREA object which should be checked.</param>
            <returns>Returns <c>true</c> if the element exists.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.AreaElementsCollection.Remove(GuruComponents.Netrix.WebEditing.Elements.AreaElement)">
            <summary>
            Removes the AREA tag from the MAP.
            </summary>
            <remarks>
            This method is used from withing the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</see> class.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.MapElement">MapElement</seealso>
            </remarks>
            <param name="o">The AREA object which should be removed.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.AreaElementsCollection.Item(System.Int32)">
            <summary>
            Gets or sets an AREA element at the specified index in the MAP.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.AreaElementsCollection.OnClearHandler">
            <summary>
            Fired if the collection is cleared.
            </summary>
            <remarks>
            THIS EVENT SUPPORTS THE NETRIX UI INFRASTRUCTURE AND SHOULD NOT BE USED FROM USER CODE.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.AreaElementsCollection.OnInsertHandler">
            <summary>
            Fired if a new element is added to the collection.
            </summary>
            <remarks>
            THIS EVENT SUPPORTS THE NETRIX UI INFRASTRUCTURE AND SHOULD NOT BE USED FROM USER CODE.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.AreaShape">
            <summary>
            Defines possible shapes for Area elements.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.AreaShape.Default">
            <summary>
            No explicit definition for the shape. Applies to the whole image.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.AreaShape.Rect">
            <summary>
            The shape is a rectangle.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.AreaShape.Circle">
            <summary>
            The shape is a circle.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.AreaShape.Poly">
            <summary>
            The shape is a polygon.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BackgroundPropertyType">
            <summary>
            Defines the behavior of the background of the document.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.BackgroundPropertyType.Scroll">
            <summary>
            The background scrolls with the document (Default, recommended).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.BackgroundPropertyType.Fixed">
            <summary>
            The background is fixed and the text scrolls over the background.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.BackgroundPropertyType.None">
            <summary>
            Remove Attribute (used internally for the property support).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BdoElement">
            <summary>
            BDO overrides the current direction information.
            </summary>
            <remarks>
            The BDO element is a directional override feature needed to deal with unusual pieces of text in which 
            directionality cannot be resolved from context in an unambiguous fashion. It requires the DIR attribute. 
            The meaning of DIR is different on BDO than on inline text markup elements. For BDO the DIR attribute is a 
            bidi override, forcing the directionnality of even those characters that have strong directionnality. On 
            inline elements, DIR indicates a new directional embedding level, affecting mostly the neutrals and the overall layout.
            <para>
            To insert BDO elements just use 
            <see cref="M:GuruComponents.Netrix.HtmlDocument.InsertBidirectionalOverride">InsertBidirectionalOverride</see>.
            </para>
            <para>
            Another way to deal woth text direction features is the usage of the direct formatting features, which applies
            to text selection or - in case of of paragraphs - whole paragraphs. For more information about this
            topic see <see cref="M:GuruComponents.Netrix.HtmlTextFormatting.DirectionRtlBlock(System.Boolean)">DirectionRtlBlock</see>, 
            <see cref="M:GuruComponents.Netrix.HtmlTextFormatting.DirectionRtlInline(System.Boolean)">DirectionRtlInline</see>, and
            <see cref="M:GuruComponents.Netrix.HtmlTextFormatting.DirectionRtlDocument(System.Boolean)">DirectionRtlDocument</see>. The BDO
            element is used to format inline only.
            </para>
            <seealso cref="M:GuruComponents.Netrix.HtmlTextFormatting.DirectionRtlInline(System.Boolean)">DirectionRtlInline</seealso>
            </remarks>
            <example>
            The following code shows how to insert and use this element:
            <code>
            IElement bdo = this.htmlEditor1.Document.InsertBidirectionalOverride();
            ((BdoElement) bdo).dir = "rtl";</code>
            The code assumes that any text is selected in the document where the insertion applies to.
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BdoElement.dir">
            <summary>
            The Direction, which the text follows.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BdoElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BigElement">
            <summary>
            The BIG element suggests that text be rendered in a larger font.
            </summary>
            <remarks>
            In most cases, use of a structural element such as STRONG or a heading (e.g., H3) is more appropriate since these elements express the meaning 
            of the text more clearly. One can suggest that STRONG text be rendered in a larger font with the following Cascading Style Sheet:
            <code>
            STRONG { font-size: larger }
            </code>
            Most browsers support nested BIG elements, but authors should be wary of making significant changes to the font size. 
            Different users have different font sizes, eyesight, and window sizes. Large changes in font size may look right to the author but ridiculous to some users.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.StrongElement">StrongElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BigElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BlockquoteElement">
            <summary>
            The BLOCKQUOTE tag defines the start of a long quotation.
            </summary>
            <remarks>
            The BLOCKQUOTE tag is supposed to contain only block-level elements within it, and not just plain text.
            To validate the page as strict XHTML, you must add a block-level element around the text within the BLOCKQUOTE tag, 
            like this:
            <code>
            &lt;blockquote&gt;
            &lt;p&gt;here is a long quotation here is a long quotation&lt;/p&gt;
            &lt;/blockquote&gt;
            </code>
            The blockquote element creates white space on both sides of the text
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BlockquoteElement.cite">
            <summary>
            A cite, which this element belongs to.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BlockquoteElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BodyElement">
            <summary>
            The BODY element contains the document body.
            </summary>
            <remarks>
            BODY is required in non-frames documents, but its start and end tags are always optional. In frames documents, BODY must be contained within the NOFRAMES element, if NOFRAMES is used.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.title">
            <summary>
            Hide the inherited member. Not used.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.aLink">
            <summary>
            ALINK suggests an active link color. 
            </summary>
            <remarks>
            Active means the link is selected by user. It is recommended to use style sheets (CSS) instead.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.bgProperties">
            <summary>
            BGPROPERTIES defines the behavior of a background image.
            </summary>
            <remarks>
            This attribute is not HTML 4.0 conform and is recognized by MSIE only. It is not recommended to use
            this property.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.BackgroundPropertyType">BackgroundPropertyType</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.background">
            <summary>
            The BACKGROUND attribute suggests a background image for tiling on the document canvas.
            </summary>
            <remarks>
            To help ensure a readable document, the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.bgColor">bgColor</see>, 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.text">text</see>, 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.link">link</see>, 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.vLink">vLink</see>, and 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.aLink">aLink</see> attributes should always be included when BACKGROUND is given. The BGCOLOR will be used for those not loading images.
            
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.bgColor">
            <summary>
            BGCOLOR suggests a background color.
            </summary>
            <remarks>
            If the BACKGROUND attribute is set and the images is available this attribute is not recognized.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.background">background</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.bottomMargin">
            <summary>
            Set the BOTTOMMARGIN attribute.
            </summary>
            <remarks>
            The attribute sets the margin at the bottom of the page.
            This attribute defaults to 15 pixels. To remove the attribute completely set the value to -1.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.leftMargin">
            <summary>
            Set the LEFTMARGIN attribute.
            </summary>
            <remarks>
            The attribute sets the margin at the left side of the page.
            This attribute defaults to 10 pixels. To remove the attribute completely set the value to -1.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.link">
            <summary>
            LINK suggests a link color. 
            </summary>
            <remarks>
            This value can be overwritten by style sheets. It applies to ANCHOR tags only.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.rightMargin">
            <summary>
            Set the RIGHTMARGIN attribute.
            </summary>
            <remarks>
            The attribute sets the margin at the right side of the page.
            This attribute defaults to 10 pixels. To remove the attribute completely set the value to -1.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.text">
            <summary>
            TEXT suggests a text color.
            </summary>
            <remarks>
            It is recommended to use style sheets (CSS) instead of setting this attribute to a static color.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.topMargin">
            <summary>
            Set the TOPMARGIN attribute.
            </summary>
            <remarks>
            The attribute sets the margin at the top of the page.
            This attribute defaults to 15 pixels. To remove the attribute completely set the value to -1.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BodyElement.vLink">
            <summary>
            VLINK suggests a visited link color.
            </summary>
            <remarks>
            The visited link table is stored in the browser. The time the links remains as visited cannot be
            controlled by server application. Therefore the behavior is not predictable nor reliable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BodyElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BoldElement">
            <summary>
            The B element suggests that text be rendered as bold text.
            </summary>    
            <remarks>
            In most cases, use of a phrase element such as STRONG is more appropriate since such elements express the meaning of the text more clearly.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.StrongElement"/>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BoldElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BreakElement">
            <summary>
            The BR element forces a break in the current line of text.
            </summary>
            <remarks>
            BR can be useful in formatting addresses within the ADDRESS element, but it is often misused to break lines of text in a paragraph or table cell when it looks "nice" to the author. This usually results in an awkward presentation when viewed with a font size other than that used by the author.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.ParagraphElement">ParagraphElement</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BreakElement.clear">
            <summary>
            The CLEAR attribute of BR is used to move below floating objects.
            </summary>
            <remarks>
            Floating objects are typically images or tables.
            In the following example, the second paragraph should be rendered below the floating image:
            <code>
            &lt;P&gt;&lt;IMG SRC="toronto.jpg" ALIGN=left ALT="" TITLE="Toronto's CN Tower"&gt;Toronto is the largest city in Canada and the fourth largest in North America.&lt;/P&gt;
            &lt;BR CLEAR=left&gt;
            &lt;P&gt;The city is highly multicultural, with over 80 ethnic communities from Africa, Asia, and Europe...
            &lt;/Pgt;
            </code>
            Style sheets provide more flexibility in controlling text flow around objects and eliminate the need to use BR for this purpose since CSS1's clear property can be applied to any element (such as the second paragraph in the preceding example).
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.BreakClearEnum">BreakClearEnum</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.ParagraphElement">ParagraphElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BreakElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.CenterElement">
            <summary>
            The CENTER element defines a block whose contents are centered horizontally on visual browsers.
            </summary>
            <remarks>
            &lt;CENTER&gt; is a shorthand for <c>&lt;DIV ALIGN=center&gt;</c>, though CENTER is slightly better supported among browsers. 
            Both methods of centering are deprecated in favor of style sheets (CSS).
            <para>
            If you setup a user interface it is recommended to use <c>&lt;div style="text-align:center"&gt;</c> to center any text
            in a container. This class is available to get backwards compatibility with elder HTML pages edited with NetRix.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CenterElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.CiteElement">
            <summary>
            The CITE element is used to markup citations.
            </summary>
            <remarks>
            Visual browsers typically render CITE as italic text, but authors can suggest a rendering using style sheets. 
            Since CITE is a structural element, it carries meaning, making it preferable to font style elements such as I 
            when marking up citations.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.ItalicElement">ItalicElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CiteElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.CodeElement">
            <summary>
            The CODE element denotes computer code.
            </summary>
            <remarks>
            Visual browsers typically render CODE as monospaced text, but authors can suggest a rendering using style sheets. 
            Since CODE is a structural element, it carries meaning, making it preferable to font style elements such as TT when marking up computer code.
            Since spacing is often important when presenting computer code, the PRE element can be useful as a container for CODE elements. 
            When used within other containers, a CODE element has multiple spaces collapsed. The following example uses CODE within PRE:
            <code>
            &lt;PRE&gt;&lt;CODE&gt;
            class HelloWorld 
            {
              public static void main(String[] args) 
              {
                 System.out.println("Hello World!");
              }
            }
            &lt;/CODE&gt;&lt;/PRE&gt;
            </code>       
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TeletypeElement">TeletypeElement (TT)</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.PreformattedElement">PreformattedElement (PRE)</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CodeElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.CommentElement">
            <summary>
            Allows access to a HTML comment.
            </summary>
            <remarks>
            Each comment is treated as an tag object and can contain simple text, which is managed by the one and only
            property <see cref="P:GuruComponents.Netrix.WebEditing.Elements.CommentElement.Content">Content</see>.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CommentElement.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an attribute to a specific value.
            </summary>
            <remarks>
            Does nothing for TextNodeElement.
            </remarks>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value beeing written.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CommentElement.GetAttribute(System.String)">
            <summary>
            Universal access to any attribute.
            </summary>
            <remarks>
            Returns always <c>null</c> (<c>Nothing</c> in VB) for TextNodeElements.
            </remarks>
            <param name="attribute">The name of the attribute.</param>
            <returns>The object which is the value of the attribute.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CommentElement.RemoveAttribute(System.String)">
            <summary>
            Remove the give attribute from element.
            </summary>
            <param name="attribute">The name of the attribute which is about to be removed. Case insensitive.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.CommentElement.Content">
            <summary>
            The content of the comment.
            </summary>
            <remarks>
            The content of the comment is not changed or recognize in any way. It is recommended to not use 
            any HTML here.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CommentElement.ToString">
            <summary>
            Supports the user interface.
            </summary>
            <remarks>
            This overwritten method is used to support the user interface with a common string representation (the user
            interface is not supported in the Light version, but this method will still return a valid string).
            </remarks>
            <returns>The string representation, &lt;!-- --&gt;</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CommentElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.DefinitionElement">
            <summary>
            The DFN element denotes the defining instance of a term.
            </summary>
            <remarks>
            Visual browsers typically render DFN as italic text, but authors can suggest a rendering using style sheets. Since DFN is a structural element, 
            it carries meaning, making it preferable to font style elements such as I when marking up the defining instance of a term.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.DefinitionElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.DefinitionListDefinitionElement">
            <summary>
            The DL element defines a definition list.
            </summary>
            <remarks>
            An entry in the list is created using the DT element for the term being defined and the DD element for the definition of the term.
            <para>
            A definition list can have multiple terms for a given definition as well as multiple definitions for a given term. 
            Authors can also give a term without a corresponding definition, and vice versa, but such a structure rarely makes sense.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.DefinitionListDefinitionElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.DefinitionListEntryElement">
            <summary>
            The DD element provides the definition of a term in a definition list.
            </summary>
            <remarks>
            The closing tag for DD is optional, but its use prevents common browser bugs with style sheets.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.DefinitionListEntryElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.DefinitionListTermElement">
            <summary>
            The DT element defines a term in a definition list.
            </summary>
            <remarks>
            The closing tag for DT is optional, but its use prevents common browser bugs with style sheets. Note that DT cannot contain block-level elements such as P and H2.
            <para>A DT element should generally be followed by a DD element that provides the definition for the term given by the DT. A single definition term 
            may have multiple definitions associated with it, and a single definition may have multiple terms.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.DefinitionListTermElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.DeletedElement">
            <summary>
            The DEL element contains content that has been deleted.
            </summary>
            <remarks>
            This element is useful in marking changes from one version of a document to the next. Through style sheets, authors can suggest an appropriate rendering, such as not displaying the deleted content or rendering the text with a strike-through style.
            <para>
            DEL may be used as either a block-level element or an inline element. If used as an inline element (e.g., within a P), then DEL may not contain any block-level elements.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.DeletedElement.cite">
            <summary>
            The CITE attribute of DEL gives a URI with information on why the content was deleted. Optional.
            </summary>
            <remarks>
            A brief explanation for the deletion can be given with the TITLE attribute, which may be rendered as a "tooltip" by some browsers.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.DeletedElement.datetime">
            <summary>
            The optional DATETIME attribute specifies the date and time of the deletion.
            </summary>
            <remarks>
            The value is case-sensitive and of the form YYYY-MM-DDThh:mm:ssTZD. See the values section for a full explanation of this format.
            The usage is shown by the following example:
            <code>
            &lt;DEL CITE="http://www.w3.org/TR/REC-html40/appendix/changes.html#h-A.1.3" DATETIME="1997-12-19T00:00:00-05:00" TITLE="XMP is obsolete"&gt;
            &lt;P&gt;
            The XMP element contains preformatted text in which markup other than an end tag is treated as literal text.
            &lt;/P&gt;
            &lt;/DEL&gt;
            </code>
            Since DEL is poorly supported among browsers, authors may wish to use a font style element such as STRIKE (deprecated in HTML 4.0) to attempt to convey the meaning of DEL to non-supporting visual browsers.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.DeletedElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.DirectoryElement">
            <summary>
            The DIR element defines a directory list.
            </summary>
            <remarks>
            The element contains one or more LI elements that define the actual items of the list. The LI elements must not contain block-level elements, which prevents DIRs from being nested.
            <para>
            DIR is deprecated in HTML 4.0 in favor of UL.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.DirectoryElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.DivElement">
            <summary>
            The DIV element, a generic block element container.
            </summary>
            <remarks>
            The DIV element is often used to define a paragraph and assign various styles to layout the paragraph.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.DivElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.DivElement.disabled">
            <summary>
            Disables the element.
            </summary>
            <remarks>
            The most elements are drawn grayed or with a gray shadow to inform the user that the element is disabled.
            Field elements do not except the focus and do not display the caret.
            <para>
            In HTML the element is disables if the attribute exists and it is enabled if it doesn't exist. The parameter assigned
            to the attribute is useless.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.DivElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.EmbeddedBaseElement">
            <summary>
            This base class supports the NetRix infrastructure.
            </summary>
            <remarks>
            Please do not use this class directly in any application.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.EmbeddedBaseElement._params">
            <summary>
            This field stores the option elements which are part of the select box.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.EmbeddedBaseElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.EmbeddedBaseElement.alt">
            <summary>
            Use as alt="text" attribute.</summary>
            <remarks>
            For user agents that cannot display images, forms, or applets, this 
            attribute specifies alternate text. The language of the alternate text is specified by the lang attribute. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.EmbeddedBaseElement.title">
            <summary>
            Gets or sets the title attribute for this element.
            </summary>
            <remarks>
            Visible elements may render the title as a tooltip.
            Invisible elements may not render, but use internally to support design time environments.
            Some elements may neither render nor use but still accept the attribute.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.EmphasisElement">
            <summary>
            The EM element gives emphasis to its contents.
            </summary>
            <remarks>
            Visual browsers typically render EM as italic text, but authors can suggest a rendering using style sheets. Since EM is a structural element, 
            it carries meaning, making it preferable to font style elements such as I when emphasis is the intended meaning.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.EmphasisElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.EncodingType">
            <summary>
            ENCTYPE determines how the form data is encoded.
            </summary>
            <remarks>
            Whenever data is transmitted from one place to another, 
            there needs to be an agreed upon means of representing that data.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.EncodingType.UrlEncoded">
            <summary>
            For sending form data.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.EncodingType.Multipart">
            <summary>
            For uploading files.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.EncodingType.TextPlain">
            <summary>
            For sending form data as plain text (depreciated).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BodyElementExt">
            <summary>
            This class allows access to additional positioning information.
            </summary>
            <remarks>
            This class enhances the basic BodyElement class. It was introduced to avoid
            the ability of non-HTML attributes for propertygrid access. The ScrollXX properties allow the
            detection of the current scroll position to synchronize external controls like ruler or bars.
            <para>
            The positions are in pixel and relative to the control window.
            </para>
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Element">
            <summary>
            The base class for all elements.
            </summary>
            <remarks>
            This class defines the basic propertygrid behavior and all helper methods to
            deal with attributes. This class is not intended to be used directly from users code. This class
            implements IElement and ICloneable. The latter is used to built shallow copy clones of elements.
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.ID">
            <summary>
            Gets or sets the element's ID attribute.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.ExtendedProperties">
            <summary>
            Gives access to extended properties which do not have any relation to attributes.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.ElementBehaviors">
            <summary>
            Access to the binary behavior manager at element level.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Click">
            <summary>
            Fired if the user clicks on the element in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.DblClick">
            <summary>
            Fired if the user double clicks on the element in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.DragStart">
            <summary>
            Fired if the user starts dragging the in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Focus">
            <summary>
            Fired if the elemens receives the focus.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Drop">
            <summary>
            Fired if the element is receiving a drop event.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Blur">
            <summary>
            Fired if the elemens looses the focus.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.DragOver">
            <summary>
            Fired during drag drop.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.DragEnter">
            <summary>
            Fired if the mouse enters the element during drag drop.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.DragLeave">
            <summary>
            Fired if the mouse leaves the element during drag drop.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.KeyDown">
            <summary>
            Fired if the user hits a key down on the element in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.KeyPress">
            <summary>
            Fired if the user pressed a key in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.KeyUp">
            <summary>
            Fired if the user hits and releases a key on the element in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseDown">
            <summary>
            Fired if the user clicks a mouse button on the element in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.ResizeStart">
            <summary>
            Sets or removes an event handler function that fires when the user begins to change the dimensions of the object.
            </summary>
            <remarks>
            This event handler will not suppress the embedded resizing behavior.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.ResizeEnd">
            <summary>
            Sets or removes an event handler function that fires when the user has finished changing the dimensions of the object.
            </summary>
            <remarks>
            This event handler will not suppress the embedded resizing behavior.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseEnter">
            <summary>
            Sets or removes an event handler function that fires when the user moves the mouse pointer into the object.
            </summary>
            <remarks>
            Unlike the OnMouseOver event, the MouseEnter event does not bubble. In other words, the MouseEnter 
            event does not fire when the user moves the mouse pointer over elements contained by the object, 
            whereas <see cref="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseOver">MouseOver</see> does fire. 
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseLeave">
            <summary>
            Sets or retrieves a pointer to the event handler function that fires, when the user moves the mouse pointer outside 
            the boundaries of the object.</summary>
            <remarks>Use in correspondence to MouseEnter.</remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseMove">
            <summary>
            Fired if the user moves the mouse over the element area in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseOut">
             <summary>
             Fired if the user mouse has left the element area with the mouse in design mode.
             </summary>
             <example>
             To use this event to show the content of a link the mouse pointer is over, use this code:
             <code>
             ArrayList anchors = this.htmlEditor2.DocumentProperties.GetElementCollection("A") as ArrayList;
             if (anchors != null)
             {
                foreach (AnchorElement a in anchors)
                {
                    a.MouseOver -= new GuruComponents.Netrix.Events.DocumentEventHandler(a_OnMouseOver);
                    a.MouseOver += new GuruComponents.Netrix.Events.DocumentEventHandler(a_OnMouseOver);
                    a.MouseOut -= new GuruComponents.Netrix.Events.DocumentEventHandler(a_OnMouseOut);
                    a.MouseOut += new GuruComponents.Netrix.Events.DocumentEventHandler(a_OnMouseOut);
                }
             }</code>
             Place this code in the <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> event.
             The handler are now able to do something with the element.
             <code>
            private void a_MouseOut(GuruComponents.Netrix.Events.DocumentEventArgs e)
            {
              AnchorElement a = e.SrcElement as AnchorElement;
              if (a != null)
              {
                 this.statusBarPanelLinks.Text = "";
              }
            }</code>
             <code>
            private void a_MouseOver(GuruComponents.Netrix.Events.DocumentEventArgs e)
            {
               AnchorElement a = e.SrcElement as AnchorElement;
               if (a != null)
               {
                  this.statusBarPanelLinks.Text = a.href;
               }
            }</code>
             </example>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseOver">
             <summary>
             Fired if the user has entered the element area with the mouse in design mode.
             </summary>
             <example>
             To use this event to show the content of a link the mouse pointer is over, use this code:
             <code>
             ArrayList anchors = this.htmlEditor2.DocumentProperties.GetElementCollection("A") as ArrayList;
             if (anchors != null)
             {
                foreach (AnchorElement a in anchors)
                {
                    a.MouseOver -= new GuruComponents.Netrix.Events.DocumentEventHandler(a_MouseOver);
                    a.MouseOver += new GuruComponents.Netrix.Events.DocumentEventHandler(a_MouseOver);
                    a.MouseOut -= new GuruComponents.Netrix.Events.DocumentEventHandler(a_MouseOut);
                    a.MouseOut += new GuruComponents.Netrix.Events.DocumentEventHandler(a_MouseOut);
                }
             }</code>
             Place this code in the <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> event.
             The handler are now able to do something with the element.
             <code>
            private void a_MouseOut(GuruComponents.Netrix.Events.DocumentEventArgs e)
            {
              AnchorElement a = e.SrcElement as AnchorElement;
              if (a != null)
              {
                 this.statusBarPanelLinks.Text = "";
              }
            }</code>
             <code>
            private void a_MouseOver(GuruComponents.Netrix.Events.DocumentEventArgs e)
            {
               AnchorElement a = e.SrcElement as AnchorElement;
               if (a != null)
               {
                  this.statusBarPanelLinks.Text = a.href;
               }
            }</code>
             </example>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseUp">
            <summary>
            Fired if the user releases the mouse button over the element area in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.SelectStart">
            <summary>
            Fired if the user starts selecting the element area in design mode.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.LayoutComplete">
            <summary>
            Fired when the renderer has finished the layout.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Load">
            <summary>
            Fired on document level after load complete.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MouseWheel">
            <summary>
            Fired when the mouse wheel moves.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MoveEnd">
            <summary>
            Fired when a move operation ends.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.MoveStart">
            <summary>
            Fired when a move operation starts.
            </summary>        
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Activate">
            <summary>
            Fired after the element is getting activated.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.BeforeActivate">
            <summary>
            Fired before the element is about going activated.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.BeforeCopy">
            <summary>
            Fired before a copy operation starts.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.BeforeCut">
            <summary>
            Fired before a cut operation starts.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.BeforePaste">
            <summary>
            Fired before a paste operation starts.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.ContextMenu">
            <summary>
            Fired is the user has right clicked the element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Copy">
            <summary>
            Fired after a copy operation has been finished.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.Element.Cut">
            <summary>
            Fired after a cut operation has been finished.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetElementsPointer(GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency)">
            <summary>
            Returns the displaypointer as a helper for other internal methods. It is up to the calling
            routine to determine 
            </summary>
            <param name="Adjacency"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.CustomColors">
            <summary>
            Sets or gets a static (shared in VB) field that stores the customized
            colors of each color picker control in the PropertyGrid.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.SetMousePointer(System.Boolean)">
            <summary>
            Access to SetMousePointer method. Used to create behaviors for elements.
            </summary>
            <param name="Hide">false to show original mouse, true to hide and present elements pointer image</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.HtmlEditor">
            <summary>
            Gives access to the HtmlEditor control and all subclasses
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.Document">
            <summary>
            Returns a pointer to the document containing this element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.CreateElement(System.String)">
            <summary>
            Creates a new element. For internal use only.
            </summary>
            <param name="tag">Tagname without quotes and brackets</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.IsSelectable">
            <summary>
            Returns <c>true</c> if the element is selectable.
            </summary>
            <remarks>
            This is a short cut to the selection class.
            <seealso cref="T:GuruComponents.Netrix.ISelection">ISelection</seealso>
            </remarks>
            <returns>Returns <c>true</c> if the element is selectable.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.UniqueName">
            <summary>
            Unique name internally used by DesignerHost.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetAbsoluteArea">
            <summary>
            Returns the absolute coordinates of the element in pixel.
            </summary>
            <remarks>
            This method works even for non absolute positioned elements. Some elements, which have no rectangle
            dimensions, may fail returning any useful values.
            </remarks>
            <returns>A rectangle which describes the dimensions of the client area of the element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.ReplaceAdjacentText(GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency,System.String)">
            <summary>
            Replaces the text adjacent to the element.
            </summary>
            <param name="where">Specifies where to locate the replacement text.</param>
            <param name="text">The text that replace the current one.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetAdjacentText(GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency)">
            <summary>
            Gets the text adjacent to the element.
            </summary>
            <param name="where">Specifies where to locate the replacement text.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.ReleaseCapture">
            <summary>
            Removes mouse capture from the object in the current document.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.BlurFocus">
            <summary>
            Causes the element to lose focus and fires the <see cref="E:GuruComponents.Netrix.WebEditing.Elements.Element.Blur"/> event.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.ContentEditable">
            <summary>
            Gets or sets explicitly the design mode for this element.
            </summary>
            <value>Setting to true will set the attribute "contentEditable", which is visible in the documents DOM.
            Returning the value false means that the mode is not explicitly set but may be inherited. Setting a
            parent to ContentEditable will not change the value for the children, but in fact, they are now editable. 
            </value>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.AtomicSelection">
            <summary>
            The element with this property set to TRUE will be selectable only as a unit.
            </summary>
            <remarks>
            This property is only available 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.Unselectable">
            <summary>
            Makes the element unselectable, so the user cannot activate it for resizing or moving.
            </summary>
            <remarks>
            The property is ignored if the element is already an unselectable element. Only block elements
            like DIV, TABLE, and IMG can be selectable.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.InnerHtml">
            <summary>
            Gets or sets inner html of the element.
            </summary>
            <remarks>
            The inner html is the complete content between the opening and the closing tag.
            If the element is not a container element the property will return <see cref="F:System.String.Empty">String.Empty</see>.
            Any HTML is returned "as is", with the braces and tag names.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.InnerText">
            <summary>
            Gets or sets the inner text of the element.
            </summary>
            <remarks>
            The inner text is the complete content between the opening and the closing tag, with any HTML tags
            stripped out.
            If the element is not a container element the property will return <see cref="F:System.String.Empty">String.Empty</see>.
            Any HTML is returned "as is", with the braces and tag names.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.OuterHtml">
            <summary>
            Gets or sets outer html of the element.
            </summary>
            <remarks>
            The outer html is the complete content between the opening and the closing tag and it includes the
            tags themselfes.
            If the element is not a container element the property will return <see cref="F:System.String.Empty">String.Empty</see>.
            Any HTML is returned "as is", with the braces and tag names.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.TagElement">
            <summary>
            Gives direct access to the element object from datasource or collection based lists.
            </summary>
            <remarks>
            Used for lists which needs a property to access collection members for displaying purposes. To
            prevent such lists from deleting the object we send only a shallow copy clone. This
            allows the caller to change all properties but deleting does not modify the DOM.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.TagName">
            <summary>
            The name of the element.
            </summary>
            <remarks>
            If the loaded document supports XML and does contain namespaces, the property does not
            return the assigned alias. See <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.Alias"/> and <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.ElementName"/> instead.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.Alias">
            <summary>
            Returns the alias of the element's namespace.
            </summary>
            <remarks>
            HTML elements does have the legacy alias HTML, which is never ever required to be written
            in documents explicitly. This feature does not require XML plugins for proper support.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.ElementName">
            <summary>
            Complete name of element including the alias.
            </summary>
            <remarks>
            If the loaded document supports XML and does contain namespaces, the property does 
            return the assigned alias and name in usual form "alias:name". 
            See also <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.Alias"/> and <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.TagName"/> for other naming information properties.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.ToString">
            <summary>
            Builds the string representation of the element class.
            </summary>
            <remarks>
            The method does not recognize container tags and therefore
            it renders all tags as &lt;tagname&gt; whether or not a closing tag exists.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.EffectiveStyle">
            <summary>
            Gets the current STYLE definition.
            </summary>
            <remarks>
            This property shows the effective style if this element as a cascade of the global
            and inline styles defined elsewhere. Readonly.
            <para>
            The property returns <c>null</c> (<c>Nothing</c> in VB.NET) if the effective style can not be retrieved.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.RuntimeStyle">
            <summary>
            The runtime style provide access to additonal appearance information at runtime. Does not persist.
            </summary>
            <remarks>
            This property allows access to styles not being persistent within the document. They affect only at runtime
            and can change the current appearance of an object. One can use this to add specific effects during user
            operation of to customize elements in particular situations.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.EffectiveStyle"/>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.SetStyleAttribute(System.String,System.String)"/>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.RemoveStyleAttribute(System.String)"/>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetStyleAttribute(System.String)"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.CurrentStyle">
            <summary>
            Access to the style attribute in an object form.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.EffectiveStyle"/>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.RuntimeStyle"/>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.SetStyleAttribute(System.String,System.String)"/>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.RemoveStyleAttribute(System.String)"/>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetStyleAttribute(System.String)"/>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetBaseElement">
            <summary>
            Returns the COM instance of the element object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.InsertAdjacentElement(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Inserts an element at the specified location.
            </summary>
            <param name="method">Specifies where to insert the HTML element.</param>
            <param name="element">Element to be inserted adjacent to the object.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.InsertAdjacentHtml(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Inserts the given HTML text into the element at the location.
            </summary>
            <param name="method"></param>
            <param name="html"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.InsertAdjacentText(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Inserts the given text into the element at the specified location.
            </summary>
            <param name="method">Specifies where to insert the text.</param>
            <param name="text"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.#ctor(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Sets the peer element. Not for public use.
            </summary>
            <param name="peer"></param>
            <param name="editor"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetChild(System.Int32)">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Returns the child at the give index. </summary>
            <remarks>If a element has 4 children they are indexed zero based.
            </remarks>
            <param name="index">The Number of child in the children collection.</param>
            <returns>Returns the base class of child element or <c>null</c>, if the index was not found.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetChild(System.String)">
            <summary>
            The child of the element or null if it does not have children.
            </summary>
            <remarks>
            This method will return the next child with the given tag name in the collection of children.
            </remarks>
            <param name="name">Tag name of the child we are searching for.</param>
            <returns>Returns the base class of child element or <c>null</c>, if the name was not found.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetChildren">
            <summary>
            Returns the collection of children of the element.
            </summary>
            <remarks>
            The returned collection will always beeing created, but it could be empty if there are
            no children. The collection will contain all children elements that follow the current element,
            even their children. To get only the direct descendants use <see cref="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.GetChildNodes">ElementDom.GetChildNodes</see> instead.
            </remarks>
            <returns>Collection of elements of type IElement.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.ElementDom">
            <summary>
            Returns the DOM access to the element.
            </summary>
            <returns>The DOM representation of the element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetParent">
            <summary>
            The parent of the current element or null if no parent.
            </summary>
            <remarks>
            Instead of the access in <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.ElementDom"/> this property returns the object as base class type
            <see cref="T:System.Web.UI.Control"/>, and therefore accepts types defined in plug-ins, too. <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.ElementDom"/>
            is a specialized DOM access method implemented especially for <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/> derived types.
            Plug-ins may implement there own version or allow access to the private element DOM elsewhere.
            </remarks>
            <returns>Returns the base class of child element or <c>null</c>, if there was no parent element.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.Parent">
            <summary>
            Wraps the <see cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetParent"/> method. This is the natural (HTML) parent.
            </summary>
            <remarks>
            This overload was added in version 2.0 (2010) second build.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetRelativeUrl(System.String)">
            <summary>
            This method takes a full (absolute) URL and returns it as relative URL.
            </summary>
            <remarks>
            This method is internally used to deal with relative paths even if the control
            need absolute paths for images and other sources. The base URL which is used to
            recognize the relative path is found in the <see cref="P:GuruComponents.Netrix.HtmlEditor.Url"/>
            property.
            <para>
            If that path set to c:\inetpub\wwwroot\path\ and the absolute path of an image is
            c:\inetpub\wwwroot\path\image\xxx.jpg the method will return "image\xxx.jpg". The
            PropertyGrid uses this to display only relative parts.
            </para>
            <para>
            Additionally a possibly attached file:// moniker will be removed. Hashmarks (#) at the end of the string
            will not harm the resolvation. The method removes them before resolvation and add them at the end.
            </para>
            </remarks>
            <param name="absoluteUrl">The absolute URL of a source.</param>
            <returns>The relative part accordingly to the base URL.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetDocumentStyleSelectors(GuruComponents.Netrix.WebEditing.Styles.StyleType)">
            <summary>
            This method return all style selectors linkes with the current document this element is in.
            </summary>
            <remarks>
            The type will by recognized by the sign typically used for selectors, like ".class", "#id", and "@rule".
            </remarks>
            <param name="selectorType">String with the type</param>
            <returns>Array of objects</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.IsAbsolutePositioned">
            <summary>
            Gets true if the element can positioned freely on the surface by using DHTML.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.Element.IsTextEdit">
            <summary>
            Gets <c>true</c> if the element is in text editing mode.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetStyle">
            <summary>
            This method return the complete CSS inline definition, which the style attribute contains.
            </summary>
            <remarks>
            For easy access to specific styles it is recommended to use the 
            <see cref="M:GuruComponents.Netrix.WebEditing.Elements.IElement.GetStyleAttribute(System.String)">GetStyleAttribute</see> and 
            <see cref="M:GuruComponents.Netrix.WebEditing.Elements.IElement.SetStyleAttribute(System.String,System.String)">SetStyleAttribute</see>
            methods. This and both alternative methods will check the content and cannot assign values not
            processed by the Internet Explorer Engine. The final behavior may vary depending on the currently
            installed IE engine.
            </remarks>
            <returns>Returns the complete style text (all rules) as one string.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.SetStyle(System.String)">
            <summary>
            Set the current style by overwriting the complete content of the style attribute.
            </summary>
            <param name="CssText">The style text; should be CSS compliant.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetStyleAttribute(System.String)">
            <summary>
            Gets a specific part of an inline style.
            </summary>
            <param name="styleName">The style attribute to retrieve</param>
            <returns>The string representation of the style. Returns <see cref="F:System.String.Empty"/> if the 
            style does not exists.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.SetStyleAttribute(System.String,System.String)">
            <summary>
            Sets a specific part of an inline style.
            </summary>
            <remarks>
            Setting to <seealso cref="F:System.String.Empty">String.Empty</seealso> does remove
            the style name. For a more intuitive way use <see cref="M:GuruComponents.Netrix.WebEditing.Elements.Element.RemoveStyleAttribute(System.String)">RemoveStyleAttribute</see> instead.
            Setting impossible rule texts will either ignore the command or set unexpected values.
            </remarks>
            <param name="styleName">The name of the style rule beeing set, e.g. "font-family".</param>
            <param name="styleText">The rule content, like "Verdana,Arial" for the "font-family" rule.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.RemoveStyleAttribute(System.String)">
            <summary>
            Removes an style attribute and his content from the inline style string.
            </summary>
            <param name="styleName">Name of style to be removed</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetNativeAttribute(System.String)">
            <summary>
            Universal access to any attribute.
            </summary>
            <remarks>
            The type returned may vary depended on the internal type.
            </remarks>
            <param name="attribute">The name of the attribute.</param>
            <returns>The object which is the value of the attribute.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetBooleanAttribute(System.String)">
            <summary>
            Returns an attribute's value which is supposedly boolean.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>Boolean representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetColorAttribute(System.String)">
            <summary>
            Returns an attribute's value which is supposedly a color.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>Color representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetEnumAttribute(System.String,System.Enum)">
            <summary>
            Returns an attribute's value which is supposedly enum.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>Enum representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetIntegerAttribute(System.String,System.Int32)">
            <summary>
            Returns an attribute's value which is supposedly int.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>Int representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetStringAttribute(System.String)">
            <summary>
            Returns an attribute's value which is supposedly string.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetStringAttribute(System.String,System.String)">
            <summary>
            Returns an attribute's value which is supposedly string.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.GetUnitAttribute(System.String)">
            <summary>
            Returns an attribute's value which is supposedly a Unit.
            </summary>
            <param name="attribute">Name of attribute.</param>
            <returns>Unit representation of value.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.RemoveAttribute(System.String)">
            <summary>
            Remove the give attribute from element.
            </summary>
            <remarks>
            <para>
            This property is thread safe if <see cref="P:GuruComponents.Netrix.HtmlEditor.ThreadSafety">ThreadSafety</see>
            is turned on. 
            </para>
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.ThreadSafety">ThreadSafety</seealso>
            <param name="attribute">The name of the attribute which is about to be removed. Case insensitive.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an attribute to a specific value.
            </summary>
            <remarks>
            The command may does nothing if the value does not correspond with the attribute. E.g. it
            is almost impossible to write a pixel value if the attribute expects a font name.
            <para>
            This property is thread safe if <see cref="P:GuruComponents.Netrix.HtmlEditor.ThreadSafety">ThreadSafety</see>
            is turned on. 
            </para>
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.ThreadSafety">ThreadSafety</seealso>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.Clone">
            <summary>
            We need this to prevent callers (like comboBox) using elements directly from deleting the
            original object. This makes a shallow copy, which let the internal references untouched.
            </summary>
            <returns></returns>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.Element.IsDisposed">
            <summary>
            Shows that the element has been disposed.
            </summary>
            <remarks>
            After loading a document, changing <see cref="P:GuruComponents.Netrix.HtmlEditor.InnerHtml">InnerHtml</see> of the document
            or clearing the designer collections each element object is disposed. To avoid accessing you could check
            this property and retrieve a new instance calling the ElementFactory.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.Element.Dispose">
            <summary>
            Internally called by element factory to detach event handlers and dispose the object.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency">
            <summary>
            Used to place the caret during replace and insertion of text.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency.AfterBegin">
            <summary>
            Place the caret after the word begun.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency.AfterEnd">
            <summary>
            Place the caret after the word end.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency.BeforeBegin">
            <summary>
            Place the caret before the word begun.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ElementAdjacency.BeforeEnd">
            <summary>
            Place the caret before the word end.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom">
            <summary>
            Gives direct access to the underlying DOM of any element.  
            </summary>
            <remarks>
            To access the document just query the ElementDom from body element.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.SwapNode(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Exchanges the location of two objects in the document hierarchy.
            </summary>
            <remarks>If elements are removed at run time, before the closing tag is parsed, areas of the document might not render.</remarks>
            <param name="node">Object that specifies the existing element.</param>
            <returns>Returns a reference to the object that invoked the method.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.GetChildNodes(System.Boolean)">
            <overloads/>
            <summary>
            Returns the direct descendent children elements, including text nodes.
            </summary>
            <remarks>
            This method returns text portions as <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement"/> objects.
            </remarks>
            <param name="includeTextNodes">If <c>True</c> the collection will include text parts as <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement"/> objects.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.GetChildNodes">
            <summary>
            Returns the direct descendent children elements.
            </summary>
            <remarks>
            Does not returns any text nodes between the elements. They are stripped out from DOM tree before building the collection.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.GetParent">
            <summary>
            Returns the parent if there is any, or <c>null</c> otherwise.
            </summary>
            <returns>Returns the element as <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>, by forcing the cast to avoid access to non-native objects.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ElementDom.LastChild">
            <summary>
            Returns the last child of the current element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ElementDom.FirstChild">
            <summary>
            Returns the first child of the current element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ElementDom.HasChildNodes">
            <summary>
            Gets <c>true</c>, if the element has child elements.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ElementDom.NextSibling">
            <summary>
            Return the next sibling of this element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ElementDom.PreviousSibling">
            <summary>
            Return the previous sibling of the element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ElementDom.Parent">
            <summary>
            Return the previous sibling of the element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.InsertBefore(GuruComponents.Netrix.WebEditing.Elements.IElement,GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Insert a new element before the current one.
            </summary>
            <param name="newChild">The new element, which has to be inserted.</param>
            <param name="refChild">The element, before which the new element is inserted.</param>
            <returns>The new element, if successful, <c>null</c> (<c>Nothing</c> in VB.NET) else.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.RemoveChild(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Removes a child element from the collection of children.
            </summary>
            <param name="oldChild">The element which has to be removed.</param>
            <returns>Returns the parent element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.ReplaceChild(GuruComponents.Netrix.WebEditing.Elements.IElement,GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Replaces an element in the children collection with a new one.
            </summary>
            <param name="oldChild">The child element which should be replaced.</param>
            <param name="newChild">The new element which replaces the old one.</param>        
            <returns>The IElement object representing the new element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.AppendChild(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Appends a new child to the children collection.
            </summary>
            <param name="newChild"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ElementDom.RemoveElement(System.Boolean)">
            <summary>
            Removes the current element from document
            </summary>
            <param name="deep">If <c>true</c>, all child element will be removed too. Otherwise the children will be preserved.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties">
            <summary>
            This class allows access to additional information about an element and advanced element manipulation.
            </summary>
            <remarks>
            This class enhances the basic Element class. It was introduced to avoid
            the ability of non-HTML attributes for propertygrid access. The ScrollXX properties allow the
            detection of the current scroll position to synchronize external controls like ruler or bars.
            <para>
            The positions are in pixel and relative to the control window.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.#ctor(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            Constructor to create an instance of the class.
            </summary>
            <remarks>
            THIS CTOR SUPPORTS THE NETRIX INFRASTRUCTURE AND IS NIT INTENDET TO BEING USED FROM USER CODE.
            </remarks>
            <param name="peer"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.DoScroll(GuruComponents.Netrix.WebEditing.Elements.ScrollAction)">
            <summary>
            Simulates a click on a scroll-bar component.
            </summary>
            <remarks>
            Cascading Style Sheets (CSS) allow you to scroll on all objects through the IHTMLStyle::overflow property.
            <para>When the content of an element changes and causes scroll bars to display, the IHTMLElement2::doScroll method might not work correctly immediately following the content update. When this happens, you can use the IHTMLWindow2::setTimeout method to enable the browser to recognize the dynamic changes that affect scrolling.</para>
            </remarks>
            <param name="scroll"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ComponentFromPoint(System.Drawing.Point)">
            <summary>
            Returns the component located at the specified coordinates via certain events. 
            </summary>
            <remarks>
            A component is a part of the element, which acts as an specific interaction point. Typically these
            are the scrollbars as well as parts of the scrollbar, and the resizing handles. The property can
            be used to determine such an element at a specific client location.
            <para>The ComponentFromPoint method, available as of MSHTML 5, is applicable to any object that can be given scroll bars 
            through Cascading Style Sheets (CSS).</para> 
            <para>The ComponentFromPoint method may not consistently return the same object when used with the <c>MouseOver</c> event. Because 
            a user's mouse speed and entry point can vary, different components of an element can fire the <c>MouseOver</c> event. 
            For example, when a user moves the cursor over a <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</see> object with scroll bars, the event might fire when the mouse 
            enters the component border, the scroll bars, or the client region. Once the event fires, the expected element may not 
            be returned unless the scroll bars were the point of entry for the mouse. In this case, the onmousemove event can be 
            used to provide more consistent results.</para>
            <para>
            A good idea to get the current handle is the <c>ResizeStart</c> event, which is fired when the mouse is on top of one
            of the handles of an selected element. However, this will never return components other than "HandleXX" or nothing.
            </para>
            </remarks>
            <param name="loc">Location in client coordinates of the point for which the component is retrieved.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ScrollLeft">
            <summary>
            Sets or retrieves the distance between the left edge of the object and the leftmost portion of the content currently visible in the window.
            </summary>
            <remarks>
            This property's value equals the current horizontal offset of the content within the scrollable range. Although you can set this property to any value, if you assign a value less than 0, the property is set to 0. If you assign a value greater than the maximum value, the property is set to the maximum value.
            <para>This property is always 0 for objects that do not have scroll bars. For these objects, setting the property has no effect.</para>
            <para>When a marquee object scrolls vertically, its ScrollLeft extended property is set to 0.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ScrollTop">
            <summary>
            Sets or retrieves the distance between the top of the object and the topmost portion of the content currently visible in the window.
            </summary>
            <remarks>
            This property's value equals the current vertical offset of the content within the scrollable range. Although you can set this property to any value, if you assign a value less than 0, the property is set to 0. If you assign a value greater than the maximum value, the property is set to the maximum value.
            <para>This property is always 0 for objects that do not have scroll bars. For these objects, setting the property has no effect.</para>
            <para>When a marquee object scrolls horizontally, its ScrollTop extended property is set to 0.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ScrollHeight">
            <summary>
            Retrieves the scrolling height of the object.
            </summary>
            <remarks>
            The height is the distance between the top and bottom edges of the object's content.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ScrollWidth">
            <summary>
            Retrieves the scrolling width of the object.
            </summary>
            <remarks>
            The width is the distance between the left and right edges of the object's visible content.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ClientArea">
            <summary>
            Retrieves the client area of the object including padding, but not including margin, border, or scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.AbsoluteArea">
            <summary>
            Retrieves an object that specifies the bounds of the elements.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.Normalize">
            <summary>
            Merges adjacent <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement"/> objects to produce a normalized document object model.
            </summary>
            <remarks>
            Calling Normalize before manipulating the subelements of an object ensures that the document object model has a consistent structure. The normal form is useful for operations that require a consistent document tree structure, and it ensures that the document object model view is identical when saved and reloaded.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ScrollIntoView">
            <overloads/>
            <summary>
            Causes the object to scroll into view, aligning at the top of the window.
            </summary>
            <remarks>
            The ScrollIntoView method is useful for immediately showing the user the result of some action without requiring the user to manually scroll through the document to find the result.
            <para>Depending on the size of the given object and the current window, this method might not be able to put the item at the very top or very bottom, but will position the object as close to the requested position as possible.</para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ScrollIntoView(System.Boolean)">
            <summary>
            Causes the object to scroll into view, aligning it either at the top or bottom of the window.
            </summary>
            <remarks>
            The ScrollIntoView method is useful for immediately showing the user the result of some action without requiring the user to manually scroll through the document to find the result.
            <para>Depending on the size of the given object and the current window, this method might not be able to put the item at the very top or very bottom, but will position the object as close to the requested position as possible.</para>
            </remarks>
            <param name="top">Specifies where to scroll to. If <c>true</c> the element is scrolled to top position.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.DOMIndex">
            <summary>
            Retrieves the ordinal position of the object, in source order, as the object appears in the document's all collection.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.SetActive">
            <summary>
            Sets the element as active without setting focus to the element.
            </summary>
            <remarks>The setActive method does not cause the document to scroll to the active object in the current page.</remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.SetCapture(System.Boolean)">
            <summary>
            Set the ability to capture the focus.
            </summary>
            <param name="containerCapture"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.ReleaseCapture">
            <summary>
            Release the ability to capture the focus.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ExtendedProperties.HideFocus">
            <summary>
            Sets or retrieves the value indicating whether the object visibly indicates that it has focus.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TextElement">
            <summary>
            This class represents a text node.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement">
            <summary>
            This class represents a Text node for usage with the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> class.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.GuruComponents#Netrix#WebEditing#Elements#IElement#Style">
            <summary>
            For text nodes styles are not defined. FOR INTERNAL USE ONLY.
            </summary>
            <remarks>This property always throws a <see cref="T:System.NotImplementedException"/>. Property is there just to satisfy the interface.</remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.GuruComponents#Netrix#WebEditing#Elements#IElement#InsertAdjacentElement(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Inserts an element at the specified location.
            </summary>
            <param name="method">Specifies where to insert the HTML element.</param>
            <param name="element">Element to be inserted adjacent to the object.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.GuruComponents#Netrix#WebEditing#Elements#IElement#InsertAdjacentHtml(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Inserts the given HTML text into the element at the location.
            </summary>
            <param name="method"></param>
            <param name="html"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.GuruComponents#Netrix#WebEditing#Elements#IElement#InsertAdjacentText(GuruComponents.Netrix.WebEditing.Elements.InsertWhere,System.String)">
            <summary>
            Inserts the given text into the element at the specified location.
            </summary>
            <param name="method">Specifies where to insert the text.</param>
            <param name="text"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.GuruComponents#Netrix#WebEditing#Elements#IElement#EffectiveStyle">
            <summary>
            Textnodes does not support styles.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.GuruComponents#Netrix#WebEditing#Elements#IElement#RuntimeStyle">
            <summary>
            Textnodes does not support styles.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.GuruComponents#Netrix#WebEditing#Elements#IElement#CurrentStyle">
            <summary>
            Textnodes does not support styles.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TextNodeElement.IsSelectable">
            <summary>
            TextNodes are never selectable, this method will always return <c>false</c>.
            </summary>
            <returns>Returns <c>false</c>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.FontElement">
            <summary>
            The FONT element allows authors to suggest rudimentary font changes. Deprecated.
            </summary>
            <remarks>
            The element is deprecated in HTML 4.0 in favor of style sheets.
            Use of the FONT element brings numerous usability and accessibility problems.
            <para>
            The following articels on behalf of Warren Steel explains whats wrong with the FONT element. 
            </para>
            <para>
            When Netscape introduced its FONT element, with its SIZE= and COLOR= attributes, many web authors welcomed the promise of control over the presentation of their documents; the same authors felt a twinge of anticipation when Microsoft introduced an additional FACE= attribute. Many of these authors did not realize that their documents would become invisible, illegible, or inaccessible to many viewers. Yet this is exactly what has happened, due to mistaken expectations and faulty implementation in popular browsers. </para>
            <para>Extensions to HTML are said to "degrade gracefully" if they do not interfere with basic legibility in browsers that do not support these extensions. For character-mode browsers such as Lynx, or other browsers that do not support font sizes, colors, and styles, the effects of the FONT element are relatively benign. If the author tries to emphasize specific text by its size or color, the user of the text-mode browser will see the text, but will not see the emphasis. If the author uses font settings instead of HTML headings, the same user will not see headings, and neither will the search engine or indexer looking for keywords in high-level headings to display prominently in the search results. But at least, the Lynx user will be able to see the text.</para>
            <para>The truly insidious effects of the FONT element are reserved for users of popular graphic browsers like Netscape and Internet Explorer.</para>
            <list type="number">
            <item>One Netscape user has a laptop with a relatively small display; she has small fonts configured in order to view a decent amount of material on screen. The author has designed a table or other page with &lt;FONT SIZE=1&gt;; this text is now so tiny that it's illegible.</item>
            <item>Another nearsighted user has his laptop configured with extra-large fonts, and the "web page designer" decides to make a statement with &lt;FONT SIZE="+4"&gt;; now a single phrase occupies most of the display window, and the user gives up in frustration.</item>
            <item>A third user has a sophisticated workstation with a large monitor, but, like ten percent of male computer users, he is colorblind, and requires a strong contrast between ordinary text and background. He has carefully configured his browser to use black text on a yellow background, and has specified that his color scheme should override document colors. Along comes a "kewl" web page with white text on a black background. Our user is overriding bodycolors, so he still sees black on yellow. But this page also contains a sentence here, a phrase there, emphasized with &lt;FONT COLOR="yellow"&gt; - this worked fine on the author's black background, but is completely 
            invisible against the user's yellow background. He may wonder what all those empty spaces mean, 
            but unless he views the HTML source, he will never know that he is missing an important part of the author's message. While Netscape allows the user to override text and body colors, it does not allow the user to override font colors.</item>
            <item>Howard P. Marvel suggests that an author might set the &lt;FONT COLOR= &gt; attribute to contrast with a table cell whose background color is set with the proprietary &lt;TD BGCOLOR= &gt; attribute recognized by some browsers. Users of a still-popular browser such as Netscape 2.0, which recognizes &lt;FONT COLOR= &gt; but not &lt;TD BGCOLOR= &gt; may not be able to read this "highlighted" text at all. </item>
            <item>A large corporation opens a website to serve its customers in Eastern Europe. Knowing that most of their viewers will have at least one font with an Eastern European Roman or Cyrillic character set, they are careful to set the proper "charset" in the server headers. But then, in an attempt to give the page a distinctive "look and feel," they add the tag &lt;FONT FACE="Arial,Helvetica,Geneva"&gt;; the Netscape user on a Windows or Mac system may well have at least one of these fonts installed, but only in the common Western European character set. Here, the use of the FONT element means that the user must delete the specified fonts from his system in order to read the text in his native language and alphabet.</item>
            <item>An author who "enhances" her pages for Microsoft Internet Explorer decides to play desktop publisher and inserts the &lt;FONT FACE= &gt; tag in her pages in the hope that others will see what she sees on her Macintosh. The viewer, using Netscape 3.0 on a Unix workstation, sees some approximation of the author's font, but here the letters appear so crowded, the kerning and leading so deranged, that the author's exquisite taste has become an ugly hash. The viewer knows he can modify the X-resources, but thinks instead: why bother, I'll just hit the Back button. </item>
            </list>
            <para>The font tag is a hindrance to communication over the World Wide Web because it makes too many assumptions about the user's system, browser, and configuration. Cascading Style Sheets, on the other hand, negotiate between author and viewer to create a carefully-designed appearance that is accessible to all. People create web documents for many reasons. If you have something to say, information to provide, a message to preach, feelings to express, a product to sell, then it's in your interest to make your work accessible. Smart web authors, who want to get their message across, stay far away from the FONT element. </para>
            <para>Is the FONT element ever appropriate? Not the COLOR= or FACE= attributes, nor absolute values of the SIZE= attribute (e.g. &lt;FONT SIZE=1&gt;). Relative values may be useful in moderation as a gentle (and expendable) form of emphasis, or to mark legalistic disclaimers or other "fine print." In other words, &lt;FONT SIZE="+1"&gt; and &lt;FONT SIZE="-1"&gt; may be acceptable. But their appearance is precisely duplicated by the long-standing HTML tags &lt;BIG&gt; and &lt;SMALL&gt;. The FONT element is broken in current implementations, is prone to cause unpredictable and unavoidable data loss, and is quickly becoming obsolete with the advent of Style Sheets.</para>
            <para>
            The FONT element is an inline element, meaning that it cannot contain block-level elements such as P and TABLE. Again, style sheets provide much more flexibility in suggesting font styles.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FontElement.color">
            <summary>
            The COLOR attribute suggests a text color.
            </summary>
            <remarks>
            While most browsers allow users to override author color changes, the widely used Netscape 
            Navigator 2.x, 3.x, and 4.x do not override colors specified with FONT. This makes the COLOR 
            attribute very dangerous from an accessibility point of view.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FontElement.face">
            <summary>
            The FACE attribute gives a comma-separated list of font faces in which to display text.
            </summary>
            <remarks>
            The fonts are listed in order of preference, so that if the browser does not have the first font listed, it will try the second, then the third, and so on.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FontElement.size">
            <summary>
            The SIZE of the content.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.FontElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ButtonElement">
            <summary>
            The BUTTON element defines a submit button, reset button, or push button.
            </summary>
            <remarks>
            Authors can also use INPUT to specify these buttons, but the BUTTON element 
            allows richer labels, including images and emphasis. However, BUTTON is new in HTML 4.0 and 
            poorly supported among current browsers, so INPUT is a more reliable choice at this time.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ButtonElement.value">
            <summary>
            The VALUE attributes determine the value sent to the server.
            </summary>
            <remarks>
            It is recommended to not use the value on the server side to control the behavior of
            a script. In case of a button the value is a UI parameter, e.g. it is used to set the
            text on the button. Changing the UI causes the script to fail.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ButtonElement.disabled">
            <summary>
            Disables the element.
            </summary>
            <remarks>
            The most elements are drawn grayed or with a gray shadow to inform the user that the element is disabled.
            Field elements do not except the focus and do not display the caret.
            <para>
            In HTML the element is disables if the attribute exists and it is enabled if it doesn't exist. The parameter assigned
            to the attribute is useless.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ButtonElement.name">
            <summary>
            The NAME of the button.
            </summary>
            <remarks>
            The name is used to recognize the value in a server side script.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ButtonElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.FieldSetElement">
            <summary>
            The FIELDSET element defines a form control group.
            </summary>                                        
            <remarks>
            By grouping related form controls, authors can divide a form into smaller, more manageable parts, improving the usability disaster that can strike when confronting users with too many form controls. The grouping provided by FIELDSET also helps the accessibility of forms to those using aural browsers 
            by allowing these users to more easily orient themselves when filling in a large form.
            <para>While FIELDSET is not widely supported by current browsers, it can be used safely by explicitly 
            closing any preceding P element with &lt;/P&gt; or by including an empty P prior to the FIELDSET. This causes 
            non-supporting browsers to infer the start of a block-level element even though they ignore the 
            block-level FIELDSET element.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.FieldSetElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.FormElement">
            <summary>
            This class represents the &lt;form&gt; element.
            </summary>
            <remarks>
            <para>
            FORM indicates the beginning of a form. All other form tags go inside 
            &lt;FORM ...&gt;. In its simplest use, &lt;FORM ...&gt; can be used without any attributes.
            Most forms require either the 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.action">action</see> or 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.Name">Name</see> attributes to do anything meaningful.
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element">Element</see> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</see>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.action">
            <summary>
            ACTION gives the URL of the CGI program which will process this form.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.encType">
            <summary>
            In most cases you will not need to use this attribute at all. 
            </summary>
            <remarks>
            The default value (i.e. if you don't use this attribute at all) is "application/x-www-form-urlencoded", 
            which is sufficient for almost any kind of form data. 
            <para>
            The one exception is if you want to do file uploads. In that case you should use "multipart/form-data". 
            Because many people use this attribute for file upload only the definition here sets the string 
            "multipart/form-data" as the default value. This changes the behavior of the property grid.
            </para>
            <para>
            The allowed values for this attribute are the following ones:
            <list>
                <item>"application/x-www-form-urlencoded" (default from the HTML 4.01 viewpoint)</item>
                <item>"multipart/form-data" (default in the NetRix UI)</item>
                <item>"text/plain"</item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.EncodingType"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.method">
            <summary>
            METHOD specifies the method of transferring the form data to the web server.
            </summary>
            <remarks>
             METHOD can be either GET or POST. Each method has its advantages and disadvantages. If the method is not set
             the browser assumes GET. But from the viewpoint of the developer the method POST is the preferred standard.
             Therefore the NetRix UI (not supported by Light version) will assume the POST is the default value. It is still
             recommended to set this attribute explicitly for all standard HTML pages. 
             <para>
             Some environments will recreate this attribute automatically (just like ASP.NET does). If the editor creates
             pages for such server driven applications there is often no need to set the attribute.
             </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.Name">
            <summary>
            NAME gives a name to the form.</summary>
            <remarks>
            This is most useful in scripting, where you frequently need to refer to the form in order to refer to the element within the form.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.ScriptOnReset">
            <summary>
            onReset runs a script when the user resets the form.
            </summary>
            <remarks>
            If onReset returns false, the reset is cancelled. Often when people hit reset they don't really mean to reset all their typing, they just hit it accidentally. onReset gives them a chance to cancel the action.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.ScriptOnSubmit">
            <summary>
            onSubmit is a scripting event that occurs when the user attempts to submit the form to the CGI. 
            </summary>
            <remarks>
            onSubmit can be used to do some error checking on the form data, and to cancel the submit if an error is found.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FormElement.target">
            <!-- Für folgende Include-Kennung wurden keine übereinstimmenden Elemente gefunden. --><include file="DocumentorIncludes.xml" path="WebEditing/Elements[@name=&quot;TargetAttribute&quot;]" />
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.FormElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputButtonElement">
            <summary>
            This INPUT element defines a button control for the user.
            </summary>
            <remarks>
            The button control is useless in HTML unless a client side script is provided which
            handles the onClick, onFocus or onBlur event.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputButtonElement.value">
            <summary>
            The VALUE attributes determine the value sent to the server.
            </summary>
            <remarks>
            It is recommended to not use the value on the server side to control the behavior of
            a script. In case of a button the value is a UI parameter, e.g. it is used to set the
            text on the button. Changing the UI causes the script to fail.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputButtonElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputButtonElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputCheckboxElement">
            <summary>
            Defines a checkbox element on a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputCheckboxElement.checked">
            <summary>
            Sets or retrieves the state of the check box or radio button.
            </summary>
            <remarks>
            Check boxes that are not selected do not return their values when the form is submitted. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputCheckboxElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputCheckboxElement.value">
            <summary>
            Sets or retrieves the default or selected value of the control.
            </summary>
            <remarks>
            The default value is "on" which is send, if no value is given.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputCheckboxElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputElement">
            <summary>
            The INPUT element defines a form control for the user to enter input.
            </summary>
            <remarks>
            In NetRix there are some specialised classes representing the various flavors of the INPUT tag, set by the TYPE attribute. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputElement.disabled">
            <summary>
            Disables the element.
            </summary>
            <remarks>
            The most elements are drawn grayed or with a gray shadow to inform the user that the element is disabled.
            Field elements do not except the focus and do not display the caret.
            <para>
            In HTML the element is disables if the attribute exists and it is enabled if it doesn't exist. The parameter assigned
            to the attribute is useless.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
            <remarks>
            When submitting a form, use the name property to bind the value of the control. The name is not the value displayed for the input type=button, input type=reset, and input type=submit input types. The internally stored value, not the displayed value, is the one submitted with the form.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputElement.ScriptOnChange">
            <summary>
            The handler which is called if the onChange event appears.
            </summary>
            <remarks>
            This should be the name of a JSCript, JavaScript or VBScript function or any valid inline code in the
            globally selected client site scripting language.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputElement.value">
            <summary>
            Sets or retrieves the default or selected value of the control.
            </summary>
            <remarks>
            The purpose of the value property depends on the type of control as described in the following table.
            <list type="table">
            <listheader><term>Type</term><term>Description</term></listheader>
            <item><term>checkbox</term><term>The selected value. The control submits this value only if the user has selected the control. Otherwise, the control submits no value.</term></item>
            <item><term>file</term><term>The value, a file name, typed by the user into the control. Unlike other controls, this value is read-only.</term></item>
            <item><term>hidden</term><term>The value that the control submits when the form is submitted.</term></item>
            <item><term>option (tag)</term><term>The selected value. The containing list box control submits this value only if the user has selected the option.</term></item>
            <item><term>password</term><term>The default value. The control displays this value when it is first created and when the user clicks the reset button.</term></item>
            <item><term>radio</term><term>The selected value. The control submits this value only if the user has selected the control. Otherwise, the control submits no value.</term></item>
            <item><term>reset</term><term>The button label. If not set, the label defaults to Reset.</term></item>
            <item><term>submit</term><term>The button label. If not set, the label defaults to Submit.</term></item>
            <item><term>text</term><term>The default value. The control displays this value when it is first created and when the user clicks the reset button.</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputElement.#ctor(System.String,GuruComponents.Netrix.HtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="tag">Tag name including type attribute to create specific input element.</param>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputElement.ToString">
            <summary>
            Special representation of the string format.
            </summary>
            <returns>Returns the description of the element in the format &lt;input type="type"&gt;.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputFileElement">
            <summary>
            Defines a file upload element in a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputFileElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputFileElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputHiddenElement">
            <summary>
            Defines a hidden element in a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property. Hidden elements are used to send additional values to the server without any
            user interaction.
            <para>
            During design time the hidden fields are lay out as textboxes. During run time they remain invisible.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputHiddenElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputHiddenElement.id">
            <summary>
            ID of the element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputHiddenElement.name">
            <summary>
            NAME of the element, used to access value on server.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputHiddenElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputImageElement">
            <summary>
            Defines a image element in a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.alt">
            <summary>
            Use as alt="text" attribute.
            </summary>
            <remarks>
            For user agents that cannot display images, forms, or applets, this 
            attribute specifies alternate text. The language of the alternate text is specified by the lang attribute. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.hSpace">
            <summary>
            HSPACE sets the horizontal space between the image and surrounding text. 
            </summary>
            <remarks>
            HSPACE has the most pronounced effect when it is used in conjunction with 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.vSpace">vSpace</see> to right or left 
            align the image.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.vSpace"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.src">
            <summary>
            SRC tells where to get the picture that should be put on the page. SRC is the one required attribute.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.vSpace">
            <summary>
            VSPACE sets the vertical space between the image and surrounding text.
            </summary>
            <remarks>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.hSpace"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.border">
            <summary>
            BORDER is most useful for removing the visible border around images which are inside links.
            </summary>
            <remarks>
            By default images inside lunks have visible borders around them to indicate that they are links. However, user generally recognize these "link moments" and the border merely detracts from the appearance of the page.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.height">
            <summary>
            WIDTH and HEIGHT tell the browser the dimensions of the image.
            </summary>
            <remarks>
            The browser can use this information to reserve space for the image as it contructs the page, even though the image has not downloaded yet.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.width">
            <summary>
            WIDTH and HEIGHT tell the browser the dimensions of the image.
            </summary>
            <remarks>
            The browser can use this information to reserve space for the image as it contructs the page, even though the image has not downloaded yet.
            <para>
            Set the value to -1 to remove the attribute. The default value for the UI defaults to 30. This is simple for user support. Removing the attribute
            will not set the value to 30 nor the element will inherit that behavior.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputImageElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputPasswordElement">
            <summary>
            Defines a password text element in a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputPasswordElement.value">
            <summary>
            The VALUE attributes determine the value sent to the server.
            </summary>
            <remarks>
            The value cannot be set due to security restricition. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputPasswordElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputPasswordElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputRadioElement">
            <summary>
            Defines a radio button (option) element on a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputRadioElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputRadioElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputResetElement">
            <summary>
            Defines a reset button element in a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputResetElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputResetElement.value">
            <summary>
            The VALUE attributes determine the text on the button.
            </summary>
            <remarks>
            It is recommended to not use the value on the server side to control the behavior of
            a script. In case of a button the value is a UI parameter, e.g. it is used to set the
            text on the button. Changing the UI causes the script to fail.
            <para>
            The button does not force the sending of the form. Reset operation is done on the client side only.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputResetElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputSubmitElement">
            <summary>
            Defines a submit button element in a form.
            </summary>
            <remarks>
            This is one of the classes related to the INPUT element. The type of element ist fixed
            by the type property.
            <para>
            Once the button is hit by the user the form is sent to the server.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.FormElement">FormElement (FORM)</seealso>
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputSubmitElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputSubmitElement.value">
            <summary>
            The VALUE attributes determine the value sent to the server.
            </summary>
            <remarks>
            It is recommended to not use the value on the server side to control the behavior of
            a script. In case of a button the value is a UI parameter, e.g. it is used to set the
            text on the button. Changing the UI causes the script to fail.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputSubmitElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InputTextElement">
            <summary>
            Defines the start of an input field where the user can enter data.
            </summary>
            <remarks>
            Use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.LabelElement"/> element to define a label to a form control.
            You can also group fields with the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.FieldSetElement"/> element.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputTextElement.type">
            <summary>
            Gets the type of input element.
            </summary>
            <remarks>
            This property is for information only and cannot be changed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputTextElement.maxLength">
            <summary>
            Defines the maximum number of characters allowed in a text field.
            </summary>
            <remarks>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.InputTextElement.size"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputTextElement.readOnly">
            <summary>
            Indicates that the value of this field cannot be modified.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InputTextElement.size">
            <summary>
            Defines the size of the input element (e.g. the number of chars).
            </summary>
            <remarks>
            This refers to the width, in standard font chars. It does not limit the number of chars which the
            user could enter.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.InputTextElement.maxLength"/>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InputTextElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.IOptionElement">
            <summary>
            This interface supports the NetRix infrastructure und should not be used in user code.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.LabelElement">
            <summary>
            The LABEL element associates a label with a form control.
            </summary>
            <remarks>
            By associating labels with form controls, authors give important hints to users of speech browsers while also allowing visual browsers to duplicate common GUI features (e.g., the ability to click on a text label to select a radio button or checkbox).
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LabelElement.accessKey">
            <summary>
            The ACCESSKEY attribute specifies a single Unicode character as a shortcut key for giving focus to the LABEL.
            </summary>
            <remarks>
            If the assigned key is hit the control passes the focus on to the associated form control. Entities (e.g. &amp;eacute;) may be used as the ACCESSKEY value.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LabelElement.for">
            <summary>
            The FOR attribute explicitly specifies the control associated with the LABEL.
            </summary>
            <remarks>
            The value of the FOR attribute must match the value of the associated form control's ID attribute. In the absence of the FOR attribute, the LABEL must contain the associated form control. This method of implicit association is convenient in many cases, but not an option when the form control and its label are in different table cells, paragraphs, or divisions.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.LabelElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.LegendElement">
            <summary>
            The LEGEND element defines a caption for form controls grouped by the FIELDSET element.
            </summary>
            <remarks>
            The LEGEND element must be at the start of a FIELDSET, before any other elements.
            <para>While the LEGEND element is not widely supported by current browsers, it can still be used safely 
            if a block-level element immediately follows the LEGEND. Combined with careful use of FIELDSET, this will 
            cause non-supporting browsers to render the caption as its own paragraph. Elements such as STRONG, B, and BIG 
            could also be used to help express the meaning of LEGEND to non-supporting browsers.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.LegendElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ListBoxElement">
            <summary>
            A specialized version of the SELECT element.
            </summary>
            <remarks>
            This class realizes the SELECT element which is rendered as a list instead of a drop down box.
            The default value of the number of elements visible is 3.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ListBoxElement.size">
            <summary>
            The SIZE attribute. Required.
            </summary>
            <remarks>
            If the value is bigger than 1 the box is rendered as a list. The value defaults to 3.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ListBoxElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement._options">
            <summary>
            This field stores the option elements which are part of this option group.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.Options">
            <summary>
            Gets or sets the options within this OPTGROUP.
            </summary>
            <remarks>
            This property supports the usage of collections for the options (OPTION elements). The intention is to support the
            NetRix UI (not applicable in the Light version).
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.OptionElement">OptionElement (OPTION)</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.SelectElement">SelectElement (SELECT)</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.label">
            <summary>
            The LABEL attribute specifies the group label presented to the user. Required.
            </summary>
            <remarks>
            The LABEL should describe the group of choices available through the OPTGROUP's OPTIONs. Each OPTION generally uses a LABEL attribute as well to provide a shortened label that, together with the OPTGROUP's LABEL, gives a complete description of the option. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.text">
            <summary>
            DO NOT USE!
            </summary>
            <remarks>
            This non browsable property is only implemented to allow the usage of the interface <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IOptionElement"/>
            which is used to group OPTION and OPTGROUP in the same collection.
            <para>
            <b>Warning:</b> This property is for the NetRix infrastructure only. Please do NEVER call from own code.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.value">
            <summary>
            DO NOT USE!
            </summary>
            <remarks>
            This non browsable property is only implemented to allow the usage of the interface <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IOptionElement"/>
            which is used to group OPTION and OPTGROUP in the same collection.
            <para>
            <b>Warning:</b> This property is for the NetRix infrastructure only. Please do NEVER call from own code.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.selected">
            <summary>
            DO NOT USE!
            </summary>
            <remarks>
            This non browsable property is only implemented to allow the usage of the interface <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IOptionElement"/>
            which is used to group OPTION and OPTGROUP in the same collection.
            <para>
            <b>Warning:</b> This property is for the NetRix infrastructure only. Please do NEVER call from own code.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.disabled">
            <summary>
            Disables the element.
            </summary>
            <remarks>
            The most elements are drawn grayed or with a gray shadow to inform the user that the element is disabled.
            Field elements do not except the focus and do not display the caret.
            <para>
            In HTML the element is disables if the attribute exists and it is enabled if it doesn't exist. The parameter assigned
            to the attribute is useless.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.#ctor">
            <summary>
            For use with the collection editor.
            </summary>
            <remarks>
            Callers should be use the collections to add elements
            instead of creating them directly under normal circumstances.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement.#ctor(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            For internal use only. Please do not call from own code.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.OptionElement">
            <summary>
            The OPTION element defines a menu choice within a SELECT menu.
            </summary>
            <remarks>
            The value of the option, sent with a submitted form, is specified with the VALUE attribute. In the absence of a VALUE attribute, the value is the content of the OPTION element.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.SelectElement">SelectElement (SELECT)</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptionElement.label">
            <summary>
            The LABEL attribute specifies the option label presented to the user.
            </summary>
            <remarks>
            This defaults to the content of the OPTION element, but the LABEL attribute allows authors to more easily use OPTGROUP without sacrificing compatibility with browsers that do not support option groups.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptionElement.selected">
            <summary>
            The boolean SELECTED attribute defines the OPTION to be initially selected. 
            </summary>
            <remarks>
            A SELECT element can only have one OPTION selected at any time unless the MULTIPLE attribute is present on SELECT.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OptionElement.disabled">
            <summary>
            Disables the element.
            </summary>
            <remarks>
            The most elements are drawn grayed or with a gray shadow to inform the user that the element is disabled.
            Field elements do not except the focus and do not display the caret.
            <para>
            In HTML the element is disables if the attribute exists and it is enabled if it doesn't exist. The parameter assigned
            to the attribute is useless.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.OptionElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.OptionElement.#ctor(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            For internal use only. Please do not call from own code.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.OptionElementsCollection">
            <summary>
            Stores a collection of option elements.
            </summary>
            <remarks>
            This class stores OPTION and OPTGROUP elements in any combination.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OptionElementsCollection.OptionElementType">
            <summary>
            Provide one possible type to the propertygrid's collection editor to help them building elements
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OptionElementsCollection.OptGroupElementType">
            <summary>
            Provide one possible type to the propertygrid's collection editor to help them building elements
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.OptionElementsCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.OptionElementsCollection.OnClearHandler">
            <summary>
            Fired if the collection editor starts a new sequence.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.OptionOnlyElementsCollection">
            <summary>
            This class provides a collection of options that are part of a option group.
            </summary>
            <remarks>
            The constructor
            will create the list based on the given element which is expected to be an OPTGROUP element.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.OptionOnlyElementsCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.OptionOnlyElementsCollection.OnClearHandler">
            <summary>
            Fired if the collection editor starts a new sequence
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.SelectElement">
            <summary>
            The SELECT element defines a form control for the selection of options.
            </summary>
            <remarks>
            While SELECT is most useful within a FORM, HTML 4.0 allows SELECT in any block-level or inline element other than BUTTON. However, Netscape Navigator will not display any SELECT elements outside of a FORM.
            <para>
            The SELECT element contains one or more OPTGROUP or OPTION elements to provide a menu of choices for the user. Each choice is contained within an OPTION element. Choices can be grouped logically through the OPTGROUP element. SELECT's NAME attribute provides the key sent to the server with the value of the selected option.
            </para>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.OptionElement">OptionElement (OPTION)</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.OptGroupElement">OptGroupElement (OPTGROUP)</seealso>
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.SelectElement._options">
            <summary>
            This field stores the option elements which are part of the select box.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectElement.Options">
            <summary>
            Gets or sets a collection of OPTION or OPTGROUP elements.
            </summary>
            <remarks>
            Any OPTGROUP element is rendered as bold and italic cannot be selected by the user. This is an
            HTML 4 enhancement and not widely supported by elder browsers.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectElement.multiple">
            <summary>
            The boolean MULTIPLE attribute allows the user to select multiple options.
            </summary>
            <remarks>
            By default, the user can only select one option. The boolean MULTIPLE attribute allows the user to select multiple options, which are submitted as separate name/value pairs. 
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.SelectElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TextAreaElement">
            <summary>
            The TEXTAREA element defines a form control for the user to enter multi-line text input.
            </summary>
            <remarks>
            TEXTAREA is most useful within a FORM, HTML 4.0 allows TEXTAREA in any block-level or inline element other than BUTTON. However, 
            Netscape Navigator will not display any TEXTAREA elements outside of a FORM.
            <para>
            The initial value of the TEXTAREA is provided as the content of the element and must not contain any HTML tags. When a form is submitted, 
            the current value of any TEXTAREA element within the FORM is sent to the server as a name/value pair. The TEXTAREA element's NAME attribute provides the name used.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextAreaElement.cols">
            <summary>
            The COLS attribute specify the number of visible columns. Required.
            </summary>
            <remarks>
            Set the value to 0 (zero) to remove the attribute. Remember that the attribute is still required if no styles are used.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextAreaElement.name">
            <summary>
            The NAME attribute. Recommended.
            </summary>
            <remarks>
            The name attribute is used to transfer the entered data to the server. A server side script will access the data
            using that name. The name should be unique within the form.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextAreaElement.readOnly">
            <summary>
            Set the element as read-only.
            </summary>
            <remarks>
            The boolean READONLY attribute, new in HTML 4.0 and poorly supported by current browsers, prevents the user from editing the content of the TEXTAREA. 
            Read-only elements are still submitted with the form.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TextAreaElement.rows">
            <summary>
            The ROWS attribute specify the number of visible rows. Required.
            </summary>
            <remarks>
            Set the value to 0 (zero) to remove the attribute. Remember that the attribute is still required if no styles are used.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TextAreaElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.FormMethod">
            <summary>
            The method used to send the form.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.FormMethod.Post">
            <summary>
            HTTP-POST, the content is transferred as part of the HTTP body (default).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.FormMethod.Get">
            <summary>
            HTTP-GET, the content is transferred as part of the URL.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.FrameElement">
            <summary>
            The FRAME element defines a frame--a rectangular subspace within a Frameset document.
            </summary>
            <remarks>
            Each FRAME must be contained within a FRAMESET that defines the dimensions of the frame.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameElement.src">
            <summary>
            The SRC attribute provides the URI of the frame's content.
            </summary>
            <remarks>
            typically an HTML document. If the frame's content is an image, video, or similar object, and 
            if the object cannot be described adequately using the TITLE attribute of FRAME, then authors should 
            use the LONGDESC attribute to provide the URI of a full HTML description of the object.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameElement.frameBorder">
            <summary>
            The FRAMEBORDER attribute specifies whether or not the frame has a visible border.
            </summary>
            <remarks>
            The default value, 1, tells the browser to draw a border between the frame and all adjoining frames. The value 0 indicates 
            that no border should be drawn, though borders from other frames will override this.
            The NetRix property will transform the boolean value into 1 or 0 accordingly to this definition.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameElement.NoResize">
            <summary>
            The boolean NORESIZE attribute prevents the user from resizing the frame.
            </summary>
            <remarks>
            This attribute should never be used in a user-friendly Web site.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameElement.Scrolling">
            <summary>
            The SCROLLING attribute specifies whether scrollbars are provided for the frame.
            </summary>
            <remarks>
            The default value, auto, generates scrollbars only when necessary. The value yes gives scrollbars 
            at all times, and the value no suppresses scrollbars--even when they are needed to see all the 
            content. The value no should never be used.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameElement.marginHeight">
            <summary>
            The MARGINHEIGHT attribute defines the number of pixels to use as the top/bottom margins within the frame.
            </summary>
            <remarks> The value must be non-negative.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameElement.marginWidth">
            <summary>
            The MARGINWIDTH attribute defines the number of pixels to use as the left/right margins within the frame. 
            </summary>
            <remarks>The value must be non-negative.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameElement.Name">
            <summary>
            The NAME attribute gives a name to the frame for use with the TARGET attribute.
            </summary>
            <remarks>
             The TARGET attribute is used in the A, AREA, BASE, FORM, and LINK elements. The NAME 
             attribute value must begin with a character in the range A-Z or a-z.
             <para>
             Cannot be set from within the propertygrid due to synchronization problems with the
             underlying frame management. To rename the host application must refresh the collection
             of frames within the HtmlFrameSet class.
             </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.FrameElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.FrameSetElement">
            <summary>
            The FRAMESET element is a frame container for dividing a window into rectangular subspaces called frames.
            </summary>
            <remarks>
            In a Frameset document, the outermost FRAMESET element takes the place of BODY and immediately follows the HEAD.
            <para>The FRAMESET element contains one or more FRAMESET or FRAME elements, along with an optional NOFRAMES element to provide alternate content for browsers that do not support frames or have frames disabled. A meaningful NOFRAMES element should always be provided and should at the very least contain links to the main frame or frames.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameSetElement.Rows">
            <summary>
            The ROWS attribute defines the dimensions of each frame in the set.
            </summary>
            <remarks>
            The attribute takes a comma-separated list of lengths, specified in pixels, as a percentage, 
            or as a relative length. A relative length is expressed as i* where i is an integer. 
            For example, a frameset defined with ROWS="3*,*" (* is equivalent to 1*) will have its 
            first row allotted three times the height of the second row.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.FrameSetElement.Cols">
            <summary>
            The COLS attribute defines the dimensions of each frame in the set.
            </summary>
            <remarks>
            The attribute takes a comma-separated list of lengths, specified in pixels, as a percentage, 
            or as a relative length. A relative length is expressed as i* where i is an integer. 
            For example, a frameset defined with COLS="3*,*" (* is equivalent to 1*) will have its 
            first column allotted three times the height of the second column.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.FrameSetElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.IFrameElement">
            <summary>
            The IFRAME element defines an inline frame for the inclusion of external objects.
            </summary>
            <remarks>
            <para>
            IFRAME provides a subset of the functionality of OBJECT; the only advantage to IFRAME is that an inline frame can act as a target for other links. OBJECT is more widely supported than IFRAME, and, unlike IFRAME, OBJECT is included in HTML 4.0 Strict.
            </para><para>
            The content of the IFRAME element is used as an alternative for browsers that are not configured to show or do not support inline frames. The content may consist of inline or block-level elements, though any block-level elements must be allowed inside the containing element of IFRAME. For example, an IFRAME within an H1 cannot contain an H2, but an IFRAME within a DIV can contain any block-level elements.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.IFrameElement.src">
            <summary>
            The source of the content. Required.
            </summary>
            <remarks>
            IFRAME's SRC attribute provides the location of the frame content - typically a HTML document. The path can target local resources which
            is may be irritating to the user, because he sees the content of his local dics in the browser window. This is not a security hole, indeed, because the
            content cannot be used from within a server driven application.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.IFrameElement.name">
            <summary>
            The name of the frame. Optional.
            </summary>
            <remarks>
            The optional NAME attribute specifies the name of the inline frame, allowing links to target the frame.
            <para>
            Set this property to <see cref="F:System.String.Empty"/> to remove it.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.IFrameElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.IFrameElement.frameBorder">
            <summary>
            The FRAMEBORDER attribute specifies whether or not a border should be drawn. 
            </summary>
            <remarks>
            The default value of 1 results in a border while a value of 0 suppresses the border. 
            Style sheets allow greater flexibility in suggesting the border presentation. The boolean value used by the property will
            be converted into 0 (zero) or 1 (one) if HTML is written.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.IFrameElement.marginHeight">
            <summary>
            The MARGINHEIGHT attribute define the number of pixels to use as the margins.
            </summary>
            <remarks>
            The MARGINWIDTH and MARGINHEIGHT attributes define the number of pixels to use as the left/right margins and top/bottom margins, 
            respectively, within the inline frame. The value must be greater than one pixel.
            <para>
            To remove the attribute set the value to 0 (zero). It is not allowed to asign values less than 0 (zero).
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.IFrameElement.marginWidth">
            <summary>
            The MARGINWIDTH attribute define the number of pixels to use as the margins.
            </summary>
            <remarks>
            The MARGINWIDTH and MARGINHEIGHT attributes define the number of pixels to use as the left/right margins and top/bottom margins, 
            respectively, within the inline frame. The value must be greater than one pixel.
            <para>
            To remove the attribute set the value to 0 (zero). It is not allowed to asign values less than 0 (zero).
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.IFrameElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.NoframeElement">
            <summary>
            The NOFRAMES element contains content that should only be rendered when frames are not displayed.
            </summary>
            <remarks>
            NOFRAMES is typically used in a Frameset document to provide alternate content for browsers that do not support frames or have frames disabled.
            <para>
            When used within a FRAMESET, NOFRAMES must contain a BODY element. There must not be any NOFRAMES elements contained within this BODY element.
            </para>
            <para>A meaningful NOFRAMES element should always be provided in a Frameset document and should at the very least contain links to the main frame or frames. NOFRAMES should not contain a message telling the user to upgrade his or her browser. Some browsers support frames but allow the user to disable them.
            </para>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.BodyElement">BodyElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.FrameElement">FrameElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.NoframeElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BaseElement">
            <summary>
            &lt;BASE ...&gt; tells the browser to pretend that the current page is located at some URL other than where the browser found it. 
            </summary>
            <remarks>
            Any relative reference will be calculated from the URL given by &lt;BASE HREF="..."> instead of the actual URL. &lt;BASE ...> goes in the &lt;HEAD> section. 
            <para>
            Generally it's best to avoid using &lt;BASE ...>. It usually just restricts the ability to move a set of web pages from one location to another 
            (say, from your computer where you are developing them to the server where they publicly reside). 
            However, &lt;BASE ...> can come in handy in development situations where the final version of the page will make relative references 
            to resources that aren't on the development machine. 
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BaseElement.href">
            <summary>
            The default address for hypertext links.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BaseElement.target">
            <!-- Für folgende Include-Kennung wurden keine übereinstimmenden Elemente gefunden. --><include file="DocumentorIncludes.xml" path="WebEditing/Elements[@name=&quot;TargetAttribute&quot;]" />
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BaseElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.BgSoundElement">
            <summary>
            The &lt;BGSOUND&gt; tag allows a sound file (WAV, AU or MID) to be played when a page is opened.
            </summary>
            <remarks>
            Sometimes you will visit a web site and suddenly your speakers will start spitting out sounds.  I don't know about you, but the first thing that I do when this happens is curse silently. Then I take a quick glance (a second or two) and decide if I really need to be visiting this web site. One of two things will happen at this point. I will find a button to turn off the sound and stay or I will surf to another site. 
            Every new webmaster seems to do it at least once. Add background sound to their web site. And, you know, there are times when it is appropriate. A musicians site, for example, might be the right place. Or a site all about MIDI files might also have a background sound. I ran across a MIDI site once that played a random, different MIDI each time a page was loaded. That was cool, but only because that was what the site was about.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BgSoundElement.src">
            <summary>
            SRC provides the name of the sound.
            </summary>
            <remarks>The name of the sound file to be played.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BgSoundElement.loop">
            <summary>
            The number of times the sound is played.
            </summary>
            <remarks>
            A value of -1 or INFINITE will cause the sound to be played forever.
            <para>To support the value INFINITE the properties datatype is <c>string</c>. The number must anyway given as
            a numeric expression. Otherwise an exception is thrown. If the access of this property uses the propertygrid,
            the exception will handled within the propertygrid and a messagebox appears instead.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the value does not represent a number or the string 'INFINITE'.</exception>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.BgSoundElement.autostart">
            <summary>
            AUTOSTART let the sound played immediately.
            </summary>
            <remarks>Value is TRUE to being playing the music immediately upon page load. TRUE is the default value.</remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.BgSoundElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.HeadElement">
            <summary>
            &lt;HEAD ...&gt; is the head element for any HTML page. 
            </summary>
            <remarks>
            Within HTML, the document has two sections to it: HEAD and BODY. HEAD is like the cover page of the document. 
            Just as the cover page of a book contains information about the book (such as the title), the HEAD section contains 
            information about the document. This information is communicated through the TITLE tag (which is required) and the 
            LINK and META tags.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.NoScriptElement">
            <summary>
            The SCRIPT element includes a client-side script in the document.
            </summary>
            <remarks>
            Client-side scripts allow greater interactivity in a document by responding to user events. For example, a script 
            could be used to check the user's form input prior to submission to provide immediate notice of any errors by the user.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.NoScriptElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.IHtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.IHtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TitleElement">
            <summary>
            &lt;TITLE ...&gt; gives the page a unique name. 
            </summary>
            <remarks>
            Use <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.InnerText"/> to check the inner part of title.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.HtmlElement">
            <summary>
            &lt;HTML ...&gt; is the root element for any HTML page. 
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.LinkElement">
            <summary>
            The LINK element defines document relationships. Any number of LINK elements may be contained in the HEAD of a document.
            </summary>
            <remarks>
            The REL and REV attributes define the nature of the relationship between the documents and the linked resource. REL defines a link relationship from the current document to the linked resource while REV defines a relationship in the opposite direction. For example,
            &lt;LINK REL=Glossary HREF="foo.html"&gt; indicates that foo.html is a glossary for the current document while &lt;LINK REV=Subsection HREF="bar.html"&gt; indicates that the current document is a subsection of bar.html. The value of the REL and REV attributes is a space-separated list of link types.
            <para>
            Commonly used relationships include the next or previous document in a sequence, the starting page in a collection of documents, a document with copyright information, and information about the author. A document could define these relationships as follows:
            
            &lt;LINK REL=Prev HREF="base.html" TITLE="BASE - Document Base URI"&gt;
            &lt;LINK REL=Next HREF="meta.html" TITLE="META - Metadata"&gt;
            &lt;LINK REL=Start HREF="../" TITLE="HTML 4.0 Reference"&gt;
            &lt;LINK REL=Copyright HREF="/copyright.html" TITLE="Copyright Notice"&gt;
            &lt;LINK REV=Made HREF="mailto:joerg@krause.net" TITLE="NetRix Component"&gt;
            </para>
            <para>
            While the value of REL and REV is case-insensitive, the Lynx browser renders the relationship exactly as given by the author. Authors should therefore be consistent in their case, and may wish to capitalize the first letter while using lowercase for the rest. 
            Authors can also use the LINK element to apply an external style sheet. REL=StyleSheet specifies a persistent or preferred style while REL="Alternate StyleSheet" defines an alternate style. A persistent style is one that is always applied when style sheets are enabled. The absence of the TITLE attribute indicates a persistent style.
            A preferred style is one that is automatically applied. The combination of REL=StyleSheet and a TITLE attribute specifies a preferred style. Authors cannot specify more than one preferred style.
            An alternate style is indicated by REL="Alternate StyleSheet". The user could choose to replace the preferred style sheet with an alternate one, though current browsers generally lack the ability to choose alternate styles.
            A single style may also be given through multiple style sheets:
            
            &lt;LINK REL=StyleSheet HREF="basics.css" TITLE="Contemporary" TYPE="text/css"&gt;
            &lt;LINK REL=StyleSheet HREF="tables.css" TITLE="Contemporary" TYPE="text/css"&gt;
            &lt;LINK REL=StyleSheet HREF="forms.css" TITLE="Contemporary" TYPE="text/css"&gt;
            </para>
            <para>
            In this example, three style sheets are combined into one "Contemporary" style that is applied as a preferred style sheet. To combine multiple style sheets into a single style, each style sheet's LINK must use the same TITLE.
            LINK's MEDIA attribute specifies the media for which the linked resource is designed. With REL=StyleSheet, this allows authors to restrict a style sheet to certain output devices, such as printers or aural browsers. The attribute's value is a comma-separated list of media descriptors. The following media descriptors are defined in HTML 4.0 and are case-sensitive:
            <list type="bullet">
            <item>screen (the default), for non-paged computer screens; </item>
            <item>tty, for fixed-pitch character grid displays (such as the display used by Lynx); </item>
            <item>tv, for television-type devices with low resolution and limited scrollability; </item>
            <item>projection, for projectors; </item>
            <item>handheld, for handheld devices (characterized by a small, monochrome display and limited bandwidth); </item>
            <item>print, for output to a printer; </item>
            <item>braille, for braille tactile feedback devices; </item>
            <item>aural, for speech synthesizers; </item>
            <item>all, for all devices. </item>
            </list>
            </para>
            Netscape Navigator 4.x incorrectly ignores any style sheet linked with a MEDIA value other than screen. For example, MEDIA="screen, projection" will cause the style sheet to be ignored by Navigator 4.x, even if the presentation device is a computer screen. Navigator 4.x also ignores style sheets declared with MEDIA=all.
            The optional HREFLANG and CHARSET attributes of LINK give the language and character encoding, respectively, of the link. The language should be specified according to RFC 1766; examples include en for English, en-US for American English, and ja for Japanese. Examples of character encodings include ISO-8859-1, SHIFT_JIS, and UTF-8.
            The Alternate link relationship defines an alternate version of the document. Translations of a page can be identified by using REL=Alternate along with the HREFLANG attribute. Versions of the page tailored for specific media can be provided by combining REL=Alternate with the MEDIA attribute. Some examples follow:
            Note that the LANG and DIR attributes apply to the text of the TITLE attribute, not to the content of the link.
            The TARGET attribute is used with frames to specify in which frame the link should be rendered. If no frame with such a name exists, the link is rendered in a new window unless overridden by the user. Special frame names begin with an underscore:
            In HTML 4.0, the TARGET attribute value is case-insensitive, so that _top and _TOP both have the same meaning. However, most browsers treat the TARGET attribute value as case-sensitive and do not recognize _TOP as having the special meaning of _top.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.EffectiveStyle">
            <summary>
            This member overwrites the existings member to correct the PropertyGrid display.
            </summary>
            <remarks>
            This property cannot be used in user code. It supports the NetRix infrastructure only.
            </remarks>
            <exception cref="T:System.NotImplementedException">Always fired on call.</exception>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.charset">
            <summary>
            This attribute specifies the character encoding of the resource designated by the link.
            </summary>
            <remarks>
            Find more information about character sets in 
            <a href="http://www.w3.org/TR/html401/charset.html">Charset Definition</a> (External).
            <para>Not supported in HTML5.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.href">
            <summary>
            This attribute specifies the location of a Web resource, thus defining a link between the current element (the source anchor) and the destination anchor defined by this attribute.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.media">
            <summary>
            Specifies on what type of device the linked document or resource is optimized for.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.rel">
            <summary>
            This attribute describes the relationship from the current document to the anchor specified by the href attribute. 
            </summary>
            <remarks>
            The value of this attribute is a space-separated list of link types. These are some typical values:
            <list type="bullet">
                <item>alternate</item>
                <item>author</item>
                <item>help</item>
                <item>icon</item>
                <item>licence</item>
                <item>next</item>
                <item>pingback</item>
                <item>prefetch</item>
                <item>prev</item>
                <item>search</item>
                <item>sidebar</item>
                <item>stylesheet</item>
                <item>tag</item>
            </list>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.rev">
            <summary>
            This attribute is used to describe a reverse link from the anchor specified by the href attribute to the current document.
            </summary>
            <remarks>
            The value of this attribute is a space-separated list of link types.
            <para>
            Not supported in HTML 5.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.target">
            <!-- Für folgende Include-Kennung wurden keine übereinstimmenden Elemente gefunden. --><include file="DocumentorIncludes.xml" path="WebEditing/Elements[@name=&quot;TargetAttribute&quot;]" />
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.title">
            <summary>
            Gets or sets the title attribute for this element.
            </summary>
            <remarks>
            Visible elements may render the title as a tooltip.
            Invisible elements may not render, but use internally to support design time environments.
            Some elements may neither render nor use but still accept the attribute.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.type">
            <summary>
            This attribute gives an advisory hint as to the content type of the content available at the link target address.
            </summary>
            <remarks>
            It allows user agents to opt to use a fallback mechanism rather than fetch the content if they are advised that they will get content in a content type they do not support. 
            Authors who use this attribute take responsibility to manage the risk that it may become inconsistent with the content available at the link target address. 
            For the current list of registered content types, please consult MIMETYPES section. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.StyleSheetContent">
            <summary>
            Get the content of a linked stylesheet file, or <c>null</c> if there is no linked stylesheet.
            </summary>
            <remarks>
            Version hint: This property is new in NetRix Professional 1.7. This property is not avaialable
            in Advanced or Standard version.
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.LinkElement.StylesheetContent">
            <summary>
            Textual content of the style sheet file, if link is related to a css file.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.LinkElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.LinkElement.#ctor">
            <summary>
            Ctor for PropertyGrid support. Do not call directly.
            </summary>
            <remarks>
            This ctor supports the NetRix infrastructure is not intendent to be called directly.
            <para>By default, creates a linked stylesheet element.</para>
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia">
            <summary>
            Alle Media values acceptable within the media attribute of link tag.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.All">
            <summary>
            All media allowed.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.Screen">
            <summary>
            Relevant for screen.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.TTY">
            <summary>
            Teletype terminals. Deprecated.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.TV">
            <summary>
            For usage on TV, Set-top boxes.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.Projection">
            <summary>
            For projection.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.HandHeld">
            <summary>
            For handhelds (pocket PC).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.Print">
            <summary>
            For printing.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.Braille">
            <summary>
            For output to Braille devices.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia.Aural">
            <summary>
            For aural output.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.MetaElement">
            <summary>
            The META element provides meta-information about your page, such as descriptions and keywords for search 
            engines and refresh rates.
            </summary>
            <remarks>
            The tag always goes inside the head element.
            <para>
            Metadata is always passed as name/value pairs.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MetaElement.EffectiveStyle">
            <summary>
            This member overwrites the existings member to correct the PropertyGrid display.
            </summary>
            <remarks>
            This property cannot be used in user code. It supports the NetRix infrastructure only.
            </remarks>
            <exception cref="T:System.NotImplementedException">Always fired on call.</exception>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MetaElement.Content">
            <summary>
            Defines meta information to be associated with http-equiv or name.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.MetaElement.ToString">
            <summary>
            Represents the element as string.
            </summary>
            <returns>Returns the element as HTML string.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.MetaElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.MetaElement.#ctor">
            <summary>
            Ctor for PropertyGrid support. Do not call directly.
            </summary>
            <remarks>
            This ctor supports the NetRix infrastructure is not intendent to be called directly.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ScriptElement">
            <summary>
            The SCRIPT element includes a client-side script in the document.
            </summary>
            <remarks>
            Client-side scripts allow greater interactivity in a document by responding to user events. For example, a script 
            could be used to check the user's form input prior to submission to provide immediate notice of any errors by the user.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.InnerHtml">
            <summary>
            The Script content as HTML.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.InnerText">
            <summary>
            The script content as Text.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.charset">
            <summary>
            The CHARSET attribute gives the character encoding. Optional.
            </summary>
            <remarks>
            The character encoding of the external script is typically a string like ISO-8859-1. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.src">
            <summary>
            The SRC attribute specifies an external script. Optional.
            </summary>
            <remarks>
            The SRC attribute allows authors to reuse code by specifying an external script.
            When the SRC attribute is used, the embedded script is ignored.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.language">
            <summary>
            LANGUAGE determines the script language used.
            </summary>
            <remarks>
            Browsers will ignore scripts with LANGUAGE values that they do not support. For example, Netscape Navigator 3.0 will execute scripts with LANGUAGE="JavaScript" or LANGUAGE="JavaScript1.1" but will ignore scripts with LANGUAGE="JavaScript1.2" or LANGUAGE="VBScript".
            <para>
            In the absence of the LANGUAGE attribute, browsers that do not support the TYPE attribute typically assume that the language is the highest version of JavaScript supported by the browser. Thus authors may safely omit the deprecated LANGUAGE attribute when using JavaScript.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.type">
            <summary>
            The TYPE attribute of SCRIPT specifies the media type. Required.
            </summary>
            <remarks>
            The required TYPE attribute of SCRIPT specifies the media type of the scripting language, e.g., text/javascript.
            However, many browsers only support the deprecated LANGUAGE attribute, which specifies the language name.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.ScriptContent">
            <summary>
            The content of the embedded script.
            </summary>
            <remarks>
            This is used to access the content between the SCRIPT tags. It is recommended to create an
            editor for scripting which supports external and internal script blocks in the same way.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ScriptElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.IHtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.IHtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.StyleElement">
            <summary>
            The STYLE element embeds a style sheet in the document.
            </summary>
            <remarks>
            Any number of STYLE elements may be contained in the HEAD of a document.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyleElement.EffectiveStyle">
            <summary>
            This member overwrites the existings member to correct the PropertyGrid display.
            </summary>
            <remarks>
            This property cannot be used in user code. It supports the NetRix infrastructure only.
            </remarks>
            <exception cref="T:System.NotImplementedException">Always fired on call.</exception>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyleElement.media">
            <summary>
            The MEDIA attribute specifies the media on which the style sheet should be applied.
            </summary>
            <remarks>
            This allows authors to restrict a style sheet to certain output devices, such as printers or aural browsers. The attribute's value is a comma-separated list of media descriptors. The following media descriptors are defined in HTML 4.0 and are case-sensitive:
            <list type="bullet">
            <item>screen (the default), for non-paged computer screens; </item>
            <item>tty, for fixed-pitch character grid displays (such as the display used by Lynx); </item>
            <item>tv, for television-type devices with low resolution and limited scrollability; </item>
            <item>projection, for projectors; </item>
            <item>handheld, for handheld devices (characterized by a small, monochrome display and limited bandwidth); </item>
            <item>print, for output to a printer; </item>
            <item>braille, for braille tactile feedback devices; </item>
            <item>aural, for speech synthesizers; </item>
            <item>all, for all devices. </item>
            </list>
            To assign one of these values use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.LinkElementMedia">LinkElementMedia</see> enumaration constants.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyleElement.title">
            <summary>
            Gets or sets the title attribute for this element.
            </summary>
            <remarks>
            Visible elements may render the title as a tooltip.
            Invisible elements may not render, but use internally to support design time environments.
            Some elements may neither render nor use but still accept the attribute.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyleElement.type">
            <summary>
            The TYPE attribute of STYLE is used to specify the Internet media. Required.
            </summary>
            <remarks>
            The TYPE attribute specify the type of the style language. For Cascading Style Sheets, 
            the TYPE attribute value should be text/css.
            <para>
            If the property is not assigned the value "text/css" will be returned.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyleElement.Content">
            <summary>
            The embedded content of the container.
            </summary>
            <remarks>
            This property gives access to the content of the style container. It is recommended
            to provide a style editor within the host application that can access this content and
            the content of an external style file linked with the LINK tag.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.LinkElement">LinkElement (LINK)</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.StyleElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.StyleRuleCollection">
            <summary>
            This class holds a collection of style rules.
            </summary>
            <remarks>
            The purpose of this class is to support the NetRix infrastructure and the NetRix UI. You should
            not use this class directly in user code.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.StyleRuleCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.StyleRuleCollection.OnClearHandler">
            <summary>
            Fired if the collection editor starts a new sequence.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.StyleRuleType">
            <summary>
            Types of Style Rules (Selectors)
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.StyleRuleType.Standard">
            <summary>
            All element variants, like "B", "B > P", "B P", "B+P" and pseudos for elements, like "A:hover"
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.StyleRuleType.Class">
            <summary>
            Classes, like ".class"
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.StyleRuleType.ID">
            <summary>
            IDs, like "#id"
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.StyleRuleType.Pseudo">
            <summary>
            Pseudor definitions, like @block
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.StyleRuleType.Global">
            <summary>
            The asterisk *. Not followed by any text.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.HeaderElement">
            <summary>
            The hx element defines a heading.
            </summary>
            <remarks>
            The regular headers.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.HeaderElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.HeaderElement.#ctor(GuruComponents.Netrix.IHtmlEditor,GuruComponents.Netrix.WebEditing.Elements.Header)">
            <summary>
            Creates the specified header element.
            </summary>
            <param name="editor">The editor this element belongs to.</param>
            <param name="h">The type of header being created.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.Header">
            <summary>
            Type of header element if created directly.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement">
            <summary>
            The HR element defines a horizontal rule for visual browsers.
            </summary>
            <remarks>
            While this element is inherently presentational, it can be used structurally as a section divider. However, for greater flexibility the HR element can be replaced with the border-bottom or border-top properties of Cascading Style Sheets. For example, the following style rule would suggest a horizontal line above all DIV elements with CLASS=navbar.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement.style">
            <summary>
            Gets or sets the style string for this element.
            </summary>
            <remarks>
            To replace the deprecated properties use this option to set the styles.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement.width">
            <summary>
            The WIDTH attribute specifies the width of the line as a percentage or a number of pixels.
            </summary>
            <remarks>
            These attribute is deprecated in favor of style sheets. If a width is specified, percentages are 
            generally preferred since they adjust to varying window sizes. The width property of Cascading 
            Style Sheets provides greater flexibility in suggesting the width of horizontal rules.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement.align">
            <summary>
            Horizontal alignment (left, center, right) within the surrounding block element.
            </summary>
            <remarks>
            This attributes allows the horizontal alignment within the surrounding block element. The options
            and there behavior differs slightly between the elements. The property allows the list provided 
            by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement.color">
            <summary>
            The COLOR of the rule.
            </summary>
            <remarks>
            These attribute is deprecated in favor of style sheets.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement.noShade">
            <summary>
            The boolean NOSHADE attribute suggests that the rule be rendered as a solid line rather than the groove style commonly used.
            </summary>
            <remarks>
            These attribute is deprecated in favor of style sheets.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement.size">
            <summary>
            The SIZE attribute suggests the height of the line in pixels.
            </summary>
            <remarks>
            These attribute is deprecated in favor of style sheets.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.HorizontalRuleElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ImageElement">
            <summary>
            This class represents the &lt;img&gt; element.
            </summary>
            <remarks>
            <para>
            &lt;IMG ...&gt; puts an image on the web page. IMG requires two attributes: <see cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.src"/> and <see cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.alt"/>. <see cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.alt"/> is always required in &lt;IMG ...&gt; - 
            don't make the common mistake of leaving it out. See the Rules of <see cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.alt"/> for more details. 
            </para>
            Classes directly or indirectly inherited from 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/> are not intended to be instantiated
            directly by the host application. Use the various insertion or creation methods in the base classes
            instead. The return values are of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            and can be casted into the element just created.
            <para>
            Examples of how to create and modify elements with the native element classes can be found in the 
            description of other element classes.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.usemap">
            <summary>
            USEMAP indicates that the image is an image map and uses the map definition named by this attribute. 
            </summary>
            <remarks>
            The name of the map is set by the NAME attribute of the MAP tag. Note that USEMAP requires that you 
            precede the name of the map with a hash symbol (#). For example, the following code creates an 
            image map named map1: 
            <code>
            &lt;DIV ALIGN=CENTER&gt;
                 &lt;MAP NAME="map1"&gt;
                      &lt;AREA 
                           HREF="contacts.html" ALT="Contacts" TITLE="Contacts" 
                           SHAPE=RECT COORDS="6,116,97,184"&gt;
                      &lt;AREA 
                           HREF="products.html" ALT="Products" TITLE="Products" 
                           SHAPE=CIRCLE COORDS="251,143,47"&gt;
                      &lt;AREA 
                           HREF="new.html" ALT="New!" TITLE="New!"     
                           SHAPE=POLY COORDS="150,217, 190,257, 150,297,110,257"&gt;
                      &lt;/MAP&gt;
                      &lt;IMG SRC="testmap.gif" ALT="map of GH site" BORDER=0 WIDTH=300 HEIGHT=300
            USEMAP="#map1"&gt;&lt;BR&gt;
            [ &lt;A HREF="contacts.html" ALT="Contacts"&gt;Contacts&lt;/A&gt; ]
            [ &lt;A HREF="products.html" ALT="Products"&gt;Products&lt;/A&gt; ]
            [ &lt;A HREF="new.html"      ALT="New!"&gt;New!&lt;/A&gt; ]
            &lt;/DIV&gt;
            </code>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.alt">
            <summary>
            Use as alt="text" attribute.
            </summary>
            <remarks>
            For user agents that cannot display images, forms, or applets, this 
            attribute specifies alternate text. The language of the alternate text is specified by the lang attribute. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.border">
            <summary>
            BORDER is most useful for removing the visible border around images which are inside links.
            </summary>
            <remarks>
            By default images inside lunks have visible borders around them to indicate that they are links. However, user generally recognize these "link moments" and the border merely detracts from the appearance of the page.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.height">
            <summary>
            WIDTH and HEIGHT tell the browser the dimensions of the image.
            </summary>
            <remarks>
            The browser can use this information to reserve space for the image as it contructs the page, even though the image has not downloaded yet.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.hSpace">
            <summary>
            HSPACE sets the horizontal space between the image and surrounding text. 
            </summary>
            <remarks>
            HSPACE has the most pronounced effect when it is used in conjunction with <see cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.align"/> to right or left align the image.
            The space assigned by this attribute is added on both sides of the element. If a value of 5 is set the element grows vertically 10 pixels.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.vSpace">vSpace</seealso>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.align">align</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.ScriptOnDblClick">
            <summary>
            Supports the JavaScript event 'doubleclick'.
            </summary>
            <remarks>
            The property should contain the name of a JavaScript mehtod or JavaScript executable code.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.ScriptOnMouseDown">
            <summary>
            Supports the JavaScript event 'mousedown'.
            </summary>
            <remarks>
            The property should contain the name of a JavaScript mehtod or JavaScript executable code.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.ScriptOnMouseUp">
            <summary>
            Supports the JavaScript event 'mouseup'.
            </summary>
            <remarks>
            The property should contain the name of a JavaScript mehtod or JavaScript executable code.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.src">
            <summary>
            SRC tells where to get the picture that should be put on the page.
            </summary>
            <remarks>
            SRC is the one required attribute. It is recommended to use relative paths. If a filename is given the property will recognize and set
            the relative path automatically.
            <para>
            Note: To bypass the automatic truncation of paths you can use the base class' SetAttribute method, which provides a raw access to 
            all supported attributes like <c>img.SetAttribute("src", "file:///c:\mypath\myimage.png");</c>. Further access to <c>src></c> property will
            still truncate the value, but only for the caller. It will not change the content until you set the value explicitly through this property.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.vSpace">
            <summary>
            VSPACE sets the vertical space between the image and surrounding text.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.hSpace">hSpace</seealso>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.align">align</seealso>
            </summary>
            <remarks>
            The space assigned by this attribute is added on both sides of the element. If a value of 5 is set the element grows vertically 10 pixels.
            <para>
            Set the value to 0 (zero) to remove the attribute. 0 (zero) is the default value.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ImageElement.width">
            <summary>
            WIDTH and HEIGHT tell the browser the dimensions of the image.
            </summary>
            <remarks>
            The browser can use this information to reserve space for the image as it contructs the page, even though the image has not downloaded yet.
            <para>
            Set the value to -1 to remove the attribute. The default value for the UI defaults to 30. This is simple for user support. Removing the attribute
            will not set the value to 30 nor the element will inherit that behavior.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ImageElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.InsertedElement">
            <summary>
            The INS element contains content that has been inserted.
            </summary>
            <remarks>
            This element is useful in marking changes from one version of a document to the next. Through style sheets, authors can suggest an appropriate rendering, such as rendering the inserted content in italics, a different color, or a different voice.
            <para>
            INS may be used as either a block-level element or an inline element. If used as an inline element (e.g., within a P), then INS may not contain any block-level elements.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InsertedElement.cite">
            <summary>
            The CITE attribute of DEL gives a URI with information on why the content was deleted. Optional.
            </summary>
            <remarks>
            A brief explanation for the deletion can be given with the TITLE attribute, which may be rendered as a "tooltip" by some browsers.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.InsertedElement.datetime">
            <summary>
            The optional DATETIME attribute specifies the date and time of the deletion.
            </summary>
            <remarks>
            The value is case-sensitive and of the form YYYY-MM-DDThh:mm:ssTZD. See the values section for a full explanation of this format.
            The usage is shown by the following example:
            <code>
            &lt;DEL CITE="http://www.w3.org/TR/REC-html40/appendix/changes.html#h-A.1.3" DATETIME="1997-12-19T00:00:00-05:00" TITLE="XMP is obsolete"&gt;
            &lt;P&gt;
            The XMP element contains preformatted text in which markup other than an end tag is treated as literal text.
            &lt;/P&gt;
            &lt;/DEL&gt;
            </code>
            Since DEL is poorly supported among browsers, authors may wish to use a font style element such as STRIKE (deprecated in HTML 4.0) to attempt to convey the meaning of DEL to non-supporting visual browsers.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.InsertedElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ItalicElement">
            <summary>
            The I element suggests that text be rendered as italic text.
            </summary>
            <remarks>
            In most cases, use of a phrase element such as EM, DFN, VAR, or CITE is more appropriate since these elements express the meaning of the text more clearly.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.EmphasisElement">EmphasisElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.CiteElement">CiteElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.DefinitionElement">DefinitionElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.VariableElement">VariableElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ItalicElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.KeyboardElement">
            <summary>
            The KBD element denotes text to be entered by the user.
            </summary>
            <remarks>
            Visual browsers typically render KBD as monospaced text, but authors can suggest a rendering using style sheets. 
            Since KBD is a structural element, it carries meaning, making it preferable to font style elements such as TT when marking up text to be entered by the user.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TeletypeElement">TeletypeElement (TT)</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.PreformattedElement">PreformattedElement (PRE)</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.KeyboardElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ListItemElement">
            <summary>
            The LI element defines a list item. 
            </summary>
            <remarks>
            The element must be contained within DIR, MENU, OL or UL.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.OrderedListElement">OrderedListElement (OL)</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.UnorderedListElement">UnorderedListElement (UL)</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ListItemElement.type">
            <summary>
            Defines the TYPE of list. Deprecated.
            </summary>
            <remarks>
            The TYPE attribute of OL suggests the numbering style on visual browsers. The case-sensitive values are as follows:
            <list type="bullet">
            <item>1 (decimal numbers: 1, 2, 3, 4, 5, ...) </item>
            <item>a (lowercase alphabetic: a, b, c, d, e, ...) </item>
            <item>A (uppercase alphabetic: A, B, C, D, E, ...) </item>
            <item>i (lowercase Roman numerals: i, ii, iii, iv, v, ...) </item>
            <item>I (uppercase Roman numerals: I, II, III, IV, V, ...) </item>
            <item>disc (a filled-in circle) </item>
            <item>square (a square outline) </item>
            <item>circle (a circle outline) </item>
            </list>
            The numbering style on an individual list item can be suggested using the TYPE attribute of LI. 
            <para>
            The list-style-type property of CSS provides greater flexibility in suggesting numbering styles.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ListItemElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ListType">
            <summary>
            Used to assign a list type.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.Default">
            <summary>
            Default beahvior.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.Numeric">
            <summary>
            Show numeric values.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.LowerCaseAlphabetic">
            <summary>
            Use lower case alphanumeric values.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.UpperCaseAlphabetic">
            <summary>
            Use upper case alphanumeric values.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.LowerCaseRoman">
            <summary>
            Use lower case Roman values.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.UpperCaseRoman">
            <summary>
            Use upper case Roman values.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.Disk">
            <summary>
            Use discs (full circle) as bullet icon.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.Circle">
            <summary>
            Use circle (empty circel) as bullet icon.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ListType.Square">
            <summary>
            Use a square as bullet icon.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.MapElement">
            <summary>
            The MAP element defines an image map containing several areas.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.MapElement._areaElements">
            <summary>
            Stores the actual area element this map is build from.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MapElement.AreaTags">
            <summary>
            Collection of AREA tags.
            </summary>
            <remarks>
            This collection should be used to add or remove 
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement">AreaElement</see> objects.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.AreaElement"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MapElement.name">
            <summary>
            Name of this map.
            </summary>
            <remarks>
            MAP creates the overall image map element. &lt;MAP ...&gt;> requires the 
            <see cref="P:GuruComponents.Netrix.WebEditing.Elements.MapElement.name">name</see> attribute.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.MapElement.name"/>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.MapElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement">
            <summary>
            The MARQUEE element creates a scrolling display. Not recommended.
            </summary>
            <remarks>
            &lt;MARQUEE ...> creates a scrolling display. &lt;MARQUEE ...> is an MSIE extension, but is now supported by NS 7. 
            &lt;MARQUEE ...> is often regarded as one of the "evil" tags, and that perception alone might be enough reason 
            to not use it. However, used lightly and with taste (and understanding that it will never render everywhere), 
            &lt;MARQUEE ...> isn't such a bad tag. It can work well for announcements. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.Width">
            <summary>
            The WIDTH attribute specifies the width of the line as a percentage or a number of pixels.
            </summary>
            <remarks>
            These attribute is deprecated in favor of style sheets. If a width is specified, percentages are 
            generally preferred since they adjust to varying window sizes. The width property of Cascading 
            Style Sheets provides greater flexibility in suggesting the width of horizontal rules.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.Height">
            <summary>
            The HEIGHT of the element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.Direction">
            <summary>
            DIRECTION indicates which direction the marquee scrolls.
            </summary>
            <remarks>
            DIRECTION=LEFT, which is the default, indicates that the marquee starts at the right and moves leftwards across the page. DIRECTION=RIGHT indicates that the marquee starts at the left and moves rightwards across the page.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The exception will thrown if any other value than 'left' or 'right' is set.
            </exception>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.Behavior">
            <summary>
            BEHAVIOR indicates how the contents scroll.
            </summary>
            <remarks>
            BEHAVIOR=SCROLL, which is the default, indicates that the content should scroll off the edge of the marquee area, then reappear on the other side.
            BEHAVIOR=SLIDE is almost the same, except that it indicates that when the leading part content reaches the edge it should start over without scrolling off. Notice in this example that the contents start scrolling again as soon as the "H" reaches the left side.
            BEHAVIOR=ALTERNATE makes the content bounce back and forth, all of it remaining visible all the time (assuming of course that it all fits). 
            </remarks>
            <exception cref="T:System.ArgumentException">
            The exception will thrown if any other value than 'scroll', 'slide', or 'alternate' is set.
            </exception>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.BgColor">
            <summary>
            The background color of the scroll area.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.hSpace">
            <summary>
            HSPACE sets the horizontal space between the content and surrounding text. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.vSpace">
            <summary>
            VSPACE sets the vertical space between the content and surrounding text.
            </summary>
            <remarks>
            The space assigned by this attribute is added on both sides of the element. If a value of 5 is set the 
            element grows vertically 10 pixels.
            <para>
            Set the value to 0 (zero) to remove the attribute. 0 (zero) is the default value.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.ScrollDelay">
            <summary>
            SCROLLDELAY, together with SCROLLAMOUNT, sets the speed of the scrolling. 
            </summary>
            <remarks>
            Marquee moves the content by displaying the content, then delaying for some short period of time, then displaying the content again in a new position. SCROLLDELAY sets the amount of delay in milliseconds (a millisecond is 1/1000th of a second). The default delay is 85. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.ScrollAmount">
            <summary>
            SCROLLAMOUNT, together with SCROLLDELAY, sets the speed of the scrolling.
            </summary>
            <remarks>
            Marquee moves the content by displaying the content, then delaying for some short period of time, then displaying the content again in a new position. SCROLLAMOUNT sets the size in pixels of each jump. A higher value for SCROLLAMOUNT makes the marquee scroll faster. The default value is 6.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.Loop">
            <summary>
            LOOP sets how many times the marquee should loop.
            </summary>
            <remarks>
            The default value (i.e. if you don't put a LOOP attribute at all) is INFINITE, which means that the marquee loops endlessly. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.Content">
            <summary>
            Gets or sets the inner HTML of the Marquee element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.MarqueeElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.MenuElement">
            <summary>
            The MENU element defines a menu list. Deprecated.
            </summary>
            <remarks>
            The element contains one or more LI elements that define the actual items of the list. The LI elements must not contain block-level elements, which prevents MENUs from being nested.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.ListItemElement">ListItemElement (LI)</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.MenuElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.NoBreakElement">
            <summary>
            The NOBR element avoids line breaks.
            </summary>
            <remarks>
            NOBR can be useful in avoid line breaks by limited space.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.NoBreakElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ObjectElement">
            <summary>
            The OBJECT element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ObjectElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.OrderedListElement">
            <summary>
            The OL element defines an ordered list.
            </summary>                             
            <remarks>
            The element contains one or more LI elements that define the actual items of the list.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.ListItemElement">ListItemElement (LI)</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OrderedListElement.type">
            <summary>
            Defines the TYPE of list. Deprecated.
            </summary>
            <remarks>
            The TYPE attribute of OL suggests the numbering style on visual browsers. The case-sensitive values are as follows:
            <list type="bullet">
            <item>1 (decimal numbers: 1, 2, 3, 4, 5, ...) </item>
            <item>a (lowercase alphabetic: a, b, c, d, e, ...) </item>
            <item>A (uppercase alphabetic: A, B, C, D, E, ...) </item>
            <item>i (lowercase Roman numerals: i, ii, iii, iv, v, ...) </item>
            <item>I (uppercase Roman numerals: I, II, III, IV, V, ...) </item>
            </list>
            The numbering style on an individual list item can be suggested using the TYPE attribute of LI. 
            <para>
            The list-style-type property of CSS provides greater flexibility in suggesting numbering styles.
            </para>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.ListItemElement">ListItemElement (LI)</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.OrderedListElement.ListItems">
            <summary>
            List of Items this OL element contains.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.OrderedListElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.OrderedListType">
            <summary>
            Type of numbers used for the ordered list element.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OrderedListType.Default">
            <summary>
            The default value, arabic digits.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OrderedListType.Numeric">
            <summary>
            Numeric values, also arabic digits.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OrderedListType.LowerCaseAlphabetic">
            <summary>
            Alpha numeric, a., b., c. and so on, in lower cases.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OrderedListType.UpperCaseAlphabetic">
            <summary>
            Alpha numeric, A., B., C. and so on, in upper cases.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OrderedListType.LowerCaseRoman">
            <summary>
            Roman digits, like iv. or xii, written in lower cases.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.OrderedListType.UpperCaseRoman">
            <summary>
            Roman digits, like IV. or XII, written in upper cases.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ParagraphElement">
            <summary>
            The P element defines a paragraph.
            </summary>
            <remarks>
            The closing tag for P is optional, but its use prevents common browser bugs with style sheets. Note that P cannot contain block-level elements such as TABLE and ADDRESS.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ParagraphElement.align">
            <summary>
            The ALIGN attribute.
            </summary>
            <remarks>
            This attribute is deprecated in HTML 4.0. Use styles instead.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ParagraphElement.disabled">
            <summary>
            Disables the element.
            </summary>
            <remarks>
            The most elements are drawn grayed or with a gray shadow to inform the user that the element is disabled.
            Field elements do not except the focus and do not display the caret.
            <para>
            In HTML the element is disables if the attribute exists and it is enabled if it doesn't exist. The parameter assigned
            to the attribute is useless.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ParagraphElement.tabIndex">
            <summary>
            Gets or set the TAB index.
            </summary>
            <remarks>
            If the user hits the TAB key the focus moves from block element to block element, beginning with the first element on a page.
            To change the default TAB chain the tabIndex can be set to any numeric (integer) value which force the order of the TAB key.
            The value must be greater or equal than 0 (zero).
            <para>
            To remove the attribute set the value to 0 (zero).
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ParagraphElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ParamElement">
            <summary>
            The PARAM element provides parameters for the OBJECT and APPLET elements.
            </summary>
            <remarks>
            An OBJECT or APPLET may contain any number of PARAM elements prior to the alternate content that is also contained within the OBJECT or APPLET element.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ParamElement.EffectiveStyle">
            <summary>
            This member overwrites the existings member to correct the PropertyGrid display.
            </summary>
            <remarks>
            This property cannot be used in user code. It supports the NetRix infrastructure only.
            </remarks>
            <exception cref="T:System.NotImplementedException">Always fired on call.</exception>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ParamElement.name">
            <summary>
            The NAME of the parameter. Required.
            </summary>
            <remarks>
            The name is used within the applet to access the named parameter.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ParamElement.value">
            <summary>
            The VALUE of the parameter. Required.
            </summary>
            <remarks>
            The value is used within the applet to access the parameter value.
            </remarks>        
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ParamElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ParameterElementsCollection">
            <summary>
            The class builds the collection of PARAM elements.
            </summary>
            <remarks>
            This class supports the elements OBJECT, EMBED and APPLET. It is used to manage the
            collection of parameters added to any of these elements. The class supports the integrated
            param collection editor (full version only) and the programmatic access to the parameter elements
            (both versions). 
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ParameterElementsCollection.ParamElementType">
            <summary>
            Provide one possible type to the propertygrid's collection editor to help them building elements.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.ParameterElementsCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.ParameterElementsCollection.OnClearHandler">
            <summary>
            Fired if the collection editor starts a new sequence
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.PreformattedElement">
            <summary>
            The PRE element contains preformatted text.
            </summary>
            <remarks>
            Visual browsers should render preformatted text in a fixed-pitch font, should not collapse whitespace, and should not wrap long lines.
            <para>PRE is useful for formatting computer code or poetry where whitespace is important, but since preformatted text is inherently visual, authors should avoid dependence on it wherever possible. When using PRE, authors should avoid altering the element's fixed-pitch font or non-collapsing whitespace properties by means of style sheets.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.PreformattedElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ScrollType">
            <summary>
            The scroll type used in scrollable elements.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ScrollType.Yes">
            <summary>
            Scrolling is allowed and bars are always visible.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ScrollType.No">
            <summary>
            Scrolling is not allowed. Content outside the are is clipped.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.ScrollType.Auto">
            <summary>
            Scrolling is allowed. The scrollbars are hide if content is smaller than area.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.SelectableElement">
            <summary>
            A base class used to support the NetRix infrastructure.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectableElement.accessKey">
            <summary>
            The ACCESSKEY attribute.
            </summary>
            <remarks>
            By default, the accessKey property sets focus to the object. The object receives focus when the user simultaneously presses the ALT key and the accelerator key assigned to an object. Some controls perform an action after receiving focus. For example, using accessKey on a input type=button causes the onclick event to fire. By comparison, applying the accessKey on a radio button causes the onclick event to fire and toggles the checked property, visibly selecting or deselecting the control.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectableElement.disabled">
            <summary>
            The DISABLED attribute, disables the element.
            </summary>
            <remarks>
            The most elements are drawn grayed or with a gray shadow to inform the user that the element is disabled.
            Field elements do not except the focus and do not display the caret.
            <para>
            In HTML the element is disables if the attribute exists and it is enabled if it doesn't exist. The parameter assigned
            to the attribute is useless.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectableElement.hideFocus">
            <summary>
            Sets or retrieves the value indicating whether the object visibly indicates that it has focus.
            </summary>
            <remarks>
            The focus of an object is visibly indicated by a focus rectangle—a dotted rectangle within the boundaries of the object.
            This property does not control the ability of an object to receive focus; for that, use the tabIndex property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectableElement.ScriptOnFocus">
            <summary>
            Defines an client site event which is fired if the element receives the focus.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectableElement.ScriptOnKeyPress">
            <summary>
            Defines an client site event which is fired if the element registered a key stroke.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SelectableElement.tabIndex">
            <summary>
            Gets or set the TAB index.
            </summary>
            <remarks>
            If the user hits the TAB key the focus moves from block element to block element, beginning with the first element on a page.
            To change the default TAB chain the tabIndex can be set to any numeric (integer) value which force the order of the TAB key.
            The value must be greater or equal than 0 (zero).
            <para>
            To remove the attribute set the value to 0 (zero).
            </para>
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.SimpleInlineElement">
            <summary>
            A base class for simple inline elements.
            </summary>
            <remarks>
            This class could not be used to instantiate HTML elements directly.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SimpleInlineElement.class">
            <summary>
            The CLASS attribute.
            </summary>
            <remarks>
            This attribute is used to assign style classes from a style sheet (CSS).
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SimpleInlineElement.id">
            <summary>
            The ID attribute.
            </summary>
            <remarks>
            This attribute defines an unique ID to the element. It can be used to assign styles from a style sheet (CSS) or
            to access the element using Scripting.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.SimpleInlineElement.style">
            <summary>
            Defines the STYLE attribute.
            </summary>
            <remarks>
            The STYLE attribute can contain inline style definitions. If the NetRix UI is used (not supported by Light Version) the integrated
            style editor of the UI assembly can be used to create the styles.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.SmallElement">
            <summary>
            The SMALL element suggests that text be rendered in a smaller font.
            </summary>
            <remarks>
            Since HTML 4.0 has no element to indicate de-emphasis, SMALL is often useful for this purpose.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.SmallElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.SpanElement">
            <summary>
            The SPAN element is a generic inline container.
            </summary>
            <remarks>
            SPAN carries no structural meaning itself, but it can be used to provide extra structure through its LANG, DIR, CLASS, and ID attributes. 
            Style sheets are often used to suggest a presentation for a given class or ID.
            <para>SPAN should only be used where no other HTML inline element provides a suitable meaning. If a presentation such as bold or italic text would be 
            suitable on visual browsers, authors may prefer to use an appropriate font style element.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.SpanElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.StrikeElement">
            <summary>
            The STRIKE element suggests that text be rendered with a strike-through style. Deprecated.
            </summary>
            <remarks>
            In many cases, use of a phrase element such as DEL is more appropriate since such elements express the meaning of the text more clearly. However, since support for DEL among browsers is weak, STRIKE is useful in combination with DEL.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.DeletedElement">DeletedElement (DEL)</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.StrikeElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.StrongElement">
            <summary>
            The STRONG element gives strong emphasis to its contents. 
            </summary>
            <remarks>
            Visual browsers typically render STRONG as bold text, but authors can suggest a rendering using style sheets. Since STRONG is a structural element, 
            it carries meaning, making it preferable to font style elements such as B when strong emphasis is the intended meaning.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.StrongElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.StyledElement">
            <summary>
            This class is used as a base class for various elements to simplify the definition of
            commonly used attributes.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyledElement.ScriptOnClick">
            <summary>
            onClick sets a script to run when the user clicks on the link.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyledElement.ScriptOnMouseOver">
            <summary>
            onMouseOver is an event handlers that is triggered when the mouse moves over the link. 
            </summary>
            <remarks>
            The most common use for these event handler are rollover images, but you put any kind of program in them you want.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyledElement.ScriptOnMouseOut">
            <summary>
            onMouseOut is an event handler that is triggered when the mouse moves out from the element again.
            </summary>
            <remarks>
            The most common use for these event handler are rollover images, but you put any kind of program in them you want.
            </remarks> 
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.StyledElement.title">
            <summary>
            W3C says that TITLE is "an advisory title for the linked resource".
            </summary>
            <remarks>
            The idea is that TITLE gives a description of the linked resource that is more informative than the URL.
            <para>
            Most browsers have ignored this useful attribute. One that doesn't ignore it is Opera. Opera displays the value of TITLE in a small box when the pointer is over a link. 
            The latest version of MSIE also shows a little box over the link, but otherwise ignores TITLE.
            </para>
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.SubElement">
            <summary>
            The SUB element is used for subscripts.
            </summary>
            <remarks>
            Since SUB is inherently presentational, it should not be relied upon to express a given meaning. However, it can be useful for chemical formulas and mathematical indices, where the subscript presentation is helpful but not required.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.SubElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.SupElement">
            <summary>
            The SUP element is used for superscripts.
            </summary>
            <remarks>
            Since SUP is inherently presentational, it should not be relied upon to express a given meaning. However, it can be useful for mathematical exponents where the context implies the meaning of the exponent, as well as other cases where superscript presentation is helpful but not required.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.SupElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment">
            <summary>
            Alignment for table caption.
            </summary>
            <remarks>
            This enumeration is used for compatibility only. It is recommended to format 
            captions with styles (CSS) instead.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment.Top">
            <summary>
            Place the caption in middle top of the table.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment.Left">
            <summary>
            Place caption in top left corner.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment.Right">
            <summary>
            Place caption in the top right corner.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment.Bottom">
            <summary>
            Place caption in the bottom middle.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.CaptionElement">
            <summary>
            Defines a caption for a table.
            </summary>
            <remarks>
            This element must appear straight after the opening table tag and used only once. 
            To add a caption to an existing table use the TableDesigner PlugIn's AddCaption command, 
            that can be found in the TableFormatter class. Each table
            object can return the TableFormatter instance.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">TableElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment">CaptionAlignment</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.CaptionElement.Content">
            <summary>
            Gets or sets the content of the caption.
            </summary>
            <remarks>
            If this property is not set the caption will be invisible. The property does not accept HTML.
            Tags are transformed into text, e.g. are stripped out.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.CaptionElement.align">
            <summary>
            The alignment of the caption. Depreciated.
            </summary>
            <remarks>
            This property is used for compatibility only. It is recommended to format 
            captions with styles (CSS) instead.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CaptionElement.#ctor">
            <Elements name="PublicElementConstructor">
            <summary>Internal constructor of the element.</summary>        
            <remarks>
            This constructor supports the NetRix infrastructure and should be used from user code. Various collection editors
            expect public constructors, used to instantiate objects using reflection. The call of this public constructor is
            useless from user code. Use the various insertion method to create and insert new elements instead.
            </remarks>
        </Elements>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.CaptionElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ColElement">
             <summary>
             Sets properties for a column of table cells.
             </summary>
             <remarks>
             This is a HTML 4.0 tag. 
             COL goes after the TABLE tag and before any TR, THEAD, or TBODY elements. (It may go inside a COLGROUP element but it 
             doesn't have to.) Each COL defines the properties of one column, unless you use SPAN to indicate that it is for more 
             than one column. So the first COL sets the properties for the first column, the second COL sets the properties for the 
             second column, and so on. 
             <para>
             For example, the following code uses three COL tags to set properties of the cells in the first, second, and third 
             columns of the table. The first COL doesn't do anything except serve a placeholder for the first column. The second COL 
             uses the ALIGN attribute to right align all the cells in the second column. The third COL uses STYLE to set the styles 
             of the cells in the third column so that the font color is red: 
             <example>
             <code>
            &lt;TABLE BORDER CELLPADDING=5&gt;
            
            &lt;COL&gt;
            &lt;COL ALIGN=RIGHT&gt;
            &lt;COL STYLE="color:red"&gt;
            
            &lt;TR&gt; &lt;TH&gt;Expense&lt;/TH&gt; &lt;TH&gt;Price&lt;/TH&gt; &lt;TH&gt;Status&lt;/TH&gt; &lt;/TR&gt;
            &lt;TR&gt; &lt;TD&gt;office suite&lt;/TD&gt; &lt;TD&gt;1,343.56&lt;/TD&gt; &lt;TD&gt;rental&lt;/TD&gt; &lt;/TR&gt;
            &lt;TR&gt; &lt;TD&gt;cabling&lt;/TD&gt; &lt;TD&gt;1.25&lt;/TD&gt; &lt;TD&gt;installed&lt;/TD&gt; &lt;/TR&gt;
            &lt;/TABLE&gt;
             </code>
             This gives us this table:
             <code>
             &lt;TABLE BORDER CELLPADDING=5&gt;
             
             &lt;COL&gt;
             &lt;COL ALIGN=RIGHT&gt;
             &lt;COL STYLE="color:red"&gt;
             
             &lt;TR&gt; &lt;TH&gt;Expense&lt;/TH&gt; &lt;TH&gt;Price&lt;/TH&gt; &lt;TH&gt;Status&lt;/TH&gt; &lt;/TR&gt;
             &lt;TR&gt; &lt;TD&gt;office suite&lt;/TD&gt; &lt;TD&gt;1,343.56&lt;/TD&gt; &lt;TD&gt;rental&lt;/TD&gt; &lt;/TR&gt;
             &lt;TR&gt; &lt;TD&gt;cabling&lt;/TD&gt; &lt;TD&gt;1.25&lt;/TD&gt; &lt;TD&gt;installed&lt;/TD&gt; &lt;/TR&gt;
             &lt;/TABLE&gt;
             </code>
            </example>
             It's important to be absolutely clear on this point: COL does not create columns. It merely sets the properties of columns 
             that will be defined later in the code. Cells are not "contained" in COL elements, they just set attributes which are 
             applied to the cells in that column position.
             </para>
             <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">TableElement</seealso>
             <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment">CaptionAlignment</seealso>
             </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ColElement.span">
            <summary>
            Gets or sets how many columns this affects.
            </summary>
            <remarks>
            SPAN indicates how many columns the COL tag affects. The default value (i.e. if you don't use SPAN) is 1.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ColElement.align">
            <summary>
            The alignment of the column's content.
            </summary>
            <remarks>
            ALIGN sets the horizontal alignment of the cells in the column. The four possible values are LEFT, RIGHT, CENTER, and JUSTIFY. JUSTIFY is poorly supported. 
            <para>
            This property is used for compatibility only. It is recommended to format columns with styles (CSS) instead.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ColElement.width">
            <summary>
            The width of the columns.
            </summary>
            <remarks>WIDTH fixes the width of the column.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ColElement.bgColor">
            <summary>
            Background color for the whole column.
            </summary>
            <remarks>
            Cell styles may overwrite this value.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ColElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ColgroupElement">
            <summary>
            Sets properties for a column of table cells.
            </summary>
            <remarks>
            This is a HTML 4.0 tag. 
            <para>
            COLGROUP defines a group of columns in the table and allows you to set properties of those columns. COLGROUP goes 
            immediately after the TABLE tag and before any TR, THEAD, TBODY, or TFOOT tags. COLGROUP works very much like 
            COL, but be sure to note that COLGROUP requires both an opening and closing tag. </para>
            <para>
            COLGROUP is most useful for defining column groups to use in conjunction with TABLE RULES=GROUPS to put borders between 
            groups of columns instead of between every column. For example the following code creates a table that puts the first 
            column in a group by itself, all the remaining columns in a group together, and puts borders between the groups of columns.
            </para>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">TableElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment">CaptionAlignment</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ColgroupElement.span">
            <summary>
            Gets or sets how many columns this affects.
            </summary>
            <remarks>
            SPAN indicates how many columns the COLGROUP tag affects. The default value (i.e. if you don't use SPAN) is 1.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ColgroupElement.align">
            <summary>
            The alignment of the column's content.
            </summary>
            <remarks>
            ALIGN sets the horizontal alignment of the cells in the column. The four possible values are LEFT, RIGHT, CENTER, and JUSTIFY. JUSTIFY is poorly supported. 
            <para>
            This property is used for compatibility only. It is recommended to format columns with styles (CSS) instead.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.ColgroupElement.width">
            <summary>
            The width of the columns.
            </summary>
            <remarks>WIDTH fixes the width of the column.</remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.ColgroupElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.ExpandCaptionConverter">
            <summary>
            Supports the PropertyGrid.
            </summary>
            <remarks>
            This Converter class is used to show the caption properties within the table element in the propertygrid
            as expandable section (+ sign to open) instead of presenting them as stand alone property only.
            The convert from and to methods are able to create or remove the caption element directly.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.RulesType">
            <summary>
            This enumaration is used to determine the rules between cells.
            </summary>
            <remarks>
            Rules are
            an HTML 4.0 feature to control lines between rows and columns separatly.
            The default value is "All", which is in effect the same behavior as "NotSet".
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.RulesType.NotSet">
            <summary>
            No rules set. Behavior inherited.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.RulesType.None">
            <summary>
            No rules drawn.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.RulesType.Groups">
            <summary>
            Draw rules around column groups.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.RulesType.Rows">
            <summary>
            Draw rules for rows (horizontal).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.RulesType.Cols">
            <summary>
            Draw rules for columns (vertical).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.RulesType.All">
            <summary>
            Draw all rules (Default behavior).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableBodyElement">
            <summary>
            Represents the body (TBODY) of a table.
            </summary>
            <remarks>
            The MSHTML editor creates allways fully HTML 4.0 compatibel tables which have a TBODY tag
            in it that contains the row and cell definitions. This tag cannot be forced or avoid. To 
            help the user to use the UI of the host application to format the table using any of the
            section elements THEAD, TBODY or TFOOT this class can be use.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableBodyElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElement">
            <summary>
            This class represents a TD tag.
            </summary>
            <remarks>
            TD means table data cell. If the cell contains a header rather than data, th should be used instead. 
            TD must be used inside a TR element.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElement">TableRowElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableHeaderElement">TableHeaderElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">TableElement</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.Table">
            <summary>
            A reference to the Table that contains this Cell. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.Row">
            <summary>
            A reference to the Row that contains this Cell.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.valign">
            <!-- Für folgende Include-Kennung wurden keine übereinstimmenden Elemente gefunden. --><include file="DocumentorIncludes.xml" path="//WebEditing/Elements[@name=&quot;VerticalAlign&quot;]/*" />
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.background">
            <summary>
            A background image for the cell.
            </summary>
            <remarks>
            The value should be relative path to an image. Remember that absolute paths don't work on a webserver.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.bgColor">
            <summary>
            The background color of the cell.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.borderColor">
            <summary>
            The color of the cells border.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.colSpan">
            <summary>
            The number of columns this cell spans.
            </summary>
            <remarks>
            Changing this value will destroy the table structure if the spanned
            column does contain cell on other rows with the wrong number of cells.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.height">
            <summary>
            The HEIGHT of the element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.width">
            <summary>
            The WIDTH of the element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.noWrap">
            <summary>
            Suppresses the text wrapping of the cell.
            </summary>                               
            <remarks>Setting this attribute can enhance the cell width.</remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableCellElement.#ctor(System.String)">
            <Elements name="PublicElementConstructor">
            <summary>Internal constructor of the element.</summary>        
            <remarks>
            This constructor supports the NetRix infrastructure and should be used from user code. Various collection editors
            expect public constructors, used to instantiate objects using reflection. The call of this public constructor is
            useless from user code. Use the various insertion method to create and insert new elements instead.
            </remarks>
        </Elements>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElements">
            <summary>
            Collection of cell elements.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableCellElements.Add(GuruComponents.Netrix.WebEditing.Elements.TableCellElement)">
            <summary>
            Adds a cell.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableCellElements.Contains(GuruComponents.Netrix.WebEditing.Elements.TableCellElement)">
            <summary>
            Determines whether the cel exists in the collection.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableCellElements.Remove(GuruComponents.Netrix.WebEditing.Elements.TableCellElement)">
            <summary>
            Removes a cell.
            </summary>
            <remarks>
            Improper usage could result in wrong table rendering and unpredictable results.
            </remarks>
            <param name="o"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableCellElements.ToArray">
            <summary>
            Returns an array representing the content of the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableCellElements.Item(System.Int32)">
            <summary>
            Access to a cell within the collection.
            </summary>
            <param name="index">0 based index.</param>
            <returns>Cell element of <c>null</c> (<c>Nothing</c> in VB.NET) if index is outside boundaries.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign">
            <summary>
            This enumaration is used for the TBODY element to align the content. The only
            difference to the embedded align enumeration is char type.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign.Char">
            <summary>
            Align at the character defined with the char attribute.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign.Justify">
            <summary>
            Justify.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign.NotSet">
            <summary>
            Default behavior. Most browsers align left by default.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">
             <summary>
             This class represents a table element.
             </summary>
             <remarks>
             <para>
             Tables are widely used to build data tables or to create a sophisticated layout. To help users
             using tables it is resommended to use the TableDesigner PlugIn and the 
             TableFormatter classes there. To access parts of the table you can use the 
             <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElement">TableCellElement</see> and
             <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElement">TableRowElement</see> classes.
             </para>
             <seealso cref="T:GuruComponents.Netrix.HtmlDocument" />
             <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElement" />
             <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElement" />
             </remarks>
             <para>
            This class should never be instatiated directly. The recommended way to insert an element is to use
            the <see cref="P:GuruComponents.Netrix.HtmlEditor.Document">Document</see> property of the base class
            <see cref="T:GuruComponents.Netrix.HtmlEditor" />. This class provides provides various insertion methods. Each
            method will return an object of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</see>, 
            which can be casted in the created element (but no other). 
            </para>
             <example>
             Assuming that the user can reach the click method by clicking a button with the text "Insert Table" on it,
             the following code creates a new table at the current caret position and assign various formatting:
            <code>
            private void buttonTable_Click(object sender, System.EventArgs e)
            {
              // create a table and set various options
              TableElement t = (TableElement) this.htmlEditor1.Document.InsertTable(3, 4);
              t.border = 2;
              t.cellPadding = 2;
              t.cellSpacing = 1;
              // create a new caption and add it to the table    
              CaptionElement c = t.TableFormatter.AddCaption();     
              c.align = CaptionAlignment.Left;
              c.InnerText = "This is the caption";
            }</code>
             <para>
             You may store the table element object for further reference. To manipulate the content of the table 
             your own way you can use the property <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.InnerHtml" />.
             </para>
             </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.BaseTable">
            <summary>
            The underlying Element as a Interop.IHTMLTable type.
            </summary>
            <remarks>
            This property allows direct property access without additional casting for the caller.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.InsertRow(System.Int32)">
            <summary>
            Insert a new row at the given index.
            </summary>
            <exception cref="T:System.Exception">Throws an exception if insertion fails.</exception>
            <param name="index">Index, zero based.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.DeleteRow(System.Int32)">
            <summary>
            Delete a new row at the given index.
            </summary>
            <exception cref="T:System.Exception">Throws an exception if deletion fails.</exception>
            <param name="index">Index, zero based.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.CreateTableFoot">
            <summary>
            Create the TFOOT element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.CreateTableHead">
            <summary>
            Create the THEAD element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.DeleteTableFoot">
            <summary>
            Remove the TFOOT element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.DeleteTableHead">
            <summary>
            Remove the THEAD element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.DeleteCaption">
            <summary>
            Remove the CAPTION element.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.Caption"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.TableFoot">
            <summary>
            Current TFOOT element, if present.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.TableHead">
            <summary>
            Current THEAD element, if present.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.TableBodies">
            <summary>
            Current TBODY elements, if present.
            </summary>
            <remarks>
            If there is no body the property returns an empty collection.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.RowElements">
            <summary>
            Gets the collection of rows.
            </summary>
            <remarks>
            The purpose of this class is to provide access to the rows to assign formatting.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElements"/>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElement"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.Caption">
            <summary>
            Gets the caption for the table.
            </summary>
            <remarks>
            The purpose of this property is to get the currently assigned caption. The property will
            return <c>null</c> (<c>Nothing</c> in Visual Basic) if there is no caption assigned. To 
            create a new caption you can use the TableFormatter class
            and the AddCaption command of TableDesigner PlugIn.
            <para>
            If you want to create a caption and there is no need to assign properties immediately you can use
            the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.WithCaption"/> property, set to <c>true</c>, to create a empty caption element. Later you 
            can reference to that caption by using the Caption property and manipulate the content or behavior.
            Setting the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.WithCaption"/> property to <c>false</c> will remove the caption from table.
            </para>
            </remarks>
            <example>
            Assuming that the user can reach the click method by clicking a button with the text "Insert Caption" on it,
            the following code creates a new caption:
            <code>
            //
            // t is a TableElement object assigned earlier in the program
            //
            private void buttonCaption_Click(object sender, System.EventArgs e)
            {
                // create a new caption and add it to the table    
                CaptionElement c = t.TableFormatter.AddCaption();     
                c.align = CaptionAlignment.Left;
                c.InnerText = "This is the caption";
            }
            </code>
            You may store the table element object for further reference. To manipulate the content of the table 
            your own way you can use the property <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.InnerHtml">InnerHtml</see>.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.CaptionElement">CaptionElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.CaptionAlignment">CaptionAlignment</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">TableElement</seealso>
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.WithCaption">
            <summary>
            Creates or removes a caption.
            </summary>
            <remarks>
            You can use
            the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.WithCaption"/> property, set to <c>true</c>, to create a empty caption element. Later you 
            can reference to that caption by using the Caption property and manipulate the content or behavior.
            Setting the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.WithCaption"/> property to <c>false</c> will remove the caption from table.
            <para>
            If the caption is set once the value becomes persistant. Setting the value to <c>true</c> again will
            not create a new caption or replace the existing one. To remove the old caption and create a new one it
            is necessary to call the property twice (see example).
            </para>
            </remarks>
            <example>
            This example shows how to use this property to replace an old caption with a new one:
            <code>
            // t is a table object
            t.WithCaption = false;                 // remove old caption (destroyes the object internally)
            t.WithCaption = true;                  // create new caption (only works if there is no caption assigned)
            CaptionElement ce = t.Caption;         // get the new caption from table object
            ce.InnerText = "I'm the new caption";  // assign the content of the caption
            </code>
            Instead of using this property it is possible to use the 
            TableFormatter class and the TableDesigner's AddCaption and RemoveCaption command, 
            which is a more logical way. The intention to provide a property is the support of the PropertyGrid, which is part of the
            integrated NetRix user interface.
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.align">
            <summary>
        Horizontal alignment (left, center, right) within the surrounding block element.
        </summary><remarks>
        This attributes allows the horizontal alignment within the surrounding block element. The options
        and there behavior differs slightly between the elements. The property allows the list provided
        by the <see cref="T:System.Web.UI.WebControls.HorizontalAlign">HorizontalAlign</see> enumeration.
        </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.bgColor">
            <summary>
            The background color of the whole table.>
            </summary>
            <remarks>
            Row, Col, and Cell definitions may overwrite this value.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableElement.width">
            <summary>
            Width of whole table.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableFootElement">
            <summary>
            Represents the body (TFOOT) of a table.
            </summary>
            <remarks>
            The MSHTML editor creates allways fully HTML 4.0 compatibel tables which have a TBODY tag
            in it that contains the row and cell definitions. This tag cannot be forced or avoid. To 
            help the user to use the UI of the host application to format the table using any of the
            section elements THEAD, TBODY or TFOOT this class can be use.
            <para>
            There is currently no way to explicitly create the TFOOT tag. If it is necessary to have one 
            the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.InnerHtml">InnerHtml</see> property of the 
            base class can be used. 
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.Element">Element</seealso>
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableFootElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableHeadElement">
            <summary>
            Represents the body (THEAD) of a table.
            </summary>
            <remarks>
            The MSHTML editor creates allways fully HTML 4.0 compatibel tables which have a TBODY tag
            in it that contains the row and cell definitions. This tag cannot be forced or avoid. To 
            help the user to use the UI of the host application to format the table using any of the
            section elements THEAD, TBODY or TFOOT this class can be use.
            <para>
            There is currently no way to explicitly create the THEAD tag. If it is necessary to have one 
            the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.InnerHtml">InnerHtml</see> property of the 
            base class can be used. 
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.Element">Element</seealso>
            </para>
            </remarks>   
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableHeadElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableHeaderElement">
            <summary>
            Table header cell. 
            </summary>
            <remarks>
            TH defines a column or row header that is not table data itself. If a cell acts as both header and data, 
            TD should be used instead. th must be used inside a TR element.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElement">TableRowElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElement">TableCellrElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">TableElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableHeaderElement.#ctor">
            <Elements name="PublicElementConstructor">
            <summary>Internal constructor of the element.</summary>        
            <remarks>
            This constructor supports the NetRix infrastructure and should be used from user code. Various collection editors
            expect public constructors, used to instantiate objects using reflection. The call of this public constructor is
            useless from user code. Use the various insertion method to create and insert new elements instead.
            </remarks>
        </Elements>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableHeaderElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElement">
            <summary>
            This class represents a table row. 
            </summary>
            <remarks>
            Each TR element contains one or more TD or TH elements. These elements are build using the formatter options of
            the TableFormatter class, provided by the TableDesigner PlugIn. See <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElement">TableCellElement</see> for
            information about dealing with the cells of a row.
            <para>
            To access the cells of the row object you can use the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.CellElements"/> property. 
            </para>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElements"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.Table">
            <summary>
            A reference to the Table that contains this Row.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.InsertCell(System.Int32)">
            <summary>
            Insert a cell at the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.DeleteCell(System.Int32)">
            <summary>
            Insert a cell at the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.CellElements">
            <summary>
            Gets the collection of cells in this row.
            </summary>
            <remarks>
            The purpose of this class is to provide access to the cells to assign formatting.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElements"/>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableCellElement"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.cells">
            <summary>
            Gets the number of cells.
            </summary>
            <remarks>
            Gets the number of cells of the current row. The number may differ from row to row depending on the table
            structure. This property returns always the real number of cells, which may reduced by previous merging operations.
            The property reflect changes immediately. ReadOnly, use insertion methods to change the number of rows.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.bgColor">
            <summary>
            BGCOLOR sets the background color for a table row. 
            </summary>
            <remarks>
            BGCOLOR should only be used if you already know that the background color is compatible with the font color of the page. 
            Otherwise it's easier and more reliable to use styles.
            </remarks>
            <Elements name="ColorAttributes">
        <remarks>
        To remove this attribute from the collection of attributes and from the tag definition you can assign
        <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>. 
        </remarks>
        </Elements>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.borderColor">
            <summary>
            BORDERCOLOR work just like their corresponding attributes in the TABLE tag. 
            </summary>
            <remarks>
            One important difference is that this only set the colors of the inside borders.
            One of the nifty effects you can do with BORDERCOLOR is to set the colors to white so that the cells don't appear sunk in, but they still have words in them.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableElement">TableElement</seealso>
            </remarks>
            <Elements name="ColorAttributes">
        <remarks>
        To remove this attribute from the collection of attributes and from the tag definition you can assign
        <see cref="F:System.Drawing.Color.Empty">Color.Empty</see>. 
        </remarks>
        </Elements>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.height">
            <summary>
            The height of the row.
            </summary>
            <remarks>
            The height cannot be lower than the content requires. If the table designer is used to change the height this attribute
            is always removed and replaced by the corresponding style attribute. The UI recognizes the value of 25 as the default.
            <para>
            To remove this attribute set the value of the property to -1.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.#ctor">
            <Elements name="PublicElementConstructor">
            <summary>Internal constructor of the element.</summary>        
            <remarks>
            This constructor supports the NetRix infrastructure and should be used from user code. Various collection editors
            expect public constructors, used to instantiate objects using reflection. The call of this public constructor is
            useless from user code. Use the various insertion method to create and insert new elements instead.
            </remarks>
        </Elements>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableRowElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableRowElements">
            <summary>
            Collection of Rows a table contains. 
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableRowElements.Add(GuruComponents.Netrix.WebEditing.Elements.TableRowElement)">
            <summary>
            Adds a row to the underlying table.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableRowElements.Contains(GuruComponents.Netrix.WebEditing.Elements.TableRowElement)">
            <summary>
            Determines whether the underlying table contains the given row.  
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableRowElements.Remove(GuruComponents.Netrix.WebEditing.Elements.TableRowElement)">
            <summary>
            Removes a specific row from table.
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableRowElements.Item(System.Int32)">
            <summary>
            Gets or sets a row by its index using an indexer.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.TableRowElements.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element.</summary>
            <remarks>This member supports the NetRix infrastructure and supports the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Elements.TableRowElements.OnClearHandler">
            <summary>
            Fired if the colection editor starts a new sequence. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement">
            <summary>
            This class is internally used as a base class for THEAD, TBODY and TFOOT.
            </summary>
            <remarks>
            This class defines various attributes used in the structural elements TBODY, THEAD and TFOOT. These
            tags are HTML 4.0 elements and not completely supported in all browsers.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement.InsertRow(System.Int32)">
            <summary>
            Insert a new row at the given index.
            </summary>
            <exception cref="T:System.Exception">Throws an exception if insertion fails.</exception>
            <param name="index">Index, zero based.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement.DeleteRow(System.Int32)">
            <summary>
            Delete a new row at the given index.
            </summary>
            <exception cref="T:System.Exception">Throws an exception if deletion fails.</exception>
            <param name="index">Index, zero based.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement.char">
            <summary>
            Character to align content.
            </summary>
            <remarks>
            This attribute is used to align the content of a specific column at this character. This is normally used to align decimal
            values at the decimal sign (dot or comma).
            <para>
            To reset the property assign the value <see cref="F:System.String.Empty">String.Empty</see>.
            </para>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign">TableColumnHorizontalAlign</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement.charoff">
            <summary>
            charoff can be used to specify the number of pixels the alignment should be offset from the char character.
            </summary>
            <remarks>
            This attibute is not supported by any major browser. It is defined here to assure full HTML 4.0 compatibility.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement.align">
            <summary>
            Can be used to horizontally align the cells within the element. 
            </summary>
            <remarks>
            Additionally to the standard alignment values it is possible to use a character to align the content. To do so set this
            property to <see cref="T:GuruComponents.Netrix.WebEditing.Elements.TableColumnHorizontalAlign">TableColumnHorizontalAlign.Char</see>.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement.char">char</seealso>        
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.TableSectionElement.valign">
            <!-- Für folgende Include-Kennung wurden keine übereinstimmenden Elemente gefunden. --><include file="DocumentorIncludes.xml" path="//WebEditing/Elements[@name=&quot;VerticalAlign&quot;]/*" />
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.TeletypeElement">
            <summary>
            The TT element suggests that text be rendered as teletype or monospaced text.
            </summary>
            <remarks>
            In most cases, use of a phrase element such as CODE, SAMP, or KBD is more appropriate since these elements express the meaning of the text more clearly.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.CodeElement">CodeElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.KeyboardElement">KeyboardElement</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.TeletypeElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.UnderlineElement">
            <summary>
            The U element is being used to underline contained text.
            </summary>    
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.UnderlineElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.UnorderedListElement">
            <summary>
            The UL element defines an unordered list.
            </summary>                             
            <remarks>
            The element contains one or more LI elements that define the actual items of the list.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.ListItemElement">ListItemElement (LI)</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Elements.UnorderedListElement.ListItems">
            <summary>
            List of Items this UL element contains.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.UnorderedListElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.UnorderedListType">
            <summary>
            The type of listitems in an unordered (bulleted) list.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.UnorderedListType.Default">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.UnorderedListType.Circle">
            <summary>
            A circle is used.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.UnorderedListType.Disc">
            <summary>
            A disc is used (full circle).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Elements.UnorderedListType.Square">
            <summary>
            A square icon is used.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Elements.VariableElement">
            <summary>
            The VAR element is used to markup variables or program arguments.
            </summary>
            <remarks>
            Visual browsers typically render VAR as italic text, but authors can suggest a rendering using style sheets. Since VAR is a structural element, it carries meaning, making it preferable to font style elements such as I when marking up variables.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Elements.VariableElement.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates the specified element.
            </summary>
            <remarks>
            The element is being created and attached to the current document, but nevertheless not visible,
            until it's being placed anywhere within the DOM. To attach an element it's possible to either
            use the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom"/> property of any other already placed element and refer to this
            DOM or use the body element (<see cref="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement"/>) and add the element there. Also, in 
            case of user interactive solutions, it's possible to add an element near the current caret 
            position, using <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)"/> method.
            <para>
            Note: Invisible elements do neither appear in the DOM nor do they get saved.
            </para>
            </remarks>
            <param name="editor">The editor this element belongs to.</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.UndoRedo.UndoManager">
            <summary>
            This class contains the undo manager, used internally to manage undo and redpo steps.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.UndoManager.UndoStack">
            <summary>
            Return the stack that contains the unique or packed undo units this manager holds.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.UndoRedo.UndoObject">
            <summary>
            This class holds one undo step. 
            </summary>
            <remarks>
            The class is used as part of the undo history list and to perform single Undo steps on this list besides the regular
            undo chain. To perfom an Undo step just call the <see cref="M:GuruComponents.Netrix.WebEditing.UndoRedo.UndoObject.Do"/> method.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.UndoObject.Description">
            <summary>
            The description (internal name) of the Undo step.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.UndoObject.Do">
            <summary>
            A method to  perform an Undo action specific to this step.
            </summary>
            <remarks>
            In case this is a parent unit it will undo all containing child steps.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit">
            <summary>
            This class realises a simple batched undo manager.
            </summary>
            <remarks>
            Its purpose is to pack multiple action in one stack operation to simplify undo for the user. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Type">
            <summary>
            Return the type of this unit, either Undo or Redo.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.GetUndoHistory">
            <summary>
            Returns the collection of Undo/Redo objects available.
            </summary>
            <remarks>
            The current type of unit object decided whether this method returns the Undo or Redo history.
            The collections consists of <see cref="T:GuruComponents.Netrix.WebEditing.UndoRedo.UndoObject"/> objects, which implement <see cref="T:GuruComponents.Netrix.WebEditing.UndoRedo.IUndoObject"/>.
            These objects may have information about subobjects, which the undo manager creates if the user 
            requests packed undo sequences.
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.NumChildUndos"/>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.HasChildUndos"/>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.UndoRedo.UndoObject"/>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Type"/>
            <returns>Returns a collection of objects of type <see cref="T:GuruComponents.Netrix.WebEditing.UndoRedo.IUndoObject"/>.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.HasChildUndos">
            <summary>
            Returns <c>true</c> if there are child undo objects available.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.NumChildUndos"/>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Type"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.NumChildUndos">
            <summary>
            Returns the number of child undos available.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.HasChildUndos"/>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Type"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.ChildUndos">
            <summary>
            Returns the array of child undo objects, if this is privatly packed stack.
            </summary>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.UndoRedo.IUndoObject"/>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Type"/>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Close">
            <summary>
            Closes the current stack.
            </summary>
            <remarks>
            Using this method will pack all previously collected operations into one undo steps. Next time the 
            Undo command is send the control will undo all packed steps.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Reset">
            <summary>
            Clears the complete collection of undo/redo stacks.
            </summary>
            <remarks>
            After issuing this method the control will lose all undo stacks and reset the Undo command
            to unavailable state. The next operation will become the first undoable one.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Enable(System.Boolean)">
            <summary>
            Enables or Disables the undo manager.
            </summary>
            <remarks>
            If the undo manager is disabled, any following operation will not become part of the undo stack and 
            cannot be "undone" by any action, whether it is sent by user or code.
            </remarks>
            <param name="enabled">Specifies <c>True</c> for enable and <c>False</c> for disable.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.UndoSteps">
            <summary>
            Gets the number of undo/redo steps currently in the stack.
            </summary>
            <remarks>
            This property returns the number of undo/redo steps that can be issued by the undo command, NOT the
            number of packed steps, each undo manager instance covers. When one did five operations, then
            packed six operations into one stack and sent then two single operations, this property will
            returns eight (five, one for the packed stack and two).
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Type"/>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.CountUndos(GuruComponents.Netrix.ComInterop.Interop.IEnumOleUndoUnits)">
            <summary>
            Counts number of undo operations.
            </summary>
            <param name="enumerator"></param>
            <returns>Number of undo operations.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Do(GuruComponents.Netrix.ComInterop.Interop.IOleUndoManager)">
            <summary>
            Instructs the undo unit to carry out its action. Note that if it 
            contains child undo units, it must call their Do methods as well.
            </summary>
            <param name="undoManager">Specifies pointer to the undo manager.</param>
            <returns>Returns non zero interger value if the undo unit 
            successfully carried out its action</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.Name">
            <summary>
            Gets the name of the undo manager.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.GetLastDescription">
            <summary>
            Gets the description of the last operation collected by the undo/redo manager.
            </summary>
            <returns>Returns description of last operation.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.GetDescription(System.String@)">
            <summary>
            Returns a string that describes the undo unit and can be used in the undo 
            or redo user interface.
            </summary>
            <param name="s">Specifies the string describing this undo unit.</param>
            <returns>Returns non zero value if the string was successfully returned. </returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.GetUnitType(System.Int32@,System.Int32@)">
            <summary>
            Returns the CLSID and a type identifier for the undo unit
            </summary>
            <param name="clsid">Specifies CLSID for the undo unit.</param>
            <param name="plID">Specifies the type identifier for the undo unit. </param>
            <returns></returns>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.NextOperationAdded">
            <summary>
            Notifies that a new unit has been added.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.BatchedUndoUnit.OnNextAdd">
            <summary>
            Notifies the last undo unit in the collection that a new unit has been added.
            </summary>
            <remarks>
            An object can create an undo unit for an action and add it to the undo manager 
            but can continue inserting data into it through private interfaces. When the undo 
            unit receives a call to this method, it communicates back to the creating object 
            that the context has changed. Then, the creating object stops inserting data into 
            the undo unit.
            The parent undo unit calls this method on its most recently added child undo unit 
            to notify the child unit that the context has changed and a new undo unit has been 
            added.
            For example, this method is used for supporting fuzzy actions, like typing, which 
            do not have a clear point of termination but instead are terminated only when 
            something else happens.
            </remarks>
            <returns>Returns always non zero value. This return type is provided only for remotability.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor">
            <summary>
            Handles information about changes in the document and let control the dirty flag and change notifications.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.UnRegisterDirtyRange">
            <summary>
            Stops any further dirty range notification, corresponding to a given cookie, from the markup container.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.RegisterDirtyRange">
            <summary>
            Registers a given IHTMLChangeSink interface to receive dirty range notification from the markup container.
            </summary>
            <remarks>
            This method is called implicitly on each <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> event. You must call 
            <see cref="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.UnRegisterDirtyRange"/> to stop notifications in the <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> handler.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.CreateLog(System.Boolean,System.Boolean)">
            <summary>
            Creates a change log for a markup container and registers the change log to receive notice of any changes that take place in the container.
            </summary>
            <remarks>
            <para>
            To prevent this method from returning an error, set either fForward or fBackward, or both, to TRUE. These two parameters determine the kind of information that is stored in the change log. Forward information lets you replay a change (using IHTMLChangePlayback::ExecChange). Backward information lets you reverse a change.
            </para>
            <para>
            To stop receiving change notifications, call <see cref="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.ReleaseLog"/>.
            </para>  
            Version Information: This method is not support in NetRix Standard.
            </remarks>
            <see cref="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.GetNextChange"/>
            <param name="forward">Request forward information in your change log.</param>
            <param name="backward">Request backward information in your change log.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.ReleaseLog">
            <summary>
            
            </summary>
            <remarks>
            Version Information: This method is not support in NetRix Standard.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.GetNextChange">
            <summary>
            
            </summary>
            <remarks>
            Version Information: This method is not support in NetRix Standard.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.MasterElement">
            <summary>
            Retrieves the master element when a markup container belongs to a document that is a child of another one (like a frame within a frameSet).
            </summary>
            <remarks>
            Version Information: This method is not support in NetRix Standard.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.Versions">
            <summary>
            Retrieves a version number that represents the number of changes in a markup container's content.
            </summary>
            <remarks>
            Version Information: This method is not support in NetRix Standard.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeMonitor.GetDirtyRange">
            <summary>
            Retrieves and resets the dirty range associated with the current registration.
            </summary>
            <remarks>
            Version Information: This method is not support in NetRix Standard.
            </remarks>
            <returns>Returns an object which allows flexible access to the range.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeSink">
            <summary>
            Implements <see cref="T:GuruComponents.Netrix.ComInterop.Interop.IHTMLChangeSink"/> to receive Notify events in case of document changes.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.UndoRedo.ChangeSink.Change">
            <summary>
            Handle change event on higher level.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Behaviors.ElementSelectedBehavior">
            <summary>
            This class draws a border around a specific element to inform the user where the current selection
            is.</summary><remarks>
            Works only with elements having width and height attributes or block elements, regardless wether
            the attributes are set or not. It's used internally to use with atomic behaviors.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Behaviors.MapAreaBehavior">
            <summary>
            This class draws a border around a specific element to inform the user where the current selection
            is. Works only with elements having width and height attributes or block elements, regardless wether
            the attributes are set or not.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid">
            <summary>
            Displays a grid of pixels to help positioning elements in absolute position mode.
            </summary>
            <remarks>
            Optionally implements SnapRect to snap new elements to grid borders. Gridsize defaults to 8.
            <para>The grid does not make much sense in flow mode. Consider using <see cref="P:GuruComponents.Netrix.HtmlEditor.AbsolutePositioningEnabled">AbsolutePositioningEnabled</see>.</para>
            </remarks> 
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Behaviors.SnapElement"/>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.AbsolutePositioningEnabled">AbsolutePositioningEnabled</seealso>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapZone">
            <summary>
            Number of pixel the grid will snap.
            </summary>
            <remarks>
            If the grid is every 20 pixels and the zone is 5, the snap feature will work from pixel 15 to 25 on first column.
            The pixel between 25 and 35 on second column will not snap. If the zone is equal or greater, then grid elements
            will always snap.
            <para>
            The default value is 4. If the default grid size is 8 x 8, the snap feature will snap anywhere, if it is active.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapOnResize">
            <summary>
            Snap will also work on element resize.
            </summary>
            <remarks>
            The <see cref="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapZone"/> property applies, too.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridLineVisualisation">
            <summary>
            The visual appearance of lines, if used instead of points.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridLineWidth">
            <summary>
            The width of lines if the grid is shown as lines or the width of crosses in case cross view.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridVisualisation">
            <summary>
            The visual appearance of the grid.
            </summary>
            <remarks>
            The grid can appear as points (default), crosses and lines. Making crosses bigger than point distance will
            produce lines, too. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridVisible">
             <summary>
             Gets or sets the visibility of the grid.
             </summary>
             <remarks>
             The grid is a good base to build the VS.NET like GridLayout.
             <seealso cref="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapEnabled">SnapEnabled</seealso>
             <seealso cref="P:GuruComponents.Netrix.HtmlEditor.AbsolutePositioningEnabled">AbsolutePositioningEnabled</seealso>
             <seealso cref="P:GuruComponents.Netrix.HtmlEditor.MultipleSelectionEnabled">MultipleSelectionEnabled</seealso>
             </remarks>
             <example>
             To simulate the VS.NET GridLayout just set the following properties in one step. This code assumes that
             you have set the boolean member variable <c>State</c> before calling the sequence:
             <code>
            this.htmlEditor1.GridVisible = State;
            this.htmlEditor1.SnapEnabled = State;
            this.htmlEditor1.AbsolutePositioningEnabled = State;
            this.htmlEditor1.MultipleSelectionEnabled = State;</code>
             </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapEnabled">
            <summary>
            Enables snap of elements to grid if absolute positioning is enabled.
            </summary>
            <remarks>
            In flow layout is this function useless, therefore this options activates grid mode, too.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridSize">
            <summary>
            Gets or sets the gap between pixels shown as grid.
            </summary>
            <remarks>
            Defaults to 8 for both width and height, if no value is set. Setting values lower than 8 will cause performance
            problems on large surfaces because to many point are plotted with any screen refresh.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridColor">
            <summary>
            Gets or sets the color of the grid pixel.
            </summary>
            <remarks>
            Defaults to <c>Color.Black</c>.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates a grid object and sets the grid width to a default of 8.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.ToString">
            <summary>
            Returns a descriptive information about the number of changed properties for usage in design time environments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.Name">
            <summary>
            The name of the behavior.
            </summary>
            <remarks>
            The name is used to remove the behavior later. Readonly.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.Draw(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The method used to draw the grid.
            </summary>
            <remarks>
            The method cannot be changed. Internally the API-function <c>SetPixel</c> is used to avoid performance
            flaw.
            </remarks>
            <param name="leftBounds"></param>
            <param name="topBounds"></param>
            <param name="rightBounds"></param>
            <param name="bottomBounds"></param>
            <param name="hdc"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GuruComponents#Netrix#ComInterop#Interop#IHTMLPainter#OnResize(System.Int32,System.Int32)">
            <summary>
            Called when an element containing a rendering behavior is resized.
            </summary>
            <param name="cx">Width after resize</param>
            <param name="cy">Height after resize</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GuruComponents#Netrix#ComInterop#Interop#IHTMLPainter#GetPainterInfo(GuruComponents.Netrix.ComInterop.Interop.HTML_PAINTER_INFO)">
            <summary>
            This methode creates a PainterInfo object and returns it. Normally one shouldnot overwrite this
            method and use the properties <see cref="P:GuruComponents.Netrix.WebEditing.Behaviors.BaseBehavior.HtmlPaintFlag">HtmlPaintFlag</see> 
            and <see cref="P:GuruComponents.Netrix.WebEditing.Behaviors.BaseBehavior.HtmlZOrderFlag">HtmlZOrderFlag</see> instead.
            </summary>
            <param name="pInfo"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GuruComponents#Netrix#ComInterop#Interop#IHTMLPainter#HitTestPoint(System.Int32,System.Int32,System.Boolean@,System.Int32@)">
            <summary>
            The current test hit can checked against the element coordinates.
            </summary>
            <param name="ptx">X coordinate</param>
            <param name="pty">Y coordinate</param>
            <param name="pbHit"></param>
            <param name="plPartID"></param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Behaviors.SnapElement">
            <summary>
            A helper class used internally that let elements snap to grid positions in absolute position mode.
            </summary>
            <remarks>
            This class intercepts the drag event to snap elements to grid borders. Gridsize defaults to 8. That means, if you
            move an element in absolute position mode around the element "jumps" from one grid point to the next one. This 
            function helps aligning elements properly. 
            <para>
            This class is usually not used from custom code. To activate use the Grid's properties, such as <see cref="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapEnabled">SnapEnabled</see>
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid">HtmlGrid</seealso>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.CollectionInsertHandler">
            <summary>
            This is the handler definition for the collection insertion event. 
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.CollectionRemoveHandler">
            <summary>
            This is the handler definition for the collection remove event. 
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.CollectionClearHandler">
            <summary>
            This is the handler definition for the collection clear event. 
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.FrameElementCollection">
            <summary>
            This class stores a collection of frames. It supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.FrameElementCollection.Add(GuruComponents.Netrix.WebEditing.Elements.FrameElement)">
            <summary>
            Add a frame element to the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.FrameElementCollection.Contains(GuruComponents.Netrix.WebEditing.Elements.FrameElement)">
            <summary>
            Checks if the given frame element is already part of the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o">The frame element</param>
            <returns>True if the element is already part of the collection.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.FrameElementCollection.Remove(GuruComponents.Netrix.WebEditing.Elements.FrameElement)">
            <summary>
            Remove the given frame element from the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.FrameElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets a frame element in the collection using an index. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection">
            <summary>
            The purpose of this class is to provide a collection editor for linked style sheets.
            </summary>
            <remarks>
            This is necessary because any document can contain as many linked stylesheets as needed.   
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection.Add(GuruComponents.Netrix.WebEditing.Elements.LinkElement)">
            <summary>
            Adds a new element to the collection. Always set values for CSS (type="text/css" and rel="stylesheet").
            </summary>
            <remarks>
            This member supports the NetRix infrastructure and supports the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
            <param name="linkElement"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection.Contains(GuruComponents.Netrix.WebEditing.Elements.LinkElement)">
            <summary>
            Checks if the link element is part of the collection.
            </summary>
            <remarks>
            This member supports the NetRix infrastructure and supports the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
            <param name="linkElement"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection.Remove(GuruComponents.Netrix.WebEditing.Elements.LinkElement)">
            <summary>
            Removes the link element from the collection.
            </summary>
            <remarks>
            This member supports the NetRix infrastructure and supports the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
            <param name="linkElement"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets a link element in the collection using an index.
            </summary>
            <remarks>
            This member supports the NetRix infrastructure and supports the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element.</summary>
            <remarks>This member supports the NetRix infrastructure and supports the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection.OnClearHandler">
            <summary>
            Fired if the colection editor starts a new sequence. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.LinkElementCollection.OnRemoveHandler">
            <summary>
            Fired if an element is being removed.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection">
            <summary>
            A collection of meta tags (&lt;meta name="" ... &gt;) or HTTP-EQUIV meta tags
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection.Add(GuruComponents.Netrix.WebEditing.Elements.MetaElement)">
            <summary>
            Adds a meta element to the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="metaElement"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection.Contains(GuruComponents.Netrix.WebEditing.Elements.MetaElement)">
            <summary>
            Checks if this meta element is part of the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="metaElement"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection.Remove(GuruComponents.Netrix.WebEditing.Elements.MetaElement)">
            <summary>
            Remove the meta element from the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="metaElement"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets a meta element in then collection using an index. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection.OnClearHandler">
            <summary>
            Fired if the collection editor starts a new sequence. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.MetaElementCollection.OnRemoveHandler">
            <summary>
            Fired if an element is being removed.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection">
            <summary>
            This class provides support for the script element editor.
            </summary>
            <remarks>
            The programmatic access to the script element collection can be used to control any script block
            in the head section of the document. New script elements are alwas inserted in the head section.
            To control the order the list must be removed completely and the elements must be add in the requested 
            order. 
            </remarks>
            <example>
            The following example shows how to insert a JavaScript section if the user changes the value of any
            script event in the propertygrid. To have the current element in the propertygrid, attach the
            HtmlElementChanged event of the base class to the appropriate handler and set the current element
            to the SelectedObject property. Then attach the PropertyValueChanged event to an handler. The following 
            code shows that handler and the code needed to insert an new script element on any change.
            <code>
            private void propertyGrid1_PropertyValueChanged(object s, System.Windows.Forms.PropertyValueChangedEventArgs e)
            {
                if (e.ChangedItem.Label.StartsWith("Script"))
              {
                ScriptElement script = new ScriptElement();
                StringBuilder sb = new StringBuilder();
                sb.AppendFormat("function {0}()", e.ChangedItem.Value.ToString());
                sb.Append(Environment.NewLine);
                sb.Append("{" + Environment.NewLine);
                sb.Append("}" + Environment.NewLine);
                script.ScriptContent = sb.ToString();
                this.htmlEditor3.DocumentStructure.ScriptBlocks.Add(script);
              }
            }
            </code>
            In reality this method must be enhanced to support changes and removing. It is recommended to investigate
            the event argument <c>e</c> to see how to gather more information about the current changed property.
            </example>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.Add(GuruComponents.Netrix.WebEditing.Elements.ScriptElement)">
            <summary>
            Adds a script element to the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.Contains(GuruComponents.Netrix.WebEditing.Elements.ScriptElement)">
            <summary>
            Checks if the element is part of the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.Remove(GuruComponents.Netrix.WebEditing.Elements.ScriptElement)">
            <summary>
            Removes the element from the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.Clear">
            <summary>
            Clears the list and calles the <see cref="E:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.OnClearHandler"/> event.
            </summary>
            <seealso cref="E:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.OnClearHandler"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets a script element in the collection using an index. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element. 
            </summary>
            <remarks>
            This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.ScriptElementCollection.OnClearHandler">
            <summary>
            Fired if the colection editor starts a new sequence.
            </summary>
            <remarks>
            This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.StyleElementCollection">
            <summary>
            The purpose of this class is to provide a collection editor for embedded style elements. This is 
            necessary because any document can contain as many style tags as needed.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.StyleElementCollection.Add(GuruComponents.Netrix.WebEditing.Elements.StyleElement)">
            <summary>
            Adds a style element to the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.StyleElementCollection.Contains(GuruComponents.Netrix.WebEditing.Elements.StyleElement)">
            <summary>
            Checks if the element is part of the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.StyleElementCollection.Remove(GuruComponents.Netrix.WebEditing.Elements.StyleElement)">
            <summary>
            Removes the element from the collection. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.StyleElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets a style element in the collection using an index. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.StyleElementCollection.OnInsertHandler">
            <summary>
            Fired if the collection editor inserts a new element. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.StyleElementCollection.OnClearHandler">
            <summary>
            Fired if the colection editor starts a new sequence. This member supports the NetRix infrastructure and is used to 
            support the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure">
            <summary>
            This class represents a HTML document and its various settings
            </summary>
            <remarks>
            Especially it contains information from the header block, like title, meta tags and linked stylesheets.
            The class allows access to script blocks, and frame definitions, too.
            The common properties can be changed through the PropertyGrid, optionally, some
            others are informative, like number of images, frames or script blocks.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Documents.IDocumentStructure">IDocumentStructure</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.SetBgSound(System.String)">
            <overloads/>
            <summary>
            Inserts a BGSOUND tag in the head section.
            </summary>
            <remarks>
            The default value for LOOPS is set to -1, the default for AUTOSTART is set to TRUE.
            </remarks>
            <param name="src">The name of the sound file to be played.</param>
            <returns>Returns the native element object.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.SetBgSound(System.String,System.Int32)">
            <summary>
            Inserts a BGSOUND tag in the head section.
            </summary>
            <remarks>
            The default for AUTOSTART is set to TRUE.
            </remarks>
            <param name="src">The name of the sound file to be played.</param>
            <param name="loop">How man yloops the sound will run.</param>
            <returns>Returns the native element object.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.SetBgSound(System.String,System.Int32,System.Boolean)">
            <summary>
            Inserts a BGSOUND tag in the head section.
            </summary>
            <remarks>
            All parameters can be set directly.
            </remarks>
            <param name="src">The name of the sound file to be played.</param>
            <param name="loop">The number of loops the sound should play. Set -1 for infinite loops.</param>
            <returns>Returns the native element object.</returns>
            <param name="autostart"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.SetBase(System.String)">
            <overloads/>
            <summary>
            Inserts a BASE element without target information.
            </summary>
            <param name="href">Set the default address for hypertext links.</param>
            <returns>Returns the native element object.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.SetBase(System.String,System.String)">
            <summary>
            Inserts a BASE element.
            </summary>
            <param name="href">Set the default address for hypertext links.</param>
            <param name="target">Sets the default window for linked documents. Can be <c>null</c> (<c>Nothing</c> in Visual Basic) to avoid setting this attribute.</param>
            <returns>Returns the native element object.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.GetBase">
            <summary>
            Returns the current BASE element. 
            </summary>
            <returns>Return the BaseElement object, if any, or <c>null</c> (<c>Nothing</c> in Visual Basic) if there is no such element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.GetBgSound">
            <summary>
            Returns the current BGSOUND element. 
            </summary>
            <returns>Return the BgSoundElement object, if any, or <c>null</c> (<c>Nothing</c> in Visual Basic) if there is no such element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.GetElementCollection(System.String)">
            <summary>
            Get a collection of elements from the given tag name.
            </summary>
            <remarks>
            <para>
            For element type related operations this method retrieves a collection (ArrayList) of 
            elements of a given tag name. This method is commonly used to add DHTML events to specific
            elements, and add wizards or dialogs to - for example - a double click.
            </para>
            <para>
            The objects in the ArrayList are derived from IElement interface. They normally have their
            native base type, e.g. if one retrieves the collection of "A" tags the objects are from type
            <see cref="T:GuruComponents.Netrix.WebEditing.Elements.AnchorElement"/>. It is not recommended to change the expected base type. Even if
            it is working, it fails under some circumstances due to the different types of properties the
            elements provide. Returning the interface instead of a native class is a simplification to
            avoid the need of many getter methods for each type of element.
            </para>
            </remarks>
            <param name="tagName">The tag name to be retrieved.</param>
            <returns>The method returns <c>null</c> (<c>Nothing</c> in VB) if no such elements in the document.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.ScriptBlocks">
            <summary>
            Get the collection of script blocks.
            </summary>
            <remarks>Supports PropertyGrid by applying a simple script editor (not supported
            in NetRix Light version).</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.NamedMetaTags">
            <summary>
            Get the current collection of META tags.</summary>
            <remarks>
            <para> The getter is called by the propertygrid via reflection
            to determine the META tags and use events to propagate new values.
            The setter is only to use from the host application and set the complete collection at once. To 
            add one value only just call the getter and then the Add() method.</para>
            <para>To delete the whole list simply assign null: <c>MetaCollection = null;</c>. This will <i>not</i> 
            destroy the object internally nor clear any resources, it will just call the <c>Clear</c> method.</para>
            </remarks>
            <example>
            The following example retrieves two TextBox controls to add a new META tag. It assumes that the
            current collection was previously retrieved by calling <c>this.MetaElements = this.HtmlEditor.DocumentStructure.MetaTags;</c>.
            <code>
            private void buttonAdd_Click(object sender, System.EventArgs e)
            {
              if (this.textBoxName.Text.Length == 0 || this.textBoxContent.Text.Length == 0)
              {
                  MessageBox.Show("Cannot add empty fields");
              } 
              else 
              {
                  MetaElement mE = new MetaElement();
                  mE.name = this.textBoxName.Text;
                  mE.content = this.textBoxContent.Text;
                  this.MetaElements.Add(mE);
              }
            }
            </code>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.MetaElement"/>
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.HttpEquivMetaTags">
            <summary>
            Get the current collection of HTTP-EQUIV META tags.
            </summary>
            <remarks>
            <para> The getter is called by the propertygrid via reflection
            to determine the META tags and use events to propagate new values. HTTP-EQUIV meta tags are modifiers for
            HTTP headers. The are often used to implement auto refresh or overwrite the default settings for charset or MIME type.
            The setter is only to use from the host application and set the complete collection at once. To 
            add one value only just call the getter and then the Add() method.</para>
            <para>To delete the whole list simply assign null: <c>MetaCollection = null;</c>. This will <i>not</i> 
            destroy the object internally nor clear any resources, it will just call the <c>Clear</c> method.</para>
            <para>
            The <see cref="T:GuruComponents.Netrix.WebEditing.Elements.MetaElement"/> object is the same as used for named META tags. The both attributes used here
            (name="" and http-equiv="") are programmed in a toggle manner. This means that if the attribute name is set
            from hsot app the http-equiv parameter will set to String.Empty and vice versa.
            </para>
            </remarks>
            <example>
            The following example retrieves two TextBox controls to add a new META tag. It assumes that the
            current collection was previously retrieved by calling <c>this.MetaElements = this.HtmlEditor.DocumentStructure.MetaTags;</c>.
            <code>
            private void buttonAdd_Click(object sender, System.EventArgs e)
            {
              if (this.textBoxName.Text.Length == 0 || this.textBoxContent.Text.Length == 0)
              {
                  MessageBox.Show("Cannot add empty fields");
              } 
              else 
              {
                  MetaElement mE = new MetaElement();
                  mE.httpEquiv = this.textBoxName.Text;
                  mE.content = this.textBoxContent.Text;
                  this.MetaElements.Add(mE);
              }
            }
            </code>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.MetaElement"/>
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.EmbeddedStylesheets">
            <summary>
            This getter retrieves the collection of embedded stylesheets.
            </summary>
            <remarks>
            The property detects the style tags in the head section only.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.LinkedStylesheets">
            <summary>
            This getter retrieves the collection of linked stylesheets.
            </summary>
            <remarks>It detects the stylesheets in link tags in a tolerant
            way, ether by checking the type attribute for "text/css" or the url in href attribute 
            ends with ".css".
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.Title">
            <summary>
            Sets or gets the document title.
            </summary>
            <remarks>
            If rendered in a browser the title appears in the window's title bar.
            In HTML it's rendered into the &lt;title&gt; tag on the head section.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.Encoding">
            <summary>
            Gets the current documents encoding.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.charset">
            <summary>
            Gets the character set used by the document.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.URL">
            <summary>
            Gets the URL or local path where the document comes from. Set to "about:blank" if newly created.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.BasePath">
            <summary>
            Returns the base path of the document without filename.
            </summary>
            <remarks>Used to build relative paths
            (links) from this document to subdocs, like script blocks, stylesheets etc.
            If the document is in browse mode and URL returns a URI beginning with "http:", we
            return nothing here (String.Empty).
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.LoadTime56K">
            <summary>
            The time it takes to load the document with a 56K modem connection. This value does
            not calculate the embedded elements, images and so on.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.FileSize">
            <summary>
            The file size in bytes.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.FileLastModified">
            <summary>
            Time and date when the file was last modified.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.NumberOfFrames">
            <summary>
            The number of frames defined in this document. Does not recognize IFrame tags.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.NumberOfStylesheets">
            <summary>
            The number of styles defined in this document. Does not recognize inline style tags.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.NumberOfImages">
            <summary>
            The number of embedded images.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.NumberOfScriptBlocks">
            <summary>
            The number of script blocks.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.NumberOfMetaTags">
            <summary>
            The total number of meta tags.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.ToString">
            <summary>
            Overridden to help designers displaying the object to the user.
            </summary>
            <returns>The string [DOCUMENT]</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RemoveBaseNode">
            <summary>
            Removes the BASE element and returns the href attribute for further reference. 
            </summary>
            <returns>href</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.GetHeadElements(System.String)">
            <summary>
            Get the collection of head elements filtered by the given tagname. Throws an exception if the head is not 
            structured as expected. 
            </summary>
            <param name="tagName">Tagname to filter</param>
            <returns>Interop.IHTMLElementCollection or null, if there are no such elements in the head section.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RemoveAllMetaElements(System.String)">
            <summary>
            Removes all META tags in header to prepare the document to load the changed list after insert or remove actions.
            </summary>
            <param name="attribute">Remove only tags with this existing attribute, ether "name" or "http-equiv".</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RemoveAllLinkElements(System.String)">
            <summary>
            Removes all LINK tags in header to prepare the document to load the changed list after insert or remove actions.
            </summary>
            <param name="typeParameter">Remove only tags with this existing attribute (text/css commonly).</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RemoveAllStyleElements">
            <summary>
            Removes all STYLE tags in header to prepare the document to load the changed list after insert or remove actions.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RemoveAllScriptElements">
            <summary>
            Removes all script elements defined in the head area. TODO: additional param to control scripts in body?
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.Help">
            <summary>
            Fires when the user presses the F1 key while the browser is the active window.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.Click">
            <summary>
            Fires when the user clicks the left mouse button on the object. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.DblClick">
            <summary>
            Fires when the user double-clicks the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.KeyDown">
            <summary>
            Fires when the user presses a key.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.KeyUp">
            <summary>
            Fires when the user releases a key.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.KeyPress">
            <summary>
            Fires when the user presses an alphanumeric key.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.MouseDown">
            <summary>
            Fires when the user clicks the object with either mouse button.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.MouseMove">
            <summary>
            Fires when the user moves the mouse over the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.MouseUp">
            <summary>
            Fires when the user releases a mouse button while the mouse is over the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.MouseOut">
            <summary>
            Fires when the user moves the mouse pointer outside the boundaries of the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.MouseOver">
            <summary>
            Fires when the user moves the mouse pointer into the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.ReadystateChange">
            <summary>
            Fires when the state of the object has changed.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.BeforeUpdate">
            <summary>
            Fires on a databound object before updating the associated data in the data source object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.AfterUpdate">
            <summary>
            Fires on a databound object after successfully updating the associated data in the data source object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RowExit">
            <summary>
            Fires just before the data source control changes the current row in the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RowEnter">
            <summary>
            Fires to indicate that the current row has changed in the data source and new data values are available on the object. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.DragStart">
            <summary>
            Fires on the source object when the user starts to drag a text selection or selected object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.SelectStart">
            <summary>
            Fires when the object is being selected.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.ErrorUpdate">
            <summary>
            Fires on a databound object when an error occurs while updating the associated data in the data source object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.ContextMenu">
            <summary>
            Fires when the user clicks the right mouse button in the client area, opening the context menu.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.Stop">
            <summary>
            Fires when the user leaves the Web page.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RowsDelete">
            <summary>
            Fires when rows are about to be deleted from the recordset.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.RowsInserted">
            <summary>
            Fires just after new rows are inserted in the current recordset.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.CellChange">
            <summary>
            Fires when data changes in the data provider.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.PropertyChange">
            <summary>
            Fires when a property changes on the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.DatasetChanged">
            <summary>
            Fires when the data set exposed by a data source object changes.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.DataAvailable">
            <summary>
            Fires periodically as data arrives from data source objects that asynchronously transmit their data.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.DatasetComplete">
            <summary>
            Fires to indicate that all data is available from the data source object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.BeforeEditFocus">
            <summary>
            Fires before an object contained in an editable element enters a UI-activated state or when an editable container object is control selected.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.SelectionChange">
            <summary>
            Fires when the selection state of a document changes.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.ControlSelect">
            <summary>
            Fires when the user is about to make a control selection of the object.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.MouseWheel">
            <summary>
            Fires when the wheel button is rotated.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.FocusIn">
            <summary>
            Fires for an element just prior to setting focus on that element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.FocusOut">
            <summary>
            Fires for the current element with focus immediately after moving focus to another element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.Activate">
            <summary>
            Fires when the object is set as the active element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.Deactivate">
            <summary>
            Fires when the activeElement is changed from the current object to another object in the parent document.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.BeforeActivate">
            <summary>
            Fires immediately before the object is set as the active element.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.BeforeDeactivate">
            <summary>
            Fires immediately before the activeElement is changed from the current object to another object in the parent document.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.CreateStyleSheet(System.String)">
            <overloads/>
             <summary>
             Creates a style sheet for the document.
             </summary>
             <param name="linkedStyleSheet">Specifies how to add the style sheet to the document. 
             If a file name is specified for the URL, the style information will be added as a link object. 
             If the URL contains style information, this information will be added to the style object.</param>
             <returns>Returns StyleSheet information.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.CreateStyleSheet(System.String,System.Int32)">
            <summary>
            Creates a style sheet for the document.
            </summary>
            <param name="linkedStyleSheet">Specifies how to add the style sheet to the document. If a file name is specified for the URL, the style information will be added as a link object. If the URL contains style information, this information will be added to the style object.</param>
            <param name="index">Specifies the index that indicates where the new style sheet is inserted in the styleSheets collection.</param>
            <returns>Returns StyleSheet information.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlDocumentStructure.GetDocumentStyleSelectors(System.String)">
            <summary>
            This method returns all style selectors linked with the current document this element is in.
            </summary>
            <remarks>
            The type will be recognized by the sign typically used for selectors, like ".class", "#id", and "@rule".
            </remarks>
            <param name="selectorType">String with the type</param>
            <returns>Array of objects</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet">
            <summary>
            HtmlFrameSet represents a complete framed master document.
            </summary>
            <remarks>
            This is the document containing
            one or more FrameSet tags. It returns a collection of FrameWindow objects which contain the
            complete frames, including all content and site management. It also contains a collection
            of HtmlFrameSet objects which represent frame documents which contain frames themself. This
            is a recursive strategy so there is no limit in handling nested frames.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Documents.IFrameSet">IFrameSet</seealso>
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow">
            <summary>
            This class represents a single frame in the frameset.
            </summary>
            <remarks>
            Its objects are stored together with
            the related Site to handle the events.  
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.GetInteropDocument">
            <summary>
            Returns the document object of this frame. Used to set as active document
            after changing the active frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.Exec(System.Int32)">
            <summary>
            Executes the specified command in this Frame.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.Exec(System.Int32,System.Object)">
            <summary>
            Executes the specified command in this Frame with the specified arguments.
            </summary>
            <param name="command"></param>
            <param name="argument"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.DeactivateDesigner">
            <summary>
            Deactivate the frame designer and remove all attached behaviors.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.RemoveAllBehaviors">
            <summary>
            Removes all attached behaviors assigned to that frame.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.ContentEditable">
            <summary>
            Make the content editable in the editor. Gets the current editable state.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.IsDirty">
            <summary>
            Gets true if content was changed snce last save operation.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.Encoding">
            <summary>
            Sets or gets the current encoding for that frame.
            </summary>
            <remarks>
            It is not necessary to set
            this property as it defaults to the global Encoding of the main document.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.SaveRawContent">
            <summary>
            Save the raw content into the file the frame was loaded from. Overwrites.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.GetFullPathUrl">
            <summary>
            Returns the full path to the document based on the relative path and the current position
            in file system.
            </summary>
            <remarks>
            If the Source is a HTTP URL this method returns the Url as is.
            The internally used URI format with file:// moniker is removed before returning.
            </remarks>
            <returns>Full path in file format, leading monikers are removed, URL coding is decoded.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.GetRawContent">
            <summary>
            Returns the raw content.
            </summary>
            <remarks>
            Usable if the host application has its own save method.
            </remarks>
            <returns>String with raw content</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.GetBodyContent">
            <summary>
            Returns a string with the outer html of the body.
            </summary>
            <remarks>
            This is for further investigation only,
            not for saving, as it does not contain the full content.
            </remarks>
            <returns>String which contains the content of the frame.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.FrameName">
            <summary>
            The name of the frame as it is in the name attribute of the frame definition.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.FrameSrc">
            <summary>
            The frame src attribute, mostly the filename and a relative path. URL format.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.Clone">
            <summary>
            Clones the object to give losed access to the properties. Cloning is recommend if the application
            changes the properties but disposes the objects later and let the garbage collector remove them.
            Without cloning it is possible that internal processes fail later due to missing references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.RemoveBehavior(GuruComponents.Netrix.WebEditing.Behaviors.IBaseBehavior)">
            <summary>
            Add a behavior to this frame.
            </summary>
            <remarks>
            Binary behaviors are permanent drawings on the surface. Multiple
            behaviors are drawn in the order they are added.
            </remarks>
            <param name="behavior">The behavior that is used to change the frame area.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.GetFormattedContent(GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions)">
            <summary>
            Returns a well formatted representation of the frame content.
            </summary>
            <param name="fo">The Formatter Options used to format the code.</param>
            <returns>Returns a string of well formatted and XHTML compatible content.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.SaveFormattedContent(GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions)">
            <summary>
            Save the formatted content into the file the frame was loaded from.
            </summary>
            <remarks>
            Overwrites the content to the existing (underlying) file.
            </remarks>
            <param name="fo">The Formatter Options used to format the content.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.AddBehavior(GuruComponents.Netrix.WebEditing.Behaviors.IBaseBehavior)">
            <summary>
            Remove a previously set binary behavior.
            </summary>
            <remarks> See also <see cref="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.AddBehavior(GuruComponents.Netrix.WebEditing.Behaviors.IBaseBehavior)"/>.</remarks>
            <param name="behavior">The behavior object that has to be removed.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow.NativeFrameElement">
            <summary>
            Returns the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.FrameElement"/> which represents the object of the frame.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.IsFirstActivated">
            <summary>
            Returns <c>true</c>, if the frame was first time activated by user action.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.ActivateFrames">
            <summary>
            This public method creates a collection of all frames in the document, regardless in which frameset
            they are placed.
            </summary>
            <remarks>
            The collection contains <see cref="T:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameWindow"/> objects. 
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.DeactivateFrames">
            <summary>
            Removes the attached frame behaviors and deactivate the frame editor.
            </summary>
            <remarks>
            Clears the frame collection. The document
            will still remains in memory and can be edited using standard editing features.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameCollection">
            <summary>
            Gets the collection of FrameWindow objects.
            </summary>
            <remarks>
            Each entry represents one 
            frame in the current frameset. Return null if there are no frames.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameSetCollection">
            <summary>
            Gets the collection of Framesets.
            </summary>
            <remarks>
            This list contains documents which are part
            of a framed document and contain a additional frame definition. Each document
            is represented by a HtmlFrameSet object which contains FrameWindow object and so on,
            in recursively manner.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.GetActiveFrame">
            <summary>
            Returns the active frame windows object.
            </summary>
            <remarks>Set by the event fired from MSHTML Site.</remarks>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.Count">
            <summary>
            The number of frames of the current set. Frames in subsets are not counted.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.GetFrameStructure">
            <summary>
            Returns the structure of the frame definition document as <see cref="T:System.Xml.XmlDocument"/> object.
            </summary>
            <remarks>
            This is not an interactive
            access to the underlying structure and therefore changes in the DOM of the returned object are not reflected in the
            document. To change the structure using XML it is recommended to read <see cref="T:System.Xml.XmlDocument"/> object, change the content
            and reload the document using the <see cref="M:GuruComponents.Netrix.HtmlEditor.LoadUrl(System.String)"/> method.
            </remarks>
            <exception cref="T:System.Xml.XmlException">Access to formatter fails due to unexpected content.</exception>
            <returns>In XmlDocument object which contains the complete base document with the frame structure.</returns>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameActivated">
            <summary>
            Fired if any of the frames in that set is beeing activated.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet.FrameDeActivated">
            <summary>
            Fired if related from losses the focus (by getting a blur on window level).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.HtmlTimer">
            <summary>
            HtmlWindow allows basic access to window and document related features outside the designer scope.
            </summary>
            <remarks>
            The class is being used to access scripting sections, execute JavaScript and open embedded 
            scripting dialogs.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow">
            <summary>
            HtmlWindow allows basic access to window and document related features outside the designer scope.
            </summary>
            <remarks>
            The class is being used to access scripting sections, execute JavaScript and open embedded 
            scripting dialogs.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.GetElementFromPoint(System.Drawing.Point)">
            <summary>
            Returns the element for the specified x and y coordinates.
            </summary>
            <remarks>
            Coordinates are supplied in client coordinates. The top left corner of the client area is (0,0). 
            For this method to exhibit expected behavior, the element located at position (x, y) must 
            support and respond to mouse events.
            <para>
            The parameter accepts values directly exposed by Mouse event handlers, such as MouseMove.
            There is no need to convert to Client as well as Screen coordinates or whatever.
            </para>
            <para>
            If element was not found or not recognized, the method returns the Body element. However, it
            returns <c>null</c> (<c>Nothing</c> in Visual Basic) if the element was unknow to the list of registered
            elements. This happens, for instance, for VML elements, which indeed render in MSHTML, but 
            are not supported by NetRix v1. NetRix v2 and newer which have extensible element support
            will return the native element object, then.
            </para>
            </remarks>
            <param name="point">X- and Y-offset, in pixels.</param>
            <returns>Element for the specified x and y coordinates. Returns <c>null</c> (<c>Nothing</c> in Visual Basic) if the element was unknow.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.GetElementFromCaret">
            <summary>
            Returns the element which is directly under the caret.
            </summary>
            <remarks>
            In case of invisible caret this method may return unpredictable results.
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.GetElementFromPoint(System.Drawing.Point)"/>
            </remarks>
            <returns>Returns IElement object from caret.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.GetCaretLocation">
            <summary>
            Return the current location of the caret within the editor.
            </summary>
            <returns>Return the position in client coordinates.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.GetActiveElement">
            <summary>
            Retrieves the element that has the focus when the document has focus.
            </summary>
            <returns>Element of type <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/> interface that is the element that has the focus.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.FireScriptEvent(System.String,GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Fires a specified script event on the given object.
            </summary>
            <remarks>
            In difference to the <c>fireEvent</c> object the underlying IHTMLElement class provides it is always 
            necessary to provide a valid <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/> object. The method call will fail if the element is
            not reletad to the current window or <c>null</c> (<c>Nothing</c> in Visual Basic).
            <para>
            If the event being fired cannot be cancelled, the method always returns <c>true</c>. 
            </para>
            <para>
            This method is available at runtime only. At design time it returns always true, but the event is not
            getting executed. To switch to runtime just set <see cref="P:GuruComponents.Netrix.HtmlEditor.DesignModeEnabled">DesignModeEnabled</see> to <c>false</c>.
            Remember to wait for <see cref="M:GuruComponents.Netrix.HtmlEditor.OnReadyStateComplete(System.EventArgs)">OnReadyStateComplete</see>
            event before executing script calls after changing the document mode.
            </para>
            <para>
            The script code can be either JavaScript/JScript or VBScript.
            </para>
            <para>
            Regardless of their values specified in the event object, the values of the four event properties—cancelBubble, returnValue, srcElement, and type—are automatically initialized to the values shown in the following table:
            <list type="table">
            <listheader><item>Event object property</item><item>Value</item></listheader>
            <item>
                <term>cancelBubble</term><term>false</term>
            </item>
            <item>
                <term>returnValue</term><term>true</term>
            </item>
            <item>
                <term>srcElement</term><term>element on which the event is fired</term>
            </item>
            <item>
                <term>type</term><term>name of the event that is fired</term>
            </item>
            </list>
            </para>
            </remarks>
            <example>
            <code>
            IElement element = htmlEditor1.GetElementById("button1");
            bool success = FireScriptEvent("OnClick", element);
            </code>
            </example>
            <param name="eventName">String that specifies the name of the event to fire.</param>
            <param name="element">Object that specifies the event object from which to obtain event object properties.</param>
            <returns>Returns <c>true</c> if the event fired successfully.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScreenPosition">
            <summary>
            Gets the absolute position of the screen this windows has occupied.
            </summary>
            <remarks>
            Retrieves the coordinates of the upper corner of the browser's client area, relative to the upper corner of the screen.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ExecScript(System.String)">
            <overloads/>
            <summary>
            Executes the specified script in the provided language.
            </summary>
            <remarks>
            Script executed through the IWindow.execScript method can access all global variables available to the calling script. This can be useful when you want the functionality of another scripting language that would not otherwise be available in JScript, such as the Microsoft Visual Basic Scripting Edition (VBScript) MsgBox function.
            <para>
            This method is available at runtime as well as at design time.
            </para>
            </remarks>
            <param name="scriptCode">Value that specifies the code to be executed.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ObjectForScripting">
            <summary>
            Define an object that is being used as call back from JScript using the 'external' property.
            </summary>
            <remarks>
            First, decorate a class with callback methods with attributes as shown below. Then assign
            in ReadyStateComplete event handler. Load JScript code and execute. Control must be in 
            Non design mode
            <code>
            [PermissionSet(SecurityAction.Demand, Name = "FullTrust")]
            [System.Runtime.InteropServices.ComVisibleAttribute(true)]
            public class JCall
            {
                public void MyTest()
                {
                   MessageBox.Show("Test called", "Testbox");
                }
            }
            private void htmlEditor1_ReadyStateComplete(object sender, EventArgs e)
            {
                htmlEditor1.Window.ScriptError += new GuruComponents.Netrix.Events.ShowErrorHandler(Window_ScriptError);
                htmlEditor1.Window.ScriptMessage += new GuruComponents.Netrix.Events.ShowMessageHandler(Window_ScriptMessage);
                htmlEditor1.Window.ObjectForScripting = new JCall();
            {
            // This is in InitializeComponent():
            htmlEditor1.DesignModeEnabled = false;
            // This is an action invokes by menu call ==> Click on Button in HTML calls C# method MyTest in class JCall
            htmlEditor1.LoadHtml("&lt;button onclick='window.external.MyTest()' /&gt;");
            </code>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ExecScript(System.String,System.String)">
            <summary>
            Executes the specified script in the provided language.
            </summary>
            <remarks>
            Script executed through the IWindow.execScript method can access all global variables available to the calling script. This can be useful when you want the functionality of another scripting language that would not otherwise be available in JScript, such as the Microsoft Visual Basic Scripting Edition (VBScript) MsgBox function.
            <para>
            This method is available at runtime as well as at design time.
            </para>
            </remarks>
            <param name="scriptCode">Value that specifies the code to be executed.</param>
            <param name="language">Value that specifies the language in which the code is executed. The language defaults to Microsoft JScript.</param>
            <returns>Returns result of function execution.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ShowPrompt(System.String,System.String)">
            <summary>
            Displays a dialog box that prompts the user with a message and an input field.
            </summary>
            <param name="message">Value that specifies the message to display in the dialog box.</param>
            <param name="definition">Value that specifies the default value of the input field. By default, this parameter is set to "undefined".</param>
            <returns>Returns the value typed in by the user.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ShowAlert(System.String)">
            <summary>
            Displays a dialog box containing an application-defined message. 
            </summary>
            <remarks>You cannot change the title bar of the Alert dialog box.</remarks>
            <param name="message">Value that specifies the message to display in the dialog box.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ShowConfirm(System.String)">
            <summary>
            Displays a confirmation dialog box that contains an optional message as well as OK and Cancel buttons.
            </summary>
            <param name="message">Value that specifies the message to display in the confirmation dialog box. If no value is provided, the dialog box does not contain a message.</param>
            <returns>True, if the user clicked the OK button. False, if the user clicked Cancel button.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScrollBy(System.Int32,System.Int32)">
            <summary>
            Causes the window to scroll relative to the current scrolled position by the specified x- and y-pixel offset.
            </summary>
            <param name="x">Value that specifies the horizontal scroll offset, in pixels. Positive values scroll the window right, and negative values scroll it left.</param>
            <param name="y">Value that specifies the vertical scroll offset, in pixels. Positive values scroll the window down, and negative values scroll it up.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScrollTo(System.Int32,System.Int32)">
            <summary>
            Causes the window to scroll to the specified x- and y-offset at the upper-left corner of the window. 
            </summary>
            <param name="x">Value that specifies the horizontal scroll offset, in pixels.</param>
            <param name="y">Value that specifies the vertical scroll offset, in pixels.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ShowWebPageDialog(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads/>
            <summary>
            Creates a modeless or modal dialog box that displays the specified HTML document.
            </summary>
            <remarks>See other overloads for additional information.</remarks>
            <param name="fileName"></param>
            <param name="height"></param>
            <param name="width"></param>
            <param name="top"></param>
            <param name="left"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ShowWebPageDialog(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a modeless or modal dialog box that displays the specified HTML document.
            </summary>
            <remarks>
            The unit used for the properties height, width, top and left is pixels. The property center will be ignoring
            the values for top and left to position the window in the screens center. 
            The minimum height is 100 pixels, any smaller value will be ignored and set to at least 100. Despite that,
            the user can resize to smaller values if resizing is allowed.
            <para>
            This method fails, if the base document has no document loaded or the loaded document is from a different
            domain. That means, that the caller must assure that, if the base fileName property points to a local file,
            the base document must have a local document loaded. 
            </para>
            <para>
            If the dialog is non-modal, it stays still always on top of the host application. The method can be called multiple
            times to produce multiple windows, which exists independently from each other.
            </para>
            <para>
            If the document contains links with targets other than _self, a new Internet Explorer window will open to follow
            the link. This window does not have any conjunction with the host application and can therefore not being controlled
            from NetRix. To avoid this, carefully set the target="_self" attribute for all links. Remember, that the
            dialog opened cannot be controlled from NetRix and therefore does not provide any editing capabilities
            nor fires any events.
            </para>
            <para>
            The title of the dialog box is always the content of the title tag and the string "-- Web Page Dialog". This
            behavior cannot be changed. The dialog has no select, drag 'n drop and other mouse related features. 
            </para>
            </remarks>
            <param name="fileName">Specifies the URL of the document to load and display.</param>
            <param name="modal">If false, creates a modeless dialog box that displays the specified HTML document. If true, creates a modal dialog box that displays the specified HTML document.</param>
            <param name="height">Sets the height of the dialog window (see Remarks for default unit of measure).</param>
            <param name="width">Sets the width of the dialog window (see Remarks for default unit of measure).</param>
            <param name="top">Sets the top position of the dialog window relative to the upper-left corner of the desktop.</param>
            <param name="left">Sets the left position of the dialog window relative to the upper-left corner of the desktop.</param>
            <param name="center">Specifies whether to center the dialog window within the desktop. The default is true.</param>
            <param name="hide">Specifies whether the dialog window is hidden when printing or using print preview.</param>
            <param name="edgeSunken">Specifies the edge style of the dialog window. The value false is raised.</param>
            <param name="helpIcon">Specifies whether the dialog window displays the context-sensitive Help icon.</param>
            <param name="resizable">Specifies whether the dialog window has fixed dimensions.</param>
            <param name="scrollBar">Specifies whether the dialog window displays scrollbars.</param>
            <param name="statusBar">Specifies whether the dialog window displays a status bar.</param>
            <param name="unAdorned">Specifies whether the dialog window displays the border window chrome.</param>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.Load">
            <summary>
            Fires immediately after the browser loads the object. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.Unload">
            <summary>
            Fires immediately before the object is unloaded. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.Help">
            <summary>
            Fires when the user presses the F1 key while the browser is the active window.
            </summary>
            <remarks>
            If the internal shortcut processing is suppressed the event will not fire.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.Focus">
            <summary>
            Fires when the object receives focus. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.Blur">
            <summary>
            Fires when the object loses the input focus.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.Resize">
            <summary>
            Fires when the size of the window is about to change. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.Scroll">
            <summary>
            Fires when the user repositions the scroll box in the scroll bar on the object. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.BeforeUnload">
            <summary>
            Fires prior to a page being unloaded. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.BeforePrint">
            <summary>
            Fires on the object before its associated document prints or previews for printing. 
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.AfterPrint">
            <summary>
            Fires on the object immediately after its associated document prints or previews for printing. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.InternalScriptMessages">
            <summary>
            Suppresses or allows JavaScript messages, including error messages.
            </summary>
            <remarks>
            The purpose of this feature is to control the messages invoked by javascript
            at runtime (non-design mode). One can also hook up into the <see cref="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScriptMessage"/>
            event to get the internal message data and create it's very own message window instead.
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScriptMessage"/>
            <seealso cref="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScriptError"/>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScriptMessage">
            <summary>
            Fired if scripting invokes a message. 
            </summary>
            <remarks>
            Internal messages can be supressed by setting <see cref="P:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.InternalScriptMessages"/> to <c>false</c>.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScriptError">
            <summary>
            Fired if scripting block invoke an error message. Cancellable.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ScriptExternal">
            <summary>
            Get fired if an external script is being called by Script engine.
            </summary>
            <remarks>
            See <see cref="P:GuruComponents.Netrix.WebEditing.Documents.HtmlWindow.ObjectForScripting"/> for a property where one can set the class with external methods.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Documents.MetaTagType">
            <summary>
            The type of Meta Tag beeing created for the document.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Documents.MetaTagType.Named">
            <summary>
            A named meta tag (witn name attribute).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.Documents.MetaTagType.HttpEquiv">
            <summary>
            A HTTP equiv meta tag (with Http-equiv attribute) that defines HTTP related data.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Styles.StyleRule">
            <summary>
            The purpose of this class is to hold one rule definition. This class implements 
            <see cref="T:GuruComponents.Netrix.WebEditing.Styles.IStyleRule">IStyleRule</see> interface.
            </summary>
            <remarks>
            This class supports the NetRix infrastructure. It is used to create new style rules using the
            integrated UI.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleRule.SelectorType">
            <summary>
            Gets or sets the type of selector.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Elements.StyleRuleType">StyleRuleType</see> for a list
            of possible rule types. The rule type will be detected by checking the first character:
            <list type="bullet">
            <item><term>.</term><description>Class</description></item>
            <item><term>#</term><description>Id</description></item>
            <item><term>@</term><description>Pseudo class</description></item>
            <item><term>HTML tag name</term><description>Behavior of that tag</description></item>
            </list>
            Changing the type will change the prefix character of the whole name if necessary.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleRule.RuleName">
            <summary>
            Gets or sets the name of the rule, including the preceding type sign.
            </summary>
            <remarks>
            The name includes the prefix character as written in the style definition.
            If the value is set the 
            <see cref="P:GuruComponents.Netrix.WebEditing.Styles.StyleRule.SelectorType">SelectorType</see> will be
            set accordingly.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleRule.StyleDefinition">
            <summary>
            Gives access to the style definition.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleRule.style">
            <summary>
            The style which this rule defines.
            </summary>
            <remarks>
            This is the style text and must follow the CSS rules. The property does not check
            the syntax if the value is written. 
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleRule.ToString">
            <summary>
            The string representation of the rule name.
            </summary>
            <returns>The value includes the prefix character as written in the style definition.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleRule.#ctor(GuruComponents.Netrix.WebEditing.Elements.StyleElement,System.String)">
            <summary>
            Creates a new rule and adds them to the given style element.
            </summary>
            <param name="styleElement"></param>
            <param name="ruleName"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleRule.#ctor(GuruComponents.Netrix.WebEditing.Elements.StyleElement,System.String,System.String)">
            <summary>
            Creates a new rule and adds them to the given style element.
            </summary>
            <param name="styleElement">The style element the new rule will be added to.</param>
            <param name="ruleName">The name of the rule, including preceding signs (. for class, # for ID).</param>
            <param name="rule">The rule content, e.g. "font-family: Verdana" (without quotes and braces).</param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Styles.ElementStyle">
            <summary>
            This class represents one style definition.
            </summary>
            <remarks>
            A style definition is either an inline style (attribute style of any stylable element) or the
            definition part of a style rule. A rule is a combination of a descriptor and a style.
            <para>
            The purpose of this class is to have an isolated store for CSS definitions. This behaves slightly
            different from the styles defined as part of the elements. The native class CssStyle allows access
            to style definitions using the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> and
            not the NetRix StyleEditor. 
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.#ctor(GuruComponents.Netrix.ComInterop.Interop.IHTMLStyle)">
            <summary>
            Creates a new instance based on the native element's style object.
            </summary>
            <param name="hs"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.background">
            <summary>
            Sets or retrieves up to five separate background properties of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundAttachment">
            <summary>
            Sets or retrieves how the background image is attached to the object within the document. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundColor">
            <summary>
            Sets or retrieves the color behind the content of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundImage">
            <summary>
            Sets or retrieves the background image of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundPositionUnit">
            <summary>
            Sets or retrieves the position of the background of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundPositionVerticalAlign">
            <summary>
            Sets or retrieves the position of the background of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundPositionHorizontalAlign">
            <summary>
            Sets or retrieves the position of the background of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundPositionX">
            <summary>
            Sets or retrieves the x-coordinate of the backgroundPosition property.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundPositionY">
            <summary>
            Sets or retrieves the y-coordinate of the backgroundPosition property.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Background.backgroundRepeat">
            <summary>
            Sets or retrieves how the backgroundImage property of the object is tiled. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.border">
            <summary>
            Sets or retrieves the properties to draw around the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderBottom">
            <summary>
            Sets or retrieves the properties of the bottom border of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderBottomColor">
            <summary>
            Sets or retrieves the color of the bottom border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderBottomStyle">
            <summary>
            Sets or retrieves the style of the bottom border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderBottomWidth">
            <summary>
            Sets or retrieves the width of the bottom border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderBottomWidthAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderColor">
            <summary>
            Sets or retrieves the border color of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderLeft">
            <summary>
            Sets or retrieves the properties of the left border of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderLeftColor">
            <summary>
            Sets or retrieves the color of the left border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderLeftStyle">
            <summary>
            Sets or retrieves the style of the left border of the object.  
            </summary>        
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderLeftWidth">
            <summary>
            Sets or retrieves the width of the left border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderLeftWidthAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderRight">
            <summary>
            Sets or retrieves the properties of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderRightColor">
            <summary>
            Sets or retrieves the color of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderRightStyle">
            <summary>
            Sets or retrieves the style of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderRightWidth">
            <summary>
            Sets or retrieves the width of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderRightWidthValue">
            <summary>
            Sets or retrieves the width of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderStyle">
            <summary>
            Sets or retrieves the style of the left, right, top, and bottom borders of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderTop">
            <summary>
            Sets or retrieves the properties of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderTopColor">
            <summary>
            Sets or retrieves the color of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderTopStyle">
            <summary>
            Sets or retrieves the style of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderTopWidth">
            <summary>
            Sets or retrieves the width of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderTopWidthValue">
            <summary>
            Sets or retrieves the width of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Border.borderWidth">
            <summary>
            Sets or retrieves the width of the left, right, top, and bottom borders of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.clear">
            <summary>
            Sets or retrieves whether the object allows floating objects on its left side, right side, or both, so that the next text displays past the floating objects. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.clip">
            <summary>
            Sets or retrieves which part of a positioned object is visible.  
            </summary>
            <remarks>
            <para>
            This property defines the shape and size of the positioned object that is visible. The Horizontalposition must be set to absolute. Any part of the object that is outside the clipping region is transparent. Any coordinate can be replaced by the value auto, which exposes the respective side (that is, the side is not clipped).
            </para>
            <para>
            The order of the values rect(0 0 50 50) renders the object invisible because it sets the top and right positions of the clipping region to 0. To achieve a 50-by-50 view port, use rect(0 50 50 0).
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.color">
            <summary>
            Sets or retrieves the color of the text of the object.  
            </summary>
            <remarks>
            Some browsers do not recognize color names, but all browsers should recognize RGB color values and display them correctly.
            Therefore the property returns always RGB values, even if the value was previously set using names. This is a different behavior compared to the original MSHTML.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.cssText">
            <summary>
            Sets or retrieves the persisted representation of the style rule. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.cursor">
            <summary>
            Sets or retrieves the type of cursor to display as the mouse pointer moves over the object.  
            </summary>
            <remarks>
            <list type="table">
            <listheader><item>Cursor String</item><item>Definition</item></listheader>
            <item>all-scroll</item><item> Internet Explorer 6 and later. Arrows pointing up, down, left, and right with a dot in the middle, indicating that the page can be scrolled in any direction. </item>
            <item>auto</item><item>Default. Browser determines which cursor to display based on the current context. </item>
            <item>col-resize</item><item>Internet Explorer 6 and later. Arrows pointing left and right with a vertical bar separating them, indicating that the item/column can be resized horizontally. </item>
            <item>crosshair</item><item>Simple cross hair. </item>
            <item>default</item><item>Platform-dependent default cursor; usually an arrow. </item>
            <item>hand</item><item>Hand with the first finger pointing up, as when the user moves the pointer over a link. </item>
            <item>help</item><item>Arrow with question mark, indicating help is available. </item>
            <item>move</item><item>Crossed arrows, indicating something is to be moved.           </item>
            <item>no-drop</item><item>Internet Explorer 6 and later. Hand with a small circle with a line through it, indicating that the dragged item cannot be dropped at the current cursor location. </item>
            <item>not-allowed</item><item>Internet Explorer 6 and later. Circle with a line through it, indicating that the requested action will not be carried out. </item>
            <item>pointer</item><item>Internet Explorer 6 and later. Hand with the first finger pointing up, as when the user moves the pointer over a link. Identical to hand. </item>
            <item>progress</item><item>Internet Explorer 6 and later. Arrow with an hourglass next to it, indicating that a process is running in the background. User interaction with the page is unaffected. </item>
            <item>row-resize</item><item>Internet Explorer 6 and later. Arrows pointing up and down with a horizontal bar separating them, indicating that the item/row can be resized vertically. </item>
            <item>text</item><item>Editable text; usually an I-bar. </item>
            <item>url(uri)</item><item>Internet Explorer 6 and later. Cursor is defined by the author, using a custom Uniform Resource Identifier (URI), such as url('mycursor.cur'). Cursors of type .CUR and .ANI are the only supported cursor types. </item>
            <item>vertical-text</item><item>Internet Explorer 6 and later. Editable vertical text, indicated by a horizontal I-bar. </item>
            <item>wait</item><item>Hourglass or watch, indicating that the program is busy and the user should wait. </item>
            <item>*-resize</item><item>Arrows, indicating an edge is to be moved; the asterisk (*) can be N, NE, NW, S, SE, SW, E, or W—each representing a compass direction. </item>
            </list>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.display">
            <summary>
            Sets or retrieves whether the object is rendered. 
            </summary>
            <remarks>
            In Internet Explorer 4.0, the block, inline, and list-item values are not supported explicitly, but do render the element. 
            <para>The block and inline values are supported explicitly as of Internet Explorer 5.</para>
            <para>In Internet Explorer 5.5 and earlier, the default value of this property for LI elements is block.</para>
            <para>The inline-block value is supported as of Internet Explorer 5.5. You can use this value to give an object a layout without specifying the object's height or width.</para>
            <para>All visible HTML objects are block or inline. For example, a div object is a block element, and a span object is an inline element. Block elements typically start a new line and can contain other block elements and inline elements. Inline elements do not typically start a new line and can contain other inline elements or data. Changing the values for the display property affects the layout of the surrounding content by:
            <list type="bullet">
            <item>Adding a new line after the element with the value block.</item> 
            <item>Removing a line from the element with the value inline. </item>
            <item>Hiding the data for the element with the value none. </item>
            </list>
            </para>
            <para>
            In contrast to the visibility property, display = none reserves no space for the object on the screen.
            </para>
            <para>
            The table-header-group and table-footer-group values can be used to specify that the contents of the tHead and tFoot objects are displayed on every page for a table that spans multiple pages.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.filter">
            <summary>
            Sets or retrieves the filter or collection of filters applied to the object.  
            </summary>
            <remarks>
            <para>An object must have layout for the filter to render. A simple way to accomplish this is to give the element a specified height and/or width. However, there are several other properties that can give an element layout. For more information on these other properties, see the hasLayout property.</para>
            <para>The shadow filter can be applied to the img object by setting the filter on the image's parent container.</para>
            <para>The filter mechanism is extensible and enables you to develop and add additional filters later. For more information about filters, see 
            <see href="http://msdn.microsoft.com/workshop/author/filter/filters.asp">Introduction to Filters and Transitions</see> on MSDN (online connection required).</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Font.font">
            <summary>
            Sets or retrieves a combination of separate Horizontalfont properties of the object. Alternatively, sets or retrieves one or more of six user-preference fonts. 
            </summary>
            <remarks>
            <para>This is a composite property that specifies up to six font values. The font-style, font-variant, and font-weight values may appear in any order before font-size. However, the font-size, line-height, and font-family properties must appear in the order listed. Setting the IHTMLStyle::font property also sets the component properties. In this case, the string must be a combination of valid values for the component properties; only font-family may have more than one value. If the string does not contain a value for a component property, that property is set to its default, regardless of prior settings for that component property.</para>
            <para>As of Internet Explorer 6, when you use the !DOCTYPE declaration to specify standards-compliant mode, the following conditions apply to this property. </para>
            <para>The font-size and font-family values must be declared. If font-size and font-family are not declared, or are not in the correct order, the IHTMLStyle::font property is ignored.</para>
            <para>All specified values must appear in the correct order. Otherwise, the IHTMLStyle::font property is ignored.</para>
            <para>In standards-compliant mode, the default font-size is small, not medium. If not explicitly set, font-size returns a point value.</para>
            <para>For more information about standards-compliant parsing and the !DOCTYPE declaration, see CSS Enhancements in Internet Explorer 6.</para>
            <para>When specifying the user preferences caption, icon, menu, message-box, small-caption, or status-bar for this property, do not set other values for the font property on the same element. If you do, the other values might render, but the user preference value is ignored.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Font.fontFamily">
            <summary>
            Sets or retrieves the name of the font used for text in the object.  
            </summary>
            <remarks>
            <para>The value is a prioritized list of font family names and generic family names. List items are separated by commas to minimize confusion between multiple-word font family names. If the font family name contains white space, it should appear in single or double quotation marks; generic font family names are values and cannot appear in quotation marks. </para>
            <para>Because you do not know which fonts users have installed, you should provide a list of alternatives with a generic font family at the end of the list. This list can include embedded fonts. For more information about embedding fonts, see the @font-face rule.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Font.fontSize">
            <summary>
            Sets or retrieves a value that indicates the font size used for text in the object.  
            </summary>
            <remarks>
            <para>As of Internet Explorer 6, when you use the !DOCTYPE declaration to specify standards-compliant mode, the default value for this property is small, not medium.</para>
            <para>Negative values are not allowed. Font sizes using the proportional "em" measure are based on the font size of the parent object.</para>
            <para>Possible length values specified in a relative measurement, using the height of the element's font (em) or the height of the letter "x" (ex), are supported in Internet Explorer 4.0 and later.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Font.fontStyle">
            <summary>
            Sets or retrieves the font style of the object as italic, normal, or oblique.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Font.fontVariant">
            <summary>
            Sets or retrieves whether the text of the object is in small capital letters. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Font.fontWeight">
            <summary>
            Sets or retrieves the weight of the font of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.height">
            <summary>
            Sets or retrieves the height of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.heightAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.left">
            <summary>
            Sets or retrieves the position of the object relative to the left edge of the next positioned object in the document hierarchy.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.leftAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.letterSpacing">
            <summary>
            Sets or retrieves the amount of additional space between letters in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.letterSpacingNormal">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.lineHeight">
            <summary>
            Sets or retrieves the distance between lines in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.lineHeightNormal">
            <summary>
            Sets or retrieves the distance between lines in the object if set to "normal".
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.listStyle">
            <summary>
            Sets or retrieves up to three separate HorizontallistStyle properties of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.listStyleImage">
            <summary>
            Sets or retrieves a value that indicates which image to use as a list-item marker for the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.listStylePosition">
            <summary>
            Sets or retrieves a variable that indicates how the list-item marker is drawn relative to the content of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.listStyleType">
            <summary>
            Sets or retrieves the predefined type of the line-item marker for the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.margin">
            <summary>
            Sets or retrieves the width of the top, right, bottom, and left margins of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginBottom">
            <summary>
            Sets or retrieves the height of the bottom margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginBottomAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginLeft">
            <summary>
            Sets or retrieves the width of the left margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginLeftAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginRight">
            <summary>
            Sets or retrieves the width of the right margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginRightAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginTop">
            <summary>
            Sets or retrieves the height of the top margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Margin.marginTopAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.overflow">
            <summary>
            Sets or retrieves a value indicating how to manage the content of the object when the content exceeds the height or width of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.padding">
            <summary>
            Sets or retrieves the amount of space to insert between the object and its margin or, if there is a border, between the object and its border.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingBottom">
            <summary>
            Sets or retrieves the amount of space to insert between the bottom border of the object and the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingBottomAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingLeft">
            <summary>
            Sets or retrieves the amount of space to insert between the left border of the object and the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingLeftAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingRight">
            <summary>
            Sets or retrieves the amount of space to insert between the right border of the object and the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingRightAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingTop">
            <summary>
            Sets or retrieves the amount of space to insert between the top border of the object and the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Padding.paddingTopAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pageBreakAfter">
            <summary>
            Sets or retrieves a value indicating whether a page break occurs after the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pageBreakBefore">
            <summary>
            Sets or retrieves a string indicating whether a page break occurs before the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pixelHeight">
            <summary>
            Sets or retrieves the height of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pixelLeft">
            <summary>
            Sets or retrieves the left position of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pixelTop">
            <summary>
            Sets or retrieves the top position of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pixelWidth">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.posHeight">
            <summary>
            Sets or retrieves the height of the object in the units specified by the height attribute.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.position">
            <summary>
            Retrieves the type of positioning used for the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.posLeft">
            <summary>
            Sets or retrieves the left position of the object in the units specified by the left attribute.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.posTop">
            <summary>
            Sets or retrieves the top position of the object in the units specified by the top attribute.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.posWidth">
            <summary>
            Sets or retrieves the width of the object in the units specified by the width attribute.  
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.GetAttribute(System.String)">
            <summary>
            Get the given attribute from the object. 
            </summary>
            <remarks>
            The caller is supposed to convert to appropriate type.
            </remarks>
            <param name="attribute">Specifies the attribute name.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.RemoveAttribute(System.String)">
            <summary>
            Removes the given attribute from the object. 
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the value of the specified attribute. 
            </summary>
            <remarks>
            If the attribute not exists the value wil be created and placed at the first position in the collection.
            </remarks>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.styleFloat">
            <summary>
            Sets or retrieves on which side of the object the text will flow. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.textAlign">
            <summary>
            Sets or retrieves whether the text in the object is left-aligned, 
            right-aligned, centered, or justified.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecorationStyle">
            <summary>
            Summarizes a container for text decoration styles.
            </summary>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration"/>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration">
            <summary>
            Implements a container for text decoration styles.
            </summary>
            <remarks>
            Based on <see cref="T:GuruComponents.Netrix.ComInterop.Interop.IHTMLStyle"/> interface.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration.textDecoration">
            <summary>
            Sets or retrieves a value that indicates whether the text in the object has blink, line-through, overline, or underline decorations.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration.textDecorationBlink">
            <summary>
            Sets or retrieves a Boolean value that indicates whether the object's textDecoration property has a value of "blink." 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration.textDecorationLineThrough">
            <summary>
            Sets or retrieves a Boolean value indicating whether the text in the object has a line drawn through it.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration.textDecorationNone">
            <summary>
            Sets or retrieves the Boolean value indicating whether the HorizontaltextDecoration property for the object has been set to none.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration.textDecorationOverline">
            <summary>
            Sets or retrieves a Boolean value indicating whether the text in the object has a line drawn over it.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.TextDecoration.textDecorationUnderline">
            <summary>
            Sets or retrieves whether the text in the object is underlined.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.textIndent">
            <summary>
            Sets or retrieves the indentation of the first line of text in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.textTransform">
            <summary>
            Sets or retrieves the rendering of the text in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.top">
            <summary>
            Sets or retrieves the position of the object relative to the top of the next positioned object in the document hierarchy.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.topAuto">
            <summary>
            Sets or retrieves the top of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.verticalAlign">
            <summary>
            Sets or retrieves the vertical alignment of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.visibility">
            <summary>
            Sets or retrieves whether the content of the object is displayed.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.whiteSpace">
            <summary>
            Sets or retrieves a value that indicates whether lines are automatically broken inside the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.width">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.widthAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.wordSpacing">
            <summary>
            Sets or retrieves the amount of additional space between words in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.wordSpacingNormal">
            <summary>
            Sets or retrieves the amount of additional space between words in the object to the default value.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.zIndex">
            <summary>
            Sets or retrieves the stacking order of positioned objects.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.zIndexAuto">
            <summary>
            Sets or retrieves the stacking order of positioned objects.  
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.ConvertEnumeration(System.Type,System.String)">
            <summary>
            Replaces upper chars from enum names into minus signs, ignoring the leading character.
            </summary>
            <param name="enumType"></param>
            <param name="enumString"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pixelBottom">
            <summary>
            Sets or retrieves the bottom position of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.pixelRight">
            <summary>
            Sets or retrieves the right position of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.posBottom">
            <summary>
            Sets or retrieves the bottom position of the object in the units specified by the IHTMLStyle::left attribute.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.posRight">
            <summary>
            Sets or retrieves the right position of the object in the units specified by the IHTMLStyle::top attribute.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.ElementStyle.Zoom">
            <summary>
            Sets or retrieves the documents zoom level.  
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Styles.CssStyle">
            <summary>
            This class represents one style definition. This class implements IStyle interface.
            </summary>
            <remarks>
            A style definition is either an inline style (attribute style of any stylable element) or the
            definition part of a style rule. A rule is a combination of a descriptor and a style.
            <para>
            The purpose of this class is to have an isolated store for CSS definitions. This behaves slightly
            different from the styles defined as part of the elements. The native class CssStyle allows access
            to style definitions using the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> and
            not the NetRix StyleEditor. 
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.background">
            <summary>
            Sets or retrieves up to five separate background properties of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundAttachment">
            <summary>
            Sets or retrieves how the background image is attached to the object within the document. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundColor">
            <summary>
            Sets or retrieves the color behind the content of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundImage">
            <summary>
            Sets or retrieves the background image of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundPositionUnit">
            <summary>
            Sets or retrieves the position of the background of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundPositionVerticalAlign">
            <summary>
            Sets or retrieves the position of the background of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundPositionHorizontalAlign">
            <summary>
            Sets or retrieves the position of the background of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundPositionX">
            <summary>
            Sets or retrieves the x-coordinate of the backgroundPosition property.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundPositionY">
            <summary>
            Sets or retrieves the y-coordinate of the backgroundPosition property.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.backgroundRepeat">
            <summary>
            Sets or retrieves how the backgroundImage property of the object is tiled. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.border">
            <summary>
            Sets or retrieves the properties to draw around the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderBottom">
            <summary>
            Sets or retrieves the properties of the bottom border of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderBottomColor">
            <summary>
            Sets or retrieves the color of the bottom border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderBottomStyle">
            <summary>
            Sets or retrieves the style of the bottom border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderBottomWidth">
            <summary>
            Sets or retrieves the width of the bottom border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderBottomWidthAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderColor">
            <summary>
            Sets or retrieves the border color of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderLeft">
            <summary>
            Sets or retrieves the properties of the left border of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderLeftColor">
            <summary>
            Sets or retrieves the color of the left border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderLeftStyle">
            <summary>
            Sets or retrieves the style of the left border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderLeftWidth">
            <summary>
            Sets or retrieves the width of the left border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderLeftWidthAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderRight">
            <summary>
            Sets or retrieves the properties of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderRightColor">
            <summary>
            Sets or retrieves the color of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderRightStyle">
            <summary>
            Sets or retrieves the style of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderRightWidth">
            <summary>
            Sets or retrieves the width of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderRightWidthValue">
            <summary>
            Sets or retrieves the width of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderStyle">
            <summary>
            Sets or retrieves the style of the left, right, top, and bottom borders of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderTop">
            <summary>
            Sets or retrieves the properties of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderTopColor">
            <summary>
            Sets or retrieves the color of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderTopStyle">
            <summary>
            Sets or retrieves the style of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderTopWidth">
            <summary>
            Sets or retrieves the width of the top border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderTopWidthValue">
            <summary>
            Sets or retrieves the width of the right border of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.borderWidth">
            <summary>
            Sets or retrieves the width of the left, right, top, and bottom borders of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.clear">
            <summary>
            Sets or retrieves whether the object allows floating objects on its left side, right side, or both, so that the next text displays past the floating objects. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.clip">
            <summary>
            Sets or retrieves which part of a positioned object is visible.  
            </summary>
            <remarks>
            <para>
            This property defines the shape and size of the positioned object 
            that is visible. The Horizontalposition must be set to absolute. 
            Any part of the object that is outside the clipping region is transparent. 
            Any coordinate can be replaced by the value auto, which exposes the 
            respective side (that is, the side is not clipped).
            </para>
            <para>
            The order of the values rect(0 0 50 50) renders the object invisible 
            because it sets the top and right positions of the clipping region to 0. 
            To achieve a 50-by-50 view port, use rect(0 50 50 0).
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.color">
            <summary>
            Sets or retrieves the color of the text of the object.  
            </summary>
            <remarks>
            Some browsers do not recognize color names, but all browsers should 
            recognize RGB color values and display them correctly.
            Therefore the property returns always RGB values, even if the value 
            was previously set using names. This is a different behavior compared to the original MSHTML.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.cssText">
            <summary>
            Sets or retrieves the persisted representation of the style rule. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.cursor">
            <summary>
            Sets or retrieves the type of cursor to display as the mouse pointer moves over the object.  
            </summary>
            <remarks>
            <list type="table">
            <listheader><item>Cursor String</item><item>Definition</item></listheader>
            <item>all-scroll</item><item> Internet Explorer 6 and later. Arrows pointing up, down, left, and right with a dot in the middle, indicating that the page can be scrolled in any direction. </item>
            <item>auto</item><item>Default. Browser determines which cursor to display based on the current context. </item>
            <item>col-resize</item><item>Internet Explorer 6 and later. Arrows pointing left and right with a vertical bar separating them, indicating that the item/column can be resized horizontally. </item>
            <item>crosshair</item><item>Simple cross hair. </item>
            <item>default</item><item>Platform-dependent default cursor; usually an arrow. </item>
            <item>hand</item><item>Hand with the first finger pointing up, as when the user moves the pointer over a link. </item>
            <item>help</item><item>Arrow with question mark, indicating help is available. </item>
            <item>move</item><item>Crossed arrows, indicating something is to be moved.           </item>
            <item>no-drop</item><item>Internet Explorer 6 and later. Hand with a small circle with a line through it, indicating that the dragged item cannot be dropped at the current cursor location. </item>
            <item>not-allowed</item><item>Internet Explorer 6 and later. Circle with a line through it, indicating that the requested action will not be carried out. </item>
            <item>pointer</item><item>Internet Explorer 6 and later. Hand with the first finger pointing up, as when the user moves the pointer over a link. Identical to hand. </item>
            <item>progress</item><item>Internet Explorer 6 and later. Arrow with an hourglass next to it, indicating that a process is running in the background. User interaction with the page is unaffected. </item>
            <item>row-resize</item><item>Internet Explorer 6 and later. Arrows pointing up and down with a horizontal bar separating them, indicating that the item/row can be resized vertically. </item>
            <item>text</item><item>Editable text; usually an I-bar. </item>
            <item>url(uri)</item><item>Internet Explorer 6 and later. Cursor is defined by the author, using a custom Uniform Resource Identifier (URI), such as url('mycursor.cur'). Cursors of type .CUR and .ANI are the only supported cursor types. </item>
            <item>vertical-text</item><item>Internet Explorer 6 and later. Editable vertical text, indicated by a horizontal I-bar. </item>
            <item>wait</item><item>Hourglass or watch, indicating that the program is busy and the user should wait. </item>
            <item>*-resize</item><item>Arrows, indicating an edge is to be moved; the asterisk (*) can be N, NE, NW, S, SE, SW, E, or W—each representing a compass direction. </item>
            </list>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.display">
            <summary>
            Sets or retrieves whether the object is rendered. 
            </summary>
            <remarks>
            In Internet Explorer 4.0, the block, inline, and list-item values are not supported explicitly, but do render the element. 
            <para>The block and inline values are supported explicitly as of Internet Explorer 5.</para>
            <para>In Internet Explorer 5.5 and earlier, the default value of this property for LI elements is block.</para>
            <para>The inline-block value is supported as of Internet Explorer 5.5. You can use this value to give an object a layout without specifying the object's height or width.</para>
            <para>All visible HTML objects are block or inline. For example, a div object is a block element, and a span object is an inline element. Block elements typically start a new line and can contain other block elements and inline elements. Inline elements do not typically start a new line and can contain other inline elements or data. Changing the values for the display property affects the layout of the surrounding content by:
            <list type="bullet">
            <item>Adding a new line after the element with the value block.</item> 
            <item>Removing a line from the element with the value inline. </item>
            <item>Hiding the data for the element with the value none. </item>
            </list>
            </para>
            <para>
            In contrast to the visibility property, display = none reserves no space for the object on the screen.
            </para>
            <para>
            The table-header-group and table-footer-group values can be used to specify that the contents of the tHead and tFoot objects are displayed on every page for a table that spans multiple pages.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.filter">
            <summary>
            Sets or retrieves the filter or collection of filters applied to the object.  
            </summary>
            <remarks>
            <para>An object must have layout for the filter to render. A simple way to 
            accomplish this is to give the element a specified height and/or width. 
            However, there are several other properties that can give an element layout. 
            For more information on these other properties, see the hasLayout property.</para>
            <para>The shadow filter can be applied to the img object by setting the filter 
            on the image's parent container.</para>
            <para>The filter mechanism is extensible and enables you to develop and add 
            additional filters later. For more information about filters, see 
            <see href="http://msdn.microsoft.com/workshop/author/filter/filters.asp">Introduction to Filters and Transitions</see> 
            on MSDN (online connection required).</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.font">
            <summary>
            Sets or retrieves a combination of separate Horizontalfont properties of the object. Alternatively, sets or retrieves one or more of six user-preference fonts. 
            </summary>
            <remarks>
            <para>This is a composite property that specifies up to six font values. The font-style, font-variant, and font-weight values may appear in any order before font-size. However, the font-size, line-height, and font-family properties must appear in the order listed. Setting the IHTMLStyle::font property also sets the component properties. In this case, the string must be a combination of valid values for the component properties; only font-family may have more than one value. If the string does not contain a value for a component property, that property is set to its default, regardless of prior settings for that component property.</para>
            <para>As of Internet Explorer 6, when you use the !DOCTYPE declaration to specify standards-compliant mode, the following conditions apply to this property. </para>
            <para>The font-size and font-family values must be declared. If font-size and font-family are not declared, or are not in the correct order, the IHTMLStyle::font property is ignored.</para>
            <para>All specified values must appear in the correct order. Otherwise, the IHTMLStyle::font property is ignored.</para>
            <para>In standards-compliant mode, the default font-size is small, not medium. If not explicitly set, font-size returns a point value.</para>
            <para>For more information about standards-compliant parsing and the !DOCTYPE declaration, see CSS Enhancements in Internet Explorer 6.</para>
            <para>When specifying the user preferences caption, icon, menu, message-box, small-caption, or status-bar for this property, do not set other values for the font property on the same element. If you do, the other values might render, but the user preference value is ignored.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.fontFamily">
            <summary>
            Sets or retrieves the name of the font used for text in the object.  
            </summary>
            <remarks>
            <para>The value is a prioritized list of font family names and generic family names. List items are separated by commas to minimize confusion between multiple-word font family names. If the font family name contains white space, it should appear in single or double quotation marks; generic font family names are values and cannot appear in quotation marks. </para>
            <para>Because you do not know which fonts users have installed, you should provide a list of alternatives with a generic font family at the end of the list. This list can include embedded fonts. For more information about embedding fonts, see the @font-face rule.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.fontSize">
            <summary>
            Sets or retrieves a value that indicates the font size used for text in the object.  
            </summary>
            <remarks>
            <para>As of Internet Explorer 6, when you use the !DOCTYPE declaration to specify standards-compliant mode, the default value for this property is small, not medium.</para>
            <para>Negative values are not allowed. Font sizes using the proportional "em" measure are based on the font size of the parent object.</para>
            <para>Possible length values specified in a relative measurement, using the height of the element's font (em) or the height of the letter "x" (ex), are supported in Internet Explorer 4.0 and later.</para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.fontStyle">
            <summary>
            Sets or retrieves the font style of the object as italic, normal, or oblique.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.fontVariant">
            <summary>
            Sets or retrieves whether the text of the object is in small capital letters. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.fontWeight">
            <summary>
            Sets or retrieves the weight of the font of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.height">
            <summary>
            Sets or retrieves the height of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.heightAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.left">
            <summary>
            Sets or retrieves the position of the object relative to the left edge of the next 
            positioned object in the document hierarchy.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.leftAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.letterSpacing">
            <summary>
            Sets or retrieves the amount of additional space between letters in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.letterSpacingNormal">
            <summary>
            Sets or retrieves the amount of additional space between letters in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.lineHeight">
            <summary>
            Sets or retrieves the distance between lines in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.lineHeightNormal">
            <summary>
            Sets or retrieves the distance between lines in the object if set to "normal".
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.listStyle">
            <summary>
            Sets or retrieves up to three separate IHTMLStyle::listStyle properties of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.listStyleImage">
            <summary>
            Sets or retrieves a value that indicates which image to use as a list-item marker for the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.listStylePosition">
            <summary>
            Sets or retrieves a variable that indicates how the list-item marker is drawn relative to the content of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.listStyleType">
            <summary>
            Sets or retrieves the predefined type of the line-item marker for the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.margin">
            <summary>
            Sets or retrieves the width of the top, right, bottom, and left margins of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginBottom">
            <summary>
            Sets or retrieves the height of the bottom margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginBottomAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginLeft">
            <summary>
            Sets or retrieves the width of the left margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginLeftAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginRight">
            <summary>
            Sets or retrieves the width of the right margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginRightAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginTop">
            <summary>
            Sets or retrieves the height of the top margin of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.marginTopAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.overflow">
            <summary>
            Sets or retrieves a value indicating how to manage the content of the object 
            when the content exceeds the height or width of the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.padding">
            <summary>
            Sets or retrieves the amount of space to insert between the object and its margin or, 
            if there is a border, between the object and its border.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingBottom">
            <summary>
            Sets or retrieves the amount of space to insert between the bottom border of the object and 
            the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingBottomAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingLeft">
            <summary>
            Sets or retrieves the amount of space to insert between the left border of the object and the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingLeftAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingRight">
            <summary>
            Sets or retrieves the amount of space to insert between the right border of the object and the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingRightAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingTop">
            <summary>
            Sets or retrieves the amount of space to insert between the top border of the object and the content.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.paddingTopAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.pageBreakAfter">
            <summary>
            Sets or retrieves a value indicating whether a page break occurs after the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.pageBreakBefore">
            <summary>
            Sets or retrieves a string indicating whether a page break occurs before the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.pixelBottom">
            <summary>
            Sets or retrieves the bottom position of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.pixelRight">
            <summary>
            Sets or retrieves the right position of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.posBottom">
            <summary>
            Sets or retrieves the bottom position of the object in the units specified by the IHTMLStyle::left attribute.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.position">
            <summary>
            Retrieves the type of positioning used for the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.posRight">
            <summary>
            Sets or retrieves the right position of the object in the units specified by the IHTMLStyle::top attribute.  
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.CssStyle.RemoveAttribute(System.String)">
            <summary>
            Removes the given attribute from the object. 
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.CssStyle.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the value of the specified attribute. 
            </summary>
            <remarks>
            If the attribute not exists the value wil be created and placed at the first position in the collection.
            </remarks>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.styleFloat">
            <summary>
            Sets or retrieves on which side of the object the text will flow. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textAlign">
            <summary>
            Sets or retrieves whether the text in the object is left-aligned, 
            right-aligned, centered, or justified.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textDecoration">
            <summary>
            Sets or retrieves a value that indicates whether the text in the object 
            has blink, line-through, overline, or underline decorations.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textDecorationBlink">
            <summary>
            Sets or retrieves a Boolean value that indicates whether the object's 
            IHTMLStyle::textDecoration property has a value of "blink." 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textDecorationLineThrough">
            <summary>
            Sets or retrieves a Boolean value indicating whether the text in the object has a 
            line drawn through it.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textDecorationNone">
            <summary>
            Sets or retrieves the Boolean value indicating whether the IHTMLStyle::textDecoration 
            property for the object has been set to none.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textDecorationOverline">
            <summary>
            Sets or retrieves a Boolean value indicating whether the text in the object 
            has a line drawn over it.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textDecorationUnderline">
            <summary>
            Sets or retrieves whether the text in the object is underlined.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textIndent">
            <summary>
            Sets or retrieves the indentation of the first line of text in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.textTransform">
            <summary>
            Sets or retrieves the rendering of the text in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.top">
            <summary>
            Sets or retrieves the position of the object relative to the top 
            of the next positioned object in the document hierarchy.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.topAuto">
            <summary>
            Sets or retrieves the top of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.verticalAlign">
            <summary>
            Sets or retrieves the vertical alignment of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.visibility">
            <summary>
            Sets or retrieves whether the content of the object is displayed.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.whiteSpace">
            <summary>
            Sets or retrieves a value that indicates whether lines are automatically broken inside the object. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.widthAuto">
            <summary>
            Sets or retrieves the width of the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.wordSpacing">
            <summary>
            Sets or retrieves the amount of additional space between words in the object.  
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.wordSpacingNormal">
            <summary>
            
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.zIndex">
            <summary>
              
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.zIndexAuto">
            <summary>
            Sets or retrieves the stacking order of positioned objects as auto value.  
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.CssStyle.ConvertEnumeration(System.Type,System.String)">
            <summary>
            Replaces upper chars from enum names into minus signs, ignoring the leading character.
            </summary>
            <param name="enumType"></param>
            <param name="enumString"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.scrollbarArrowColor">
            <summary>
            Sets or retrieves the color of the top and left edges of the scroll box and 
            scroll arrows of a scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.scrollbarBaseColor">
            <summary>
            Sets or retrieves the color of the main elements of a scroll bar, 
            which include the scroll box, track, and scroll arrows.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.scrollbarDarkShadowColor">
            <summary>
            Sets or retrieves the color of the gutter of a scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.scrollbarFaceColor">
            <summary>
            Sets or retrieves the color of the scroll box and scroll arrows of a scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.scrollbarHighlightColor">
            <summary>
            Sets or retrieves the color of the top and left edges of the scroll box and 
            scroll arrows of a scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.scrollbarShadowColor">
            <summary>
            Sets or retrieves the color of the bottom and right edges of the scroll box and 
            scroll arrows of a scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.scrollbarTrackColor">
            <summary>
            Sets or retrieves the color of the track element of a scroll bar.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.CssStyle.wordWrap">
            <summary>
            Sets or retrieves whether to break words when the content exceeds the boundaries of its container.
            </summary>
            <remarks>
            This property applies to elements that have layout. An element has layout when it 
            is absolutely positioned, is a block element, or is an inline element with a 
            specified height or width.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet">
            <summary>
            This interface provides access to an object that represents 
            a single style sheet in the document.
            </summary>
            <remarks>
            StyleSheet class implements IStyleSheet interface.
            <para>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.AddImport(System.String,System.Int32)">
            <summary>
            Adds a style sheet to the imports collection for the specified style sheet.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
            <param name="bstrURL">Specifies the location of the source file for the style sheet.</param>
            <param name="lIndex">Specifies the requested position for the style sheet in the collection. 
            If this value is not given, the style sheet is added to the end of the collection.</param>
            <returns>Returns a zero-based index value indicating the position of the imported 
            style sheet in the imports collection.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.AddRule(System.String,System.String,System.Int32)">
            <summary>
            Creates a new rule for a style sheet.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
            <param name="bstrSelector">Specifies the Rule Name</param>
            <param name="bstrStyle">Specifies the Rule style</param>
            <param name="lIndex">Specifies Rule Index</param>
            <returns>Returns a index value of the rule in the collection</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.CssText">
            <summary>
            Sets or retrieves the persisted representation of the style rule.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.Disabled">
            <summary>
            Sets or retrieves whether a style sheet is applied to the object.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.Id">
            <summary>
            Retrieves the string identifying the object.
            </summary>
            <remarks>
            This is an SGML identifier used as the target for hypertext links or 
            for naming particular objects associated with style sheets.
            <para>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.GetImports">
            <summary>
            Retrieves a zero-based collection of all the imported style sheets 
            defined for the given StyleSheet object. 
            </summary>
            <remarks>
            An imported style sheet is one that is brought into the document 
            using the Cascading Style Sheets (CSS) at import rule.
            <para>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.GetOwningElement">
            <summary>
            Retrieves the next object in the HTML hierarchy. 
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
            <returns>Returns usually the STYLE or LINK element containing the stylesheet.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.GetParentStyleSheet">
            <summary>
            Retrieves the style sheet that imported the current style sheets.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
            <returns>Returns the parent style sheet or <c>null</c> if there is no parent.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.StyleSheetType">
            <summary>
            Retrieves the Cascading Style Sheets (CSS) language in which the style sheet is written.
            </summary>
            <remarks>
            This property can be any string, including an empty string. Style sheets 
            having any type other than "text/css" are not supported.
            <para>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.Href">
            <summary>
            Sets or retrieves the URL of the linked style sheet.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.Media">
            <summary>
            Sets or retrieves the media type. 
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.ReadOnly">
            <summary>
            Retrieves whether the rule or style sheet is defined on the page or is imported.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.RemoveImport(System.Int32)">
            <summary>
            Removes the imported style sheet by ordinal position in the 
            imports collection based on the value of the index passed in.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
            <param name="lIndex">Specifies the index value of the imported style sheet to be removed.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.RemoveRule(System.Int32)">
            <summary>
            Deletes an existing style rule for the styleSheet object, 
            and adjusts the index of the rules collection accordingly.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
            <param name="lIndex">Specifies the index value of the rule to be deleted 
            from the style sheet. If an index is not provided, the first rule in the 
            rules collection is removed.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.Rules">
            <summary>
            Retrieves a collection of rules defined in the styleSheet. 
            </summary>
            <remarks>
            If there are no rules, the length of the collection returned is zero.
            <para>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.IStyleSheet.Title">
            <summary>
            Sets or retrieves the title of the style sheet.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">StyleSheet</see> 
            class for more details.	
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet"/>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Styles.StyleSheet">
            <summary>
            This class provides access to an object that represents 
            a single style sheet in the document.
            StyleSheet class implements IStyleSheet interface.
            </summary>
            <remarks>
            The style sheet object is used to retrieve information about a style sheet. For example, you can use it 
            to retrieve the URL of a style sheet's source file, and to retrieve the element in the document that defines 
            the style sheet. You can then use the style sheet object to modify the document's style sheet.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.Title">
            <summary>
            Sets or retrieves the title of the style sheet.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.GetParentStyleSheet">
            <summary>
            Retrieves the style sheet that imported the current style sheets.
            </summary>
            <returns>Returns the parent style sheet or <c>null</c> if there is no parent.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.GetOwningElement">
            <summary>
            Retrieves the next object in the HTML hierarchy. 
            </summary>
            <returns>Returns usually the STYLE or LINK element containing the stylesheet.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.Disabled">
            <summary>
            Sets or retrieves whether a style sheet is applied to the object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.ReadOnly">
            <summary>
            Retrieves whether the rule or style sheet is defined on the page or is imported.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.GetImports">
            <summary>
            Retrieves a zero-based collection of all the imported style sheets 
            defined for the given StyleSheet object. 
            </summary>
            <remarks>
            An imported style sheet is one that is brought into the document 
            using the Cascading Style Sheets (CSS) at import rule.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.Href">
            <summary>
            Sets or retrieves the URL of the linked style sheet.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.StyleSheetType">
            <summary>
            Retrieves the Cascading Style Sheets (CSS) language in which the style sheet is written.
            </summary>
            <remarks>
            This property can be any string, including an empty string. Style sheets 
            having any type other than "text/css" are not supported.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.Id">
            <summary>
            Retrieves the string identifying the object.
            </summary>
            <remarks>
            This is an SGML identifier used as the target for hypertext links or 
            for naming particular objects associated with style sheets.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.AddImport(System.String,System.Int32)">
            <summary>
            Adds a style sheet to the imports collection for the specified style sheet.
            </summary>
            <param name="bstrURL">Specifies the location of the source file for the style sheet.</param>
            <param name="lIndex">Specifies the requested position for the style sheet in the collection. 
            If this value is not given, the style sheet is added to the end of the collection.</param>
            <returns>Returns a zero-based index value indicating the position of the imported 
            style sheet in the imports collection.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.AddRule(System.String,System.String,System.Int32)">
            <summary>
            Creates a new rule for a style sheet.
            </summary>
            <param name="bstrSelector">Specifies the Rule Name</param>
            <param name="bstrStyle">Specifies the Rule style</param>
            <param name="lIndex">Specifies Rule Index</param>
            <returns>Returns a index value of the rule in the collection</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.RemoveImport(System.Int32)">
            <summary>
            Removes the imported style sheet by ordinal position in the 
            imports collection based on the value of the index passed in.
            </summary>
            <param name="lIndex">Specifies the index value of the imported style sheet to be removed.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.RemoveRule(System.Int32)">
            <summary>
            Deletes an existing style rule for the styleSheet object, 
            and adjusts the index of the rules collection accordingly.
            </summary>
            <param name="lIndex">Specifies the index value of the rule to be deleted 
            from the style sheet. If an index is not provided, the first rule in the 
            rules collection is removed.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.Media">
            <summary>
            Sets or retrieves the media type. 
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.CssText">
            <summary>
            Sets or retrieves the persisted representation of the style rule.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Styles.StyleSheet.Rules">
            <summary>
            Retrieves a collection of rules defined in the styleSheet. 
            </summary>
            <remarks>If there are no rules, the length of the collection returned is zero.</remarks>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Exceptions.CommandUnavailableException">
            <summary>
            Exception thrown if a command was not successfull operate within the 
            control. If the reason was a wrong or missing argument or parameter
            a <see cref="T:System.ArgumentException">ArgumentException</see> is thrown instead.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Exceptions.CommandUnavailableException.Command">
            <summary>
            The number of the command sent causes the exception.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Exceptions.DocumentNotReadyException">
            <summary>
            Exception is thrown when a command is issued and the document was not ready yet.
            </summary>
            <remarks>
            To avoid this exception wait for <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> event before issuing any commands.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Exceptions.DocumentNotReadyException.#ctor(System.String)">
            <summary>
            Constructor accepting a single string message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Exceptions.DocumentNotReadyException.#ctor(System.String,System.Exception)">
            <summary>
             Constructor accepting a string message and an 
             inner exception which will be wrapped by this custom exception class.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Exceptions.HtmlControlException">
            <summary>
            Standard exception thrown if any not command based internal operation fails.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Exceptions.HtmlControlException.#ctor(System.String)">
            <summary>
            Constructor accepting a single string message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.Exceptions.HtmlControlException.#ctor(System.String,System.Exception)">
            <summary>
             Constructor accepting a string message and an 
             inner exception which will be wrapped by this custom exception class
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.Exceptions.SelectionNotPossibleException">
            <summary>
            Exception thrown if a selection was not possbile. This happens when the host application
            tries to select the body or a table selection.
            a <see cref="T:System.ArgumentException">ArgumentException</see> is thrown instead.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.Exceptions.SelectionNotPossibleException.TagName">
            <summary>
            Name of Tag which was not selectable.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor">
            <summary>
            This class supports the color information settings for HighLightStyle.
            </summary>
            <remarks>
            Holds the color of the text, background, or line color in the object. The value can be set to 
            any valid HTML/CSS color value within the 216 colors base table or to the values "auto" or "inherit".
            <seealso cref="T:GuruComponents.Netrix.WebEditing.HighLighting.ColorType"/>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.#ctor(GuruComponents.Netrix.WebEditing.HighLighting.ColorType)">
            <summary>
            Creates an object with the specified type.
            </summary>
            <param name="type">The type of color.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.#ctor(System.Drawing.Color,GuruComponents.Netrix.WebEditing.HighLighting.ColorType)">
            <summary>
            Creates an object with the specified color and type.
            </summary>
            <param name="color">The color of the object.</param>
            <param name="type">The type of color.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.Color(System.Drawing.Color)">
            <summary>
            Creates a new <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor"/> object with the specified color.
            </summary>
            <remarks>
            The object created is always of type <see cref="F:GuruComponents.Netrix.WebEditing.HighLighting.ColorType.Color"/>.
            </remarks>
            <param name="color">The color of the new object.</param>
            <returns>Instance of <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor"/>, preset to given color.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.Auto">
            <summary>
            Returns an object which is set to "auto" value.
            </summary>
            <returns>Instance of <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor"/>, preset to "auto".</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.Inherit">
            <summary>
            Returns an object which is set to "inherit" value.
            </summary>
            <returns>Instance of <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor"/>, preset to "inherit".</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.Transparent">
            <summary>
            Returns an object which is set to "transparent" value.
            </summary>
            <returns>Instance of <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor"/>, preset to "transparent".</returns>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.Type">
            <summary>
            Current type of Color in HighLightColor object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.ColorValue">
            <summary>
            Sets or retrieves the color of the object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor.ColorName">
            <summary>
            Returns the color name in HTML format, or the word "auto" or "inherit", respectively.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.HighLighting.HighLightSegment">
            <summary>
            HighLightSegment holds a highlighting object and provides a remove method to remove the decoration
            at a later time.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighLightSegment.RemoveSegment">
            <summary>
            This method removes the highlight decoration from the segment.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighLightSegment.ExpandRange(GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit)">
            <summary>
            Expand the current range to that partial units are completely contained.
            </summary>
            <param name="ExpandTo"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle">
            <summary>
            Defines a style for customized HighLighting.
            </summary>
            <remarks>
            This used as a parameter for the HighLight services, 
            which add specific styles to elements or text selections without changing the document or DOM
            during design time. The style type depends on the constructor used to instantiate the object.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.#ctor">
            <summary>
            Instantiates a new render style object with no values and lowest priority.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.#ctor(GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor,GuruComponents.Netrix.WebEditing.HighLighting.UnderlineStyle)">
            <summary>
            Instantiates a new render style object with a default underline style and lowest priority.
            </summary>
            <param name="lineColor">This parameter defines the line color used for this style.</param>
            <param name="underlineStyle">This parameter defines the underline style of this style.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.#ctor(GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor,GuruComponents.Netrix.WebEditing.HighLighting.LineThroughStyle)">
            <summary>
            Instantiates a new render style object with a default line-through style and lowest priority.
            </summary>
            <param name="lineColor">This parameter defines the line color for this style.</param>
            <param name="lineThroughStyle">This parameter defines the the line through style.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.#ctor(GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor,GuruComponents.Netrix.WebEditing.HighLighting.HighlightColor)">
            <summary>
            Instantiates a new render style object with a default text coloring.
            </summary>
            <param name="textColor">This parameter defines the fore color used for this style.</param>
            <param name="textBackgroundColor">This parameter defines the back color used for this style.</param>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.Priority">
            <summary>
            Defines the property of the style.
            </summary>
            <remarks>
            Properties with higher priority override properties with lower priority. The default value is 0, 
            and the higher the number, the higher the priority. The rendering priority has a limit of 9.
            <para>
            If two properties of the IHTMLRenderStyle interface are applied to the same text selection, 
            the property with higher rendering priority overrides the property with lower rendering priority. 
            If you allow two properties of the IHTMLRenderStyle interface to have the same rendering priority, 
            the control will not be able to determine which property will override the other.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.TextColor">
            <summary>
            Sets or retrieves the color of the text in the object.
            </summary>
            <remarks>
            The color allows the types "color", "auto" and "inherit" only.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.TextBackgroundColor">
            <summary>
            Sets or retrieves the color behind the text in the object.
            </summary>
            <remarks>
            The color allows the types "color", "transparent", and "inherit" only.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.UnderlineStyle">
            <summary>
            Sets or retrieves the appearance of the underline decoration of the object.
            </summary>
            <remarks>
            This property supports the thick-dash value as of Internet Explorer 6.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.HighLighting.UnderlineStyle">UnderlineStyle</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.LineThroughStyle">
            <summary>
            Sets or retrieves the appearance of the line-through decoration of the object.
            </summary>
            <remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.HighLighting.LineThroughStyle">LineThroughStyle</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.LineColor">
            <summary>
            Sets or retrieves the color of the line-through, overline, or underline decorations of the object.
            </summary>
            <remarks>
            The color allows the types "color" and "auto" only.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.LineType">
            <summary>
            Sets or retrieves whether the text in the object renders with a line-through, overline, or underline decoration.
            </summary>
            <remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.HighLighting.LineType">LineType</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.HighLightStyle.ToString">
            <summary>
            Overridden for design time support.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.HighLighting.MyExpandableObjectConverter">
            <summary>
            This class supports the propertygrid at design time is not exposed to being used from user code.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector">
            <summary>
            The textselector class selects text and moves the start and end pointers flexible.
            </summary>
            <remarks>
            This class provides a lot of methods to select a text and move the start and endpoint of the selection, store
            as many ranges and access the stored ranges by a key value.
            </remarks>
            <example>
            The following code assumes you have two comboboxes which provides all available move unit
            options as an entry. It assumes also that a instance of <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.ITextSelector">ITextSelector</see> exists which has the name
            <i>TextSelector</i>. To get such an instance use the following code:
            <code>
            using GuruComponents.Netrix.WebEditing.HighLighting;
            
            ITextSelector TextSelector = this.htmlEditor1.TextSelector;
            </code>
            After retrieving the instance any of the commands for text selection can be sent. The following code assumes that
            two ComboBox's available on your Form containing valid numbers from the 
            <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.MoveTextPointer">MoveTextPointer</see> enumeration.
            <code>
            TextSelector.MoveFirstPointer((MoveTextPointer) this.comboBoxStartP.SelectedIndex);
            TextSelector.MoveSecondPointer((MoveTextPointer) this.comboBoxEndP.SelectedIndex);
            HighLightStyle hStyle = new HighLightStyle(Color.FromName(this.textBoxColor.Text), (UnderlineStyle) this.comboBoxType.SelectedIndex);
            TextSelector.RemoveHighLighting();
            TextSelector.SetHighLightStyle(hStyle);
            TextSelector.HighLightRange();
            </code>
            It is important to call <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.ITextSelector.RemoveHighLighting">RemoveHighLighting</see> on every selection change to remove the old style. Otherwise the
            old selection will stay on the surface and the new selection is added. The 
            <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.ITextSelector.RemoveHighLighting">RemoveHighLighting</see>
            <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.ITextSelector.SetHighLightStyle(GuruComponents.Netrix.WebEditing.HighLighting.IHighLightStyle)">SetHighLightStyle</see> method must be called once. The example calls it on every
            command, but a real life application should avoid this call.
            </example>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.ResetRangePointers">
            <summary>
            Reset the range pointer to the beginning of the document and after that set the base range to the pointer location.
            </summary>
            <remarks>
            The method takes the body as range, set the pointers to that range, collapses the pointers
            to the beginning and moves the range to the collapsed pointers. As an result, the current
            range is at the beginning with a length of 0.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SelectRange(System.String)">
            <summary>
            Selects a previously selected and stored fragment.
            </summary>
            <remarks>
            This method does not scroll into view if the fragment selected was outside the designer surface.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SelectRange(System.String,System.Boolean)">
            <summary>
            Selects a previously selected and stored fragment.
            </summary>
            <param name="key">The name of the stored fragment.</param>
            <param name="ScrollIntoView">If set to <c>true</c> the control tries to scroll the selected range into the visible area.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveRangeToPointers">
            <summary>
            Moves the current range to the pointers, but does not select the range.
            </summary>
            <remarks>
            This method checks whether the first pointer is left from or equal to the second one. 
            If not, the command will be ignored.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveCurrentRange(GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit,System.Int32)">
            <summary>
            Move the current range completely the given number of units.
            </summary>
            <remarks>
            The command will ignore the number if there are no more units left in the document.
            </remarks>
            <param name="Move">The kind of unit the command use to move.</param>
            <param name="Count">The number of units the command is supposed to move.</param>
            <returns>Returns the number of units the command has moved. The command will return -1 in case of an error.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveCurrentRangeStart(GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit,System.Int32)">
            <summary>
            Moves the current range start point.
            </summary>
            <remarks>
            This method may fail if the start point is beyond the end point.
            </remarks>
            <param name="Move">The kind of unit the command use to move.</param>
            <param name="Count">The number of units the command is supposed to move.</param>
            <returns>Returns the number of units the command has moved. The command will return -1 in case of an error.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveCurrentRangeEnd(GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit,System.Int32)">
            <summary>
            Moves the current range end point.
            </summary>
            <remarks>
            This method may fail if the end point is before the start point.
            </remarks>
            <param name="Move">The kind of unit the command use to move.</param>
            <param name="Count">The number of units the command is supposed to move.</param>
            <returns>Returns the number of units the command has moved. The command will return -1 in case of an error.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetTextInRange">
            <summary>
            Gets the text in the current range.
            </summary>
            <returns>Returns the text or an empty string, if no selection.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetHtmlInRange">
            <summary>
            Gets the HTML in the current range.
            </summary>
            <remarks>
            If the range is not valid or does not span any characters the method returns an empty string.
            </remarks>
            <returns>Returns the HTML in the range, if the range contains valid HTML, otherwise the text content.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SetTextInRange(System.String)">
            <summary>
            Set text withing the current range.
            </summary>
            <remarks>
            If there is no valid range to set text the method will do nothing.
            </remarks>
            <param name="text">The text to be set as a replacement of the current range content.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetTextInStoredRange(System.String)">
            <summary>
            Gets the Text in a stored range.
            </summary>
            <param name="key">The key of the stored range.</param>
            <remarks>
            The method will strip out any HTML tags before returning the content.
            If the range is not valid or does not span any characters the method returns an empty string.
            </remarks>
            <returns>Returns the HTML in the range, if the range contains valid HTML, otherwise the text content.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetHtmlInStoredRange(System.String)">
            <summary>
            Gets the HTML in a stored range.
            </summary>
            <param name="key">The key of the stored range.</param>
            <remarks>
            If the range is not valid or does not span any characters the method returns an empty string.
            </remarks>
            <returns>Returns the HTML in the range, if the range contains valid HTML, otherwise the text content.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SaveCurrentRange(System.String)">
            <summary>
            Stores the current range for later access.
            </summary>
            <remarks>
            This method can be used with the highlighting feature to highlight a prepared range later.
            </remarks>
            <param name="key"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.ClearRangeStore">
            <summary>
            Clears all stored ranges.
            </summary>
            <remarks>
            This removes highlighting and stored range pointers, but preserves the text selected with the range.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.IsInCurrentRange(System.String)">
            <summary>
            This method checks if a stored range is inside the current range.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.EqualsCurrentRange(System.String)">
            <summary>
            This method checks if a stored range equals the current range.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.CompareEndPoints(GuruComponents.Netrix.WebEditing.HighLighting.CompareUnit,System.String)">
            <summary>
            This method compares the endpoints.
            </summary>
            <param name="compare"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.ScrollIntoView(System.Boolean)">
            <summary>
            Causes the object to scroll into view, aligning either to top or bottom of the window.
            </summary>
            <remarks>
            Depending on the size of the given range the control may not be able to scroll exactly to the very top or 
            very bottom of the window, but will position the object as close to the requested position as possible.
            </remarks>
            <param name="atStart"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveCaretToPointer(System.Boolean)">
            <summary>
            Moves the caret (insertion point) to the beginning or end of the current range.
            </summary>
            <remarks>
            If it appears that the caret is at the end of the visible range and the parameter
            <c>atStart</c> was <c>true</c>, the pointers are exchanged. That means that the start pointer
            is beyond the end pointer. This is still a valid range, but some commands may fail or
            behave differently in that case. The host application should be aware about the current
            pointer positions and should provide a way to reset the pointers to the document top. This
            can be done using the various Move commands accordingly.
            </remarks>
            <param name="atStart"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetPointerInformation(System.Boolean)">
            <overloads/>
            <summary>
            Returns a collection of information about both pointers.
            </summary>
            <remarks>
            The number of character the information method retrieves is set to 1.
            </remarks>
            <param name="Move">Value that specifies TRUE if the pointer is to move past the content to the left (right respectively), or FALSE otherwise. If TRUE, the pointer will move either to the other side of the tag to its left, or up to the number of characters specified by parameter tryChars, depending on the <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.ContextType"/> to the pointer's left (right respectively).</param>
            <returns>Returns a structure with basic pointer informations.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetPointerInformation(System.Boolean,System.Int32)">
            <summary>
            Returns a collection of information about both pointers.
            </summary>
            <param name="Move">Value that specifies TRUE if the pointer is to move past the content to the left (right respectively), or FALSE otherwise. If TRUE, the pointer will move either to the other side of the tag to its left, or up to the number of characters specified by parameter tryChars, depending on the <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.ContextType"/> to the pointer's left (right respectively).</param>
            <param name="tryChars">Variable that specifies the number of characters to retrieve to XXXRetrieveChars property, if <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.ContextType"/> is <see cref="F:GuruComponents.Netrix.WebEditing.HighLighting.ContextType.Text"/>, 
            and receives the actual number of characters the method was able to retrieve. It can be set to -1, 
            indicating that the method should retrieve an arbitrary amount of text, up to the next no-scope element 
            or element scope transition.</param>
            <returns>Returns a structure with basic pointer informations.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SetPointerGravity(GuruComponents.Netrix.WebEditing.HighLighting.PointerSelection,GuruComponents.Netrix.WebEditing.HighLighting.PointerGravity)">
            <summary>
            Sets the gravity attribute of this pointer.
            </summary>
            <param name="pointer">The Pointer which gravity is to set.</param>
            <param name="gravity">The gravity which is to set.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.ExpandRange(GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit)">
            <summary>
            Expand the current range to that partial units are completely contained.
            </summary>
            <param name="ExpandTo"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SelectElementText(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Selects the whole text of the given element.
            </summary>
            <remarks>
            This is a mixed mode command, uses internally Pointers and Ranges. The command will move both 
            pointers to the elements boundaries. Then the current base range is set to these pointers and finally
            used to set the elements content. After all the changed content is selected and scrolled into view.
            </remarks>
            <param name="element">Any element object that implements <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</see> and that does contain selectable text.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.DeleteRangeText">
            <summary>
            This method deletes the content of the current base range.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetSelectionPosition(GuruComponents.Netrix.WebEditing.Elements.IElement,System.Int64@,System.Int64@)">
            <summary>
            Returns the current selection positions, based on markup pointers, within a given element.
            </summary>
            <remarks>
            The values ignore all HTML formatting and count just characters. Returns -1 for both if there is no selection.
            <para>
            The method expects an element object. See other overload to retrieve within the body.
            </para>
            <para>
            This method does not interfer other method in this class. It's deterministic in any way.
            </para>
            </remarks>
            <param name="posStart">Returns the start position within the body range, in characters, zero based.</param>
            <param name="posEnd">Returns the start position within the body range, in characters, zero based.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetSelectionPosition(System.Int64@,System.Int64@)">
            <summary>
            Returns the current selection positions, based on markup pointers.
            </summary>
            <remarks>
            The values ignore all HTML formatting and count just characters. Returns -1 for both if there is no selection.
            <para>
            This method does not interfer other method in this class. It's deterministic in any way.
            </para>
            </remarks>
            <param name="posStart">Returns the start position within the body range, in characters, zero based.</param>
            <param name="posEnd">Returns the start position within the body range, in characters, zero based.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SetSelectionPosition(System.Int64,System.Int64)">
            <summary>
            Set the current selection based on positions of previously read  markup pointers. 
            </summary>
            <param name="posStart"></param>
            <param name="posEnd"></param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetMarkupPosition(GuruComponents.Netrix.WebEditing.HighLighting.PointerSelection)">
            <summary>
            Retrieves the position of a markup pointer. 
            </summary>
            <remarks>As long as the pointer's positioned, the method can be used to retrieve the carets position at line.</remarks>
            <returns>Returns markup pointer's position</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.IsAtWordBreak(GuruComponents.Netrix.WebEditing.HighLighting.PointerSelection)">
            <summary>
            Determines if the markup pointer is positioned at a word break.
            </summary>
            <param name="pointer">If <c>False</c> the first Pointer is checked, the second otherwise.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.IsInsideURL(GuruComponents.Netrix.WebEditing.HighLighting.PointerSelection)">
            <summary>
            Determines if a markup pointer is located inside of, at the beginning of, or at the end of text that is formatted as a URL. 
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveToElementContent(GuruComponents.Netrix.WebEditing.HighLighting.PointerSelection,GuruComponents.Netrix.WebEditing.Elements.IElement,System.Boolean)">
            <summary>
            Moves a markup pointer to a particular element in a markup container.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveUnitBounded(GuruComponents.Netrix.WebEditing.HighLighting.PointerSelection,GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit)">
            <summary>
            Moves a markup pointer to a specified location in a specified direction, but not past the other markup pointer. 
            </summary>
            <remarks>
            This method can simplify the usage of pointers, because it avoids an frequently mistake which results
            in some loss of functionality; the positioning of the second pointer before the first one.  
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SelectPointerRange">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Select the current range between two pointers.
            </summary>
            <remarks>
            This method moves the current base range to the current pointers and selects the range, 
            when the first pointer was left of the second one.
            <para>
            The method does not scroll the range into view.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SelectPointerRange(System.Boolean)">
            <summary>
            Select the current range between two pointers.
            </summary>
            <remarks>
            This method moves the current base range to the current pointers and selects the range, 
            when the first pointer was left of the second one.
            </remarks>
            <param name="ScrollIntoView">If set to <c>true</c> the control tries to scroll the selected range into the visible area.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.DeleteTextBetweenPointers">
            <summary>
            Deletes the text between the pointers. 
            </summary>
            <remarks>If the selection is fragmented HTML a valid structure will be rebuild.</remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetTextBetweenPointers">
            <summary>
            Returns the text between two valid pointers.
            </summary>
            <returns>The text between the pointers. HTML tags are stripped out.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.PasteHtml(GuruComponents.Netrix.WebEditing.Elements.IElement,System.String)">
            <summary>
            Paste the HTML text into the element.
            </summary>
            <remarks>
            Element must be of type container. The HTML must be valid after pasting.
            </remarks>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.Paste(GuruComponents.Netrix.WebEditing.Elements.IElement)"/>
            <param name="element">The element in which the HTML has to be pasted.</param>
            <param name="html">Any valid HTML text.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.Paste(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Paste the Clipboard text into the element.
            </summary>
            <remarks>
            Element must be of type container. The HTML must be valid after pasting.
            </remarks>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.PasteHtml(GuruComponents.Netrix.WebEditing.Elements.IElement,System.String)"/>
            <exception cref="T:System.ArgumentException">Thrown if the clipboard has no valid data. Expected formats are HTML and Text.</exception>
            <param name="element">The element in which the HTML has to be pasted.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.Paste">
            <summary>
            Paste the current content of clipboard at current caret position and let pointers and range follow the insertion point.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.GetHtmlBetweenPointers">
            <summary>
            Returns the HTML between two valid pointers.
            </summary>
            <returns>The text between the pointers. HTML tags are preserved.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.ResetFindWordPointer">
            <summary>
            Call this to reset the pointers to catch the whole document.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.FindTextBetweenPointers(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Searches a text and move the pointers to the result.
            </summary>
            <remarks>
            This is a nice enhancement of the regular find function to narrow a search. It searches the whole document,
            but starts searching using the current pointer position. So in case you want to restart search from the
            beginning, just set the pointers back by calling <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MovePointersToElement(GuruComponents.Netrix.WebEditing.Elements.IElement,System.Boolean)"/>, <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveFirstPointer(GuruComponents.Netrix.WebEditing.HighLighting.MoveTextPointer)"/>,
            or <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveSecondPointer(GuruComponents.Netrix.WebEditing.HighLighting.MoveTextPointer)"/>.
            If you seek a word and highlight is, you must assure that the pointers get collapsed to avoid seeking the same
            word again. If the find method would to this, you would have no range afterwards. 
            </remarks>
            <example>
            htmlEditor1.TextSelector.SetHighLightStyle(highLightStyle);
            htmlEditor1.TextSelector.MovePointersToElement(htmlEditor1.GetBodyElement(), true);
            // assume textBoxSearch is a TextBox with the search word
            while (htmlEditor1.TextSelector.FindTextBetweenPointers(textBoxSearch.Text, false, true, true))
            {
                htmlEditor1.TextSelector.HighLightRange();
                highLightList.Add(htmlEditor1.TextSelector.LastSegment);
                // checkBoxAll is a CheckBox that lets the user select all words with one shot
                if (!checkBoxAll.Checked) break;
            }
            RefreshList();
            </example>
            <param name="searchString">A string to search for.</param>
            <param name="upWards">The direction in which the search takes place.</param>
            <param name="matchCase">Must be set to <c>true</c> if match case is required.</param>
            <param name="wholeWord">Must set to <c>true</c> if only whole words should be found.</param>
            <returns>Returns <c>true</c> if something was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveFirstPointer(GuruComponents.Netrix.WebEditing.HighLighting.MoveTextPointer)">
            <summary>
            Move the first pointer.
            </summary>
            <remarks>
            The pointers can be used to create a range. The range can be moved too, using the
            <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveCurrentRange(GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit,System.Int32)">MoveCurrentRange</see>
            method.
            </remarks>
            <param name="Move">The first pointer will be moved to the given destination.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveSecondPointer(GuruComponents.Netrix.WebEditing.HighLighting.MoveTextPointer)">
            <summary>
            Move the second pointer.
            </summary>
            <remarks>
            The pointers can be used to create a range. The range can be moved too, using the
            <see cref="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MoveCurrentRange(GuruComponents.Netrix.WebEditing.HighLighting.MoveUnit,System.Int32)">MoveCurrentRange</see>
            method.
            </remarks>
            <param name="Move">The second pointer will be moved to the given destination.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MovePointersToCaret">
            <summary>
            Move the pointers to the caret to start next positioning around the caret.
            </summary>
            <remarks>
            It is recommended to set the pointers actively before any caret related move operation starts.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MovePointersToElement(GuruComponents.Netrix.WebEditing.Elements.IElement,System.Boolean)">
            <summary>
            Selects the whole text of the given element.
            </summary>
            <param name="element">Any element object that implements <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</see> and that does contain selectable text.</param>
            <param name="withRange">Whether or not the current base range should follow the pointers immediataly.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.SetHighLightStyle(GuruComponents.Netrix.WebEditing.HighLighting.IHighLightStyle)">
            <summary>
            Set the default highlight style.
            </summary>
            <remarks>
            This methiod pre-sets the highlight style. The current selection will not be changeds.
            </remarks>
            <param name="HighLightStyle">The highlight style object which is used from now on.</param>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.HighLightRange">
            <summary>
            Highlights the current range.
            </summary>
            <remarks>
            This method cannot work if no text fragment was selected before call. The highlight style should be set
            before first call.
            </remarks>
            <returns>The method returns <c>true</c> if the selection was highlighted, <c>false</c> otherwise. It is possible that </returns> the method fails if the start and end pointer do not define a valid range, e.g. the end pointer is on or before the start pointer.
        </member>
        <member name="P:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.LastSegment">
            <summary>
            Returns the last added highlight segment.
            </summary>
            <remarks>
            This segment contains a method which can be used to remove the segment later.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.RemoveHighLighting">
            <summary>
            Remove the last range segment used to highlight a single range.
            </summary>
            <remarks>
            The method ignores the command if no fragment is available.
            <para>
            If you need to remove the segments highlighted in previous steps you have to store these segments on your own and remove one by one
            using a loop.
            <example>
            private List&lt;IHighLightSegment&gt; textHighlightSegments;
             
            void _buttonTextHighLightRemove_ExecuteEvent(object sender, ExecuteEventArgs e)
            {
               if (textHighlightSegments != null &amp;&amp; textHighlightSegments.Count &gt; 0)
               {
                   foreach (HighLightSegment s in textHighlightSegments)
                   {
                       s.RemoveSegment();
                   }
               }
            }
            </example>
            The underlying object for each segment is COM and hence not properly serializable.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector.MovePointers(GuruComponents.Netrix.ComInterop.Interop.IMarkupPointer,GuruComponents.Netrix.ComInterop.Interop.IMarkupPointer)">
            <summary>
            Move the pointers to other from same scope.
            </summary>
            <param name="pStart"></param>
            <param name="pEnd"></param>
        </member>
        <member name="T:GuruComponents.Netrix.WebEditing.MoveCaret">
            <summary>
            Defines hwo the caret is being moved.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.MoveCaret.PreviousLine">
            <summary>
            Move to previous line.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.MoveCaret.NextLine">
            <summary>
            Move to next line.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.MoveCaret.CurrentLineStart">
            <summary>
            Move to beginning of current line.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.MoveCaret.CurrentLineEnd">
            <summary>
            Move to end of current line.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.MoveCaret.TopOfWindow">
            <summary>
            Move to top of window, e.g. the first visible line.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.WebEditing.MoveCaret.BottomOfWindow">
            <summary>
            Move to bottom of window, e.g. the last visible line.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.EditPanel">
            <summary>
            Handles basic events for editing purposes.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.EditPanel.ShouldHandleTAB">
            <summary>
            Checks out when we want to handle the TAB key internally.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.EditPanel.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <internalonly/>
        </member>
        <member name="M:GuruComponents.Netrix.EditPanel.IsInputKey(System.Windows.Forms.Keys)">
            <internalonly/>
        </member>
        <member name="M:GuruComponents.Netrix.EditPanel.PreProcessMessage(System.Windows.Forms.Message@)">
            <internalonly/>
        </member>
        <member name="M:GuruComponents.Netrix.EditPanel.DoShortCut(System.Windows.Forms.Keys)">
            <summary>
            Executes the short cut keys that should be available and handles all of the cases of design mode versus not.
            </summary>
            <param name="Key">The key to process.</param>
            <returns>If the key was handled succesfully, return true, otherwise return false.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.EditPanel.WndProc(System.Windows.Forms.Message@)">
            <internalonly/>
        </member>
        <member name="T:GuruComponents.Netrix.HtmlEditor">
            <summary>
            This is the editor control with the basic functionality.</summary>
            <remarks>
            <para>
            The main assembly has a satellite contract attribute to unlink the version relation between
            the main and the satellite assemblies. You should set all new satellites always to "1.0.0.0" to
            make the resource manager operate properly, even if the version of the main assembly is
            much higher.
            </para>
            <para>
            A basic application must only assure that any commands are issued after receiving of 
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete"/> event. When the control loads a document, it starts an
            synchronous parse procedure internally. This might take some time, even if the parser is really
            fast and common document parse and appear within microseconds, it takes a while and it's
            not recommended to assume in code that this procedure is always fast enough. Therefore,
            the <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete"/> event is the only guarantee that the content is ready
            and all commands can be issued safely.
            </para>
            <para>
            The editor has an integrated UI, that is, a toolstrip container with several toolstrips,
            a menustrip, and two rulers. Each part can be switched on and off using the Visual Studio.NET
            designer within the smart tag dialog. 
            Several tools are processed internally, but some are not. In any case the event
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ToolItemClicked"/> is being fired and this event is cancallable. That means, the
            host application can cancel the internal processing in case the click is handled elsewhere.
            In fact , for some tools the host application must handle the click.
            </para>
            <para>
            Plug-Ins can extend the control, if they implement the <see cref="T:GuruComponents.Netrix.PlugIns.IPlugIn"/> interface and
            being implemented as ExtenderProvider. This means, they appear on the component tray and extend
            the base control implicitly. Additional properties appear within the PropertyGrid.
            </para>
            <para>
            </para>
            </remarks>
            <example>
            To instantiate the control just call the constructor:
            <code>
            using GuruComponents.Netrix;
            
            HtmlEditor htmlEditor1 = new HtmlEditor();
            // do some stuff with the editor here</code>
            A basic application to implement a HTML editor solution must provide these functions:
            <list type="list">
                <item><term>An instance of the component.</term></item>
                <item><term>The <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> event attached to a handler.</term></item>
                <item><term>A handler which sets the control into design mode on request.</term></item>
            </list>
            After having this the user can put the control into design mode and the application can look for the
            ready state complete event. It is important that no function is called before this event was fired.
            <para>
            Take a look at the various methods and properties to see more examples of how to use it.
            </para>
            </example>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.ToolItemClicked">
            <summary>
            Fired if the user clicked any of the toolstrip or menustrip tools.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.BeforeNavigate">
            <summary>
            Fired before the control navigates to a new hyperlink.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.DragLeave">
            <summary>
            Fired if mouse leaves the control during drag operation.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.DragDrop">
            <summary>
            The event is fired after a drop operation.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.DragOver">
            <summary>
            This event is fired during the drag operation.
            </summary>
            <remarks>
            This is fired multiple times based
            on the mouse move event. Handler methods should not perform time consuming tasks.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.DragEnter">
            <summary>
            This is fired on drag enter.
            </summary>
            <remarks>
            This should normally fire when the mouse enters the editors surface
            with left mouse button down. The mouse cursor will change before(!) the event is fired
            depending on the attached drag data.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.BeforeShortcut">
            <summary>
            Fired before a shortcut is processed internally.
            </summary>
            <remarks>
            The purpose of this event is to handle shortcuts elsewhere and disable the internal handling
            specifically for some keys. 
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.NextOperationAdded">
            <summary>
            Notifies that a new unit has been added to the current manager.
            </summary>
            <remarks>
            The event argument's sender parameter is the current <see cref="T:GuruComponents.Netrix.WebEditing.UndoRedo.IUndoStack">IUndoStack</see> object. One can cast the parameter to 
            <see cref="T:GuruComponents.Netrix.WebEditing.UndoRedo.IUndoStack">IUndoStack</see> and use the various methods and properties
            to determine what happens during the last operation.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.Loading">
            <summary>
            Fired before a new document will loaded from stream or file.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.Loaded">
            <summary>
            Fired after the new document is succesfully loaded from stream or file.
            </summary>
            <remarks>
            The event is fired immediataley after the base stream is loaded and and the protocol handler 
            is successfully attached. Loading a document is a asynchronous process. If the document contains
            several object (like images) they are loaded after the base document is ready. This may take a
            while. The final document cannot be used before the ReadyStatecomplete event is fired.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.Saving">
            <summary>
            Fired before the document will save into stream.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.Saved">
            <summary>
            Fired after the document is succesfully saved into stream.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.DocumentCreated">
            <summary>
            Fired if a new document was successfully created.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.ElementCreated">
            <summary>
            Fired if a new document was successfully created.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.BeforeResourceLoad">
            <summary>
            Notifies the host that the asynchronous loader is about to load a new resource (image, css file, ...).
            </summary>
            <remarks>
            The host may stop loading or change the URL to any other local or remote resource which should be loaded
            instead. The event arguments contain information about MIME type and file name.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.FindHasReachedEnd">
            <summary>
            Fired if a find call reached the end of the document.
            </summary>
            <remarks>
            It doesn't matter whether the previous find, which causes the event to be fired, has successfully found
            any text. Generally, ignoring the event will wrap the find process and start at the beginning of the document
            again. Alternatively the Parameter <c>stopAtEnd</c> of second overload of the <see cref="M:GuruComponents.Netrix.HtmlEditor.Find(System.String,System.Boolean,System.Boolean,System.Boolean)"/> method
            can be used to stop. The event will always fire, even if the process stops automatically then.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.BeforeReplace">
            <summary>
            Fired after the replace routine has found a word.
            </summary>
            <remarks>
            The Cancel property allows the host application to stop replacing interactively.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.PropertyFilterRequest">
            <summary>
            Fired when PropertyGrid first requests the property (attribute) descriptions.
            </summary>
            <remarks>
            This event can be used to filter the list of properties in the Grid form each HTML object
            to reduce the number of attributes the user can edit. This is an "per object" request which
            is cached internally.
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.PropertyDisplayRequest"/>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.EventFilterRequest"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.PropertyDisplayRequest">
            <summary>
            Fired after the complete property description for an element is ready and the PropertyGrid is up to invoke.
            </summary>
            <remarks>
            The purpose of this event is to change the content and behavior of any property contained in
            the PropertyDescriptorCollection, as well as adding properties dynamically to build a property bag.
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.PropertyFilterRequest"/>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.EventDisplayRequest"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.EventFilterRequest">
            <summary>
            Fired when PropertyGrid first requests the event (attribute) descriptions.
            </summary>
            <remarks>
            This event can be used to filter the list of properties in the Grid form each HTML object
            to reduce the number of attributes the user can edit. This is an "per object" request which
            is cached internally.
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.PropertyFilterRequest"/>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.EventDisplayRequest"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.EventDisplayRequest">
            <summary>
            Fired after the complete event description for an element is ready and the PropertyGrid is up to invoke.
            </summary>
            <remarks>
            The purpose of this event is to change the content and behavior of any property contained in
            the EventDescriptorCollection, as well as adding events dynamically to build a property bag.
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.PropertyDisplayRequest"/>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.EventFilterRequest"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.UpdateUI">
            <summary>
            Fired if the host application should update their UI (toolbars, enable/disable menu items).
            </summary>
            <remarks>
            The event is fired on all actions that the internal processing or the user might invoke. 
            This allows the host application to set their toolbars or menu items according to the current caret position or mouse move. 
            See method <see cref="M:GuruComponents.Netrix.HtmlEditor.GetCommandInfo(GuruComponents.Netrix.ComInterop.Interop.IDM)"/> in conjunction 
            with <see cref="P:GuruComponents.Netrix.WebEditing.Elements.Element.EffectiveStyle">EffectiveStyle</see> is the best way 
            to retrieve the state at the current caret or mouse pointer position.
            <para>
            The element delivered by the event argument (<see cref="T:GuruComponents.Netrix.Events.UpdateUIEventArgs"/>) is the one the has caused the last event.
            If, for example, the mouse is moving over an H1 element, than this element is the one delivered by the UpdateUI event,
            which is fired when the mouse enters the element's borders. The reason is, that you have now the opportunity to update
            your UI according to the actions that might be available for this very element. The <see cref="P:GuruComponents.Netrix.HtmlEditor.CurrentScopeElement"/>
            property returns the element following the insertion point (shown by the caret) and treated as the editor's current 'scope'.
            This is not neccesseraly the same as the one delivered by <see cref="E:GuruComponents.Netrix.HtmlEditor.UpdateUI"/> event.
            </para>
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.WebException">
            <summary>
            Fired if an exception occured during loading resources from web.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.BeforeSnapRect">
            <summary>
            Fired before the snap rect method is applied during resize and move. Cancallable.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.AfterSnapRect">
            <summary>
            Fired after the snap rect method is applied during resize and move.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.PostEditorEvent">
            <summary>
            Latest event after all internal processing has taken place.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.ContentModified">
            <summary>
            Fired if the control becomes Dirty the first time.
            </summary>
            <remarks>
            The event is fired if the Dirty flag changes from "not dirty" to "dirty". If the
            dirty flag is reset after this and becomes dirty later the event is fired again.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.ContentChanged">
            <summary>
            Fired if the document changes by user interaction or programmatic access to properties.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.ShowContextMenu">
            <summary>
            Fired if user tries to show a contextmenu with right click.
            </summary>
            <remarks>
            Host app should provide a contextmenu shown after receiving the event (right mouse click). An alternative
            way is the usage of the <see cref="P:GuruComponents.Netrix.HtmlEditor.ContextMenu">ContextMenu</see> 
            as well as <see cref="P:GuruComponents.Netrix.HtmlEditor.ContextMenuStrip">ContextMenuStrip</see> property.
            You must assure that not both option used in the same application.
            <para>
            <see cref="P:GuruComponents.Netrix.HtmlEditor.ContextMenuStrip">ContextMenuStrip</see> is not available for
            version compiled exclusively for .NET 1.1 or prior.
            </para>
            </remarks>
            <example>
            The event is used in that way:
            <code>
            this.htmlEditor1.ShowContextMenu += new GuruComponents.NetrixEvents.ShowContextMenuEventHandler(htmlEditor1_ShowContextMenu);
            </code>
            The event handler is responsible for the context menus themselves:
            <code>
            private void htmlEditor1_ShowContextMenu(object sender, GuruComponents.NetrixEvents.ShowContextMenuEventArgs e)
            {
                this.contextMenu1.Show(this.htmlEditor1, e.Location);
                EditTagDialog.Location = this.PointToScreen(e.Location);
            }
            </code>
            The field <c>contextMenu1</c> is a .NET context menu, which can define or configure on the fly if necessary. 
            </example>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.HtmlMouseOperation">
            <summary>
            Fired if any mouse operation happens. 
            </summary>
            <remarks>Returns element information and coordinates in event args.</remarks>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.HtmlKeyOperation"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.HtmlKeyOperation">
            <summary>
            Fired if any key operation happens.
            </summary>
            <remarks>
            Returns element information and pressed key status.
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.HtmlMouseOperation"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.HtmlElementChanged">
            <summary>
            Fired if a key or mouse operation has changed the current element.
            </summary>
            <remarks>
            Subsequent clicks or keystrokes within the same element does not fire the event again. 
            See <see cref="P:GuruComponents.Netrix.HtmlEditor.HtmlEditorSite"/> for an usage scenario.
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.HtmlEditorSite"/>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.HtmlKeyOperation"/>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.HtmlMouseOperation"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.FrameActivated">
            <summary>
            Fired if a frame becomes active in a framed document.
            </summary>
            <remarks>
            This event is only available if the current document has frames and is in design mode.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">
            <summary>
            Fired if ready state switches to complete after loading/reloading a document.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.ReadyStateChanged">
            <summary>
            Fired if the control changes the state of the document.
            </summary>
            <remarks>
            It is recommended to use the <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete"/>
            event instead of checking ReadyStateChanged for the complete state.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetElementsByTagName(System.String)">
            <summary>
            Returns an array of element objects which contains all element with the given tag name. 
            </summary>
            <remarks>
            If no such elements the method will return null.
            </remarks>
            <param name="tagName">The name of the specific tag which the method should search.</param>
            <returns>The <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementCollection"/> of <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/> objects or null, if no elements found.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetElementById(System.String)">
            <summary>
            Returns the element with the given Id as native element object.
            </summary>
            <param name="Id">The ID value which the method should search for.</param>
            <returns>The element, if found or <c>null</c>, if there is no such element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetAllElements">
            <summary>
            Returns all element of the current page.
            </summary>
            <returns>The collection of all elements.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetBodyElement">
            <summary>
            Returns the current BodyElement object from the document.
            </summary>
            <returns>BodyElement, if any or null if no body is present or document is not ready.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.PrintToHdc(System.Drawing.Graphics)">
            <summary>
            Print the current content to the given graphics device
            </summary>
            <remarks>
            EXPERIMENTAL.<br/>
            Use this method to create an image (screenshot of the whole page).
            </remarks>
            <param name="gr">Device the method is creating the output on.</param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ForceMimeType">
            <summary>
            If set to true all loaded data with textual base type will be treated as HTML.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AcceptsTab">
            <summary>
            Processes the TAB key if possible instead of moving focus to next control.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AutoWordSelection">
            <summary>
            Whether select a complete word on double click.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Font">
            <summary>
            Sets or gest the current font.
            </summary>
            <remarks>
            This property is a shortcut to <see cref="P:GuruComponents.Netrix.ITextFormatting.FontSize"/>, <see cref="P:GuruComponents.Netrix.ITextFormatting.FontName"/>
            and several toggle methods. In case the color
            is not set the property returns Times New Roman 12pt.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.RightToLeft">
            <summary>
            Sets or gets the writing direction.
            </summary>
            <remarks>
            </remarks>      
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.SelectedText">
            <summary>
            Returns the currently selected text.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Lines">
            <summary>
            Lines the document represents, that means, text divided by line feeds.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.SelectionLength">
            <summary>
            Length of current selection.
            </summary>		
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.TextLength">
            <summary>
            Length of text content, with HTML parts stripped out.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.AppendText(System.String)">
            <summary>
            Appends text at the current caret position and treats the text as HTML.
            </summary>
            <remarks>In case the current caret cannot be recognized the content is appended to the end.</remarks>
            <param name="text">Text or HTML being written.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Clear">
            <summary>
            Clears the document but let the connected objects intact.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetCharFromPosition(System.Drawing.Point)">
            <summary>
            Returns the character nearby the given client position.
            </summary>
            <param name="pt">Point in client coordinates.</param>
            <returns>Character nearby the coordinates. In case it cannot be recognized it will return <see cref="F:System.Char.MinValue"/>.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.HtmlFormatterOptions">
            <summary>
            Default formatter used if no external formatter is being provided.
            </summary>
            <remarks>
            To provide your own formatter, implement <see cref="T:GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions"/> interface and
            set to this property. Then the internal object gets overwritten.
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanBuildMht">
            <summary>
            Forces the file loader to prepare the content as MHT which could be save later.
            </summary>
            <remarks>
            This option is probably time consuming on each save operation.
            </remarks>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.SaveMht"/>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.CanSaveMht"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanSaveMht">
            <summary>
            Checks whether or not we have MHT loaded and available for save to string or file.
            </summary>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.SaveMht"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Text">
            <summary>
            Textual representation of content.
            </summary>
            <remarks>
            The inner text is all content without any tags. This may garbage the text because spaces between
            words made by elements disappear. Setting the inner text will remove all tags from document. 
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.InnerHtml"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Visible">
            <summary>
            Controls Visibility of whole container.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Version">
            <summary>
            The current Assembly version.
            </summary>                   
            <remarks>
            This property returns the current assembly version to inform during design session about the assembly loaded.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.SerialNumberPrefix">
            <summary>
            Returns the current serial number prefix the control was licensed with.
            </summary>
            <remarks>
            Note: The prefix does not contain secret information about the key or your serial number.
            If an user retrieves the prefix from the control he cannot activate or retrieve your license.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Enabled">
            <summary>
            Get or sets the control's enabled state and sets nested controls as well.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CurrentCulture">
            <summary>
            Sets or gets the current Culture.
            </summary>
            <remarks>
            Setting a different culture will load the language from
            NetRix.Localization.dll satellite DLL, which should contain the strings and images for that
            culture. If the culture does not exists there the default culture "en-US" will load.
            Once the resource is loaded, we store it in a static field to make it accessible to all
            classes which does not derive from HtmlEditor.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Formatter">
            <summary>
            Get an instance of the <see cref="T:GuruComponents.Netrix.HtmlFormatting.HtmlFormatter"/> class.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Glyphs">
            <summary>
            Access to the glyph module.
            </summary>
            <remarks>
            This property gives access to the advanced customizable glyph module.
            <para>Glyphs are small icons representing tags in design mode. It helps users to understand where the tags are and how they build
            the content. There are several glyphs available as embedded resources.</para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Glyphs.GlyphVariant"/>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Glyphs.HtmlGlyphsKind"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.TextSelector">
            <summary>
            Return the currently used TextSelector.
            </summary>
            <remarks>
            The <see cref="T:GuruComponents.Netrix.WebEditing.HighLighting.TextSelector">TextSelector</see> class handles selection 
            specifically for text, whereas HtmlSelection provides element based methods.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.WordCount">
             <summary>
             This property returns the number of words in the document.
             </summary>
             <remarks>
             If the document is not in design mode the property will return 0. The method is time consuming.
             It is not recommended to call this property frequently, e.g. in mouse move or key press handlers.
             </remarks>
             <remarks>
             The method works in design mode only.
             </remarks>
             <example>
             Assuming MenuItem4 is a way the user can reach this method, the application can display the number of words
             using this method:<code>
            Private Sub MenuItem4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MenuItem4.Click
              MessageBox.Show(Me, "This document contains approximatly " + Me.HtmlEditor1.WordCount.ToString() + " Words", 
                                  "Word Count", 
                                  MessageBoxButtons.OK, 
                                  MessageBoxIcon.Information)
            End Sub</code>
             </example>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.DisableEditFocus">
            <summary>
            Turns off the hatched border and handles around a site selectable element when the element has "edit focus" in design mode; that is, when the text or contents of the element can be edited.
            </summary>
            <value><c>True</c> to active the property. Defaults to <c>False</c>.</value>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.RespectVisibility">
            <summary>
            When activated, the control will respect the visiblity property set to hidden and the
            display property set to none.
            </summary>
            <value><c>True</c> to active the property. Defaults to <c>False</c>.</value>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.BordersVisible">
            <summary>
            Show borders around elements if they don't have own borders.
            </summary>
            <remarks>
            This makes invisible tables and blind images visible at design time. 
            If the table designer plugin is being used it's recommended to disable this option.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.LinkedStylesheetsEnabled">
            <summary>
            This property disables linked stylesheets temporarily in design view.
            </summary>
            <remarks>
            It does not remove the styles or link tags nor it has any effect on the final document.
            </remarks>
            <example>
            Use the following code to switch the style sheet on and off:
            <code>
            this.htmlEditor1.LinkedStylesheetsEnabled = e.Button.Pushed;
            </code>
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AutoUrlModeEnabled">
            <summary>
            Enables or disables the automatic detection of URL and eMail addresses during text editing.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.LiveResize">
            <summary>
            Causes the editor to update an element's appearance continuously during a resizing or moving operation, rather than updating only at the completion of the move or resize.
            </summary>
            <remarks>
            When this feature is off, an element's new position or size is indicated by a dashed rectangle until the mouse button is released.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AtomicSelection">
            <summary>
            Any element that has the <see cref="P:GuruComponents.Netrix.WebEditing.Elements.IElement.AtomicSelection"/> attribute set will be selectable only as a unit.
            </summary>
            <remarks>
            In design mode, the editor's default behavior allows you to locate the insertion point in the text of any element, 
            including elements with an ATOMICSELECTION attribute.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.MultipleSelectionEnabled">
            <summary>
            Indicates if multiple selection is enabled in the editor.</summary>
            <remarks>
            Implicitly places MSHTML into multiple selection mode if set to <c>true</c>.
            This selection mode applies only if the control is in absolute positioning mode. To enter this mode
            just set the property 
            <see cref="P:GuruComponents.Netrix.HtmlEditor.AbsolutePositioningEnabled">AbsolutePositioningEnabled</see>.
            Internally the control uses style sheets to enable HTML beeing absolute positioned.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapEnabled">SnapEnabled</seealso>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.AbsolutePositioningEnabled">AbsolutePositioningEnabled</seealso>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridVisible">GridVisible</seealso>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.Grid">Grid</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AbsolutePositioningEnabled">
            <summary>
            Enables or disables absolute position for the entire editor.
            </summary>
            <remarks>
            Internally the control uses style sheets to enable HTML beeing absolute positioned. After moving
            positionable elements (IMG, TABLE, DIV, ...) the style "position:absolute" will be applied. If a 
            position could be retrieved the "top" and "left" style attributes are set. Switching this property off
            will not remove the position information nor move the elements. After an element is first time moved
            with the mouse with AbsolutePositioningEnabled is off, the style "position:absolute" wil be removed.
            The position information will still left in the style attribute. If the property will be activated later,
            the style "position:absolute" is added again and the elements jump back to there previous position after
            the mouse touches them.
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.SnapEnabled">SnapEnabled</seealso>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.MultipleSelectionEnabled">MultipleSelectionEnabled</seealso>
            <seealso cref="P:GuruComponents.Netrix.WebEditing.Behaviors.HtmlGrid.GridVisible">GridVisible</seealso>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.Grid">Grid</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Selection">
            <summary>
            The current selection in the editor.
            </summary> 
            <remarks>
            See <see cref="T:GuruComponents.Netrix.HtmlSelection"/> for more information.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.KeepSelection">
            <summary>
            Maintains a selection even when the control loses focus.
            </summary>
            <remarks>
            This property is useful for applications that require multiple control instances to interact with each other. 
            One example is an e-mail application that allows users to select from a list of e-mails in one control instance and 
            to see the actual e-mail in a second instance.
            </remarks>        
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.TextFormatting">
            <summary>
            The text formatting element of the editor.
            </summary>
            <remarks>
            See <see cref="T:GuruComponents.Netrix.HtmlTextFormatting"/> for more information.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CssTextFormatting">
            <summary>
            The text formatting element of the editor. This class primarily supports CSS formatting.
            </summary>
            <remarks>
            <para>
            This property is new in the Netrix 2.0 Spring 2011 edition.
            </para>
            See <see cref="T:GuruComponents.Netrix.CssTextFormatting"/> for more information.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.DesignModeEnabled">
            <summary>
            Indicates whether the editor is in design mode.</summary>
            <remarks>
            Also places MSHTML into design mode if set to <c>true</c>.
            </remarks> 
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.DesignModeDesired">
            <summary>
            On creation process look for desired design state and set internally after the
            component was succesfully created. Called from HtmlEditor::OnCreate method.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Document">
            <summary>
            Returns the document object for doing insertions.
            </summary>
            <remarks>
            If the property was called the first time and there was no document loaded the control
            creates a new empty document with default properties. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.DocumentStructure">
            <summary>
            The structure of the document.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Window">
            <summary>
            Gets access to common window related functions and global helper methods.
            </summary>
            <remarks>
            Wrapper information: This class implements IHTMLWindow2, IHTMLWindow3, and IHTMLWindow4.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Timer">
            <summary>
            Gets access to timer features for smooth internal timed operations.
            </summary>
            <remarks>
            Wrapper information: This class partly implements IHTMLWindow2, IHTMLWindow3, and IHTMLWindow4.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.IsFrameDocument">
            <summary>
            Gets <c>true</c> if the current document is a frame document.
            </summary>
            <remarks>
            The purpose of this property is to detect the frame state of the document and switch 
            appropriate UI elements on or off. Internally the property simply checks the number 
            of frames. Therefore the property may return <c>false</c>, even if the document is
            a frame document with just zero frames. Developery of application which use frames
            extensivly may double check the content using <see cref="M:GuruComponents.Netrix.HtmlEditor.GetXmlDocument"/> method and
            XPath to see the real content of the base document.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.HtmlFrames">
            <summary>
            Returns an object containing all Frame information.
            </summary>
            <remarks>
            <para>
            Works only if the base document of a frameset.
            If the document contains a body this getter is still active and usable, but the framecollection is null.
            After retrieving successfully the frame object it can used to manipulate or create framesets.
            If the current document is a standard document and a new frame structure is build, the content will
            depraved and replaced by a new empty frameset.
            </para>
            <para>
            The documentation of <see cref="T:GuruComponents.Netrix.WebEditing.Documents.HtmlFrameSet"/> for more information about manipulation framesets.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ContextMenu">
            <summary>
            ContextMenu for the whole designer surface.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ContextMenuStrip">
            <summary>
            ContextMenu for the whole designer surface.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.VerticalScrollPosition">
            <summary>
            Gets the vertical scroll position.
            </summary>
            <remarks>
            The vertical scroll position is the distance from the document top
            to the current visible top border, measured in pixel. If the scrollbar is
            at the top position, this value is 0.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.HorizontalScrollPosition">
            <summary>
            Gets the horizontal scroll position. 
            </summary>
            <remarks>
            The horizontal scroll position is the distance from the document left
            to the current visible left border, measured in pixel. If the scrollbar is
            at the left position, this value is 0.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AllowDrop">
            <summary>
            Allow to use the NetRix control as a drop target.
            </summary>
            <remarks>
            Without this property the control will not recognize drop messages. 
            <seealso cref="T:GuruComponents.Netrix.WebEditing.DragDrop.DragDropCommands"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ActivationEnabled">
            <summary>
            Gets/Sets if the control is active before receiving the focus.
            </summary>
            <remarks>
            The purpose of the property is to temporarily hook off the control from the
            TAB list of controls. This results in removing the cursor (insertion point) from surface,
            until the user explicitly clicks onto the surface. After this forced activation
            the control behaves like any other input control the property is no longer used.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.IsReady">
            <summary>
            Indicates if the control is ready for use.
            </summary>
            <remarks>
            <para>
            If the document was a frameset, the complete handling is done in HtmlFrameSet class. This
            class can set the IsReady property exclusivly to true, if the frame document is ready.
            This assures that subsequent calls / events used from the base classes, like <see cref="P:GuruComponents.Netrix.HtmlEditor.Selection"/>
            work properly as they normally throw exceptions if methods are called for an unready document.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.IsDirty">
            <summary>
            Indicates if the contents of the editor have been modified.
            </summary>
            <remarks>
            This flag is set to <c>false</c> after a document or document fragment wss loaded. It becomes
            <c>true</c> after the first change in the documents structure or content. Moving the caret or
            clicking objects without moving them wil not set the flag to dirty state.
            <para>
            The flag will be reset on each save operation. This is done by calling the RawHtml content by
            any of the methods 
            <see cref="M:GuruComponents.Netrix.HtmlEditor.SaveHtml(System.IO.Stream)">SaveHtml</see> or 
            <see cref="M:GuruComponents.Netrix.HtmlEditor.SaveFormattedHtml(System.IO.Stream)">SaveFormattedHtml</see>. Whereas the
            SaveXXX methods really write content into a stream the 
            <see cref="M:GuruComponents.Netrix.HtmlEditor.GetRawHtml">GetRawHtml</see> or
            <see cref="M:GuruComponents.Netrix.HtmlEditor.GetFormattedHtml">GetFormattedHtml</see>, 
            method just returns the content to the caller. Both method are overloaded and provide a second
            parameter to force resetting the dirty flag. If this is done the host application should assure that the
            content is really saved, to keep the flag and the UI synchronized.        
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.InternalShortcutKeys">
            <summary>
            Activates or deactivates the internal shortcut keys.
            </summary>
            <remarks>
            If the property is on (default), the following keys are static assigned:
            <list type="table">
            <listheader>
            <item>Key</item><item>Description</item><item>Design Mode Only</item>
            </listheader>
            <item>Ctrl-A</item><item>Select all</item><item>-</item>
            <item>Ctrl-C</item><item>Copy selected text</item><item>-</item>
            <item>Ctrl-P</item><item>Print immediately using internal dialogs.</item><item>-</item>
            <item>Ctrl-U</item><item>Underline</item><item>+</item>
            <item>Ctrl-B</item><item>Bold</item><item>+</item>
            <item>Ctrl-I</item><item>Italic</item><item>+</item>
            <item>Ctrl-L</item><item>Align Left (Block only)</item><item>+</item>
            <item>Ctrl-R</item><item>Align Right (Block only)</item><item>+</item>
            <item>Ctrl-J</item><item>Justify (Multiline Block only)</item><item>+</item>
            <item>Ctrl-V</item><item>Paste</item><item>+</item>
            <item>Ctrl-X</item><item>Cut</item><item>+</item>
            <item>Ctrl-Y</item><item>Redo</item><item>+</item>
            <item>Ctrl-Z</item><item>Undo</item><item>+</item>
            </list>
            The property can be turned on and off during run time and will become active
            immediately. 
            <para>
            To strip out specific keys you can handle the 
            <see cref="E:GuruComponents.Netrix.HtmlEditor.BeforeShortcut">BeforeShortcut</see> event
            and set the <c>Cancel</c> property to true to disable the internal key handling. The same
            event can be used to assign more Shortcut keys in your application, because the event
            is fired on every kex in combination with the Ctrl (Control) key, even if the key stroke
            is not handled elsewhere.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Encoding">
            <summary>
            The encoding of the document.
            </summary>
            <remarks>
            The encoding can be changed during design time to change the document encoding with next save operation.
            </remarks>
            <example>
            Changing the encoding is very straight. The following line will set the encoding for all following save operations to UTF-8:
            <code>
            this.htmlEditor1.Encoding = System.Text.Encoding.UTF8;
            </code>
            If you load a text from a string with non-Ascii characters the automatic encoding recognition needs
            to knwo which culture should be used. Therefore it is important to set the CurrentCulture property of
            the current thread correctly. Even if the most systems run correctly it is recommended to set the 
            current culture in all environments to a specific value.
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.String)"/>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.LoadUrl(System.String)"/>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.LoadFile(System.String)"/>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.GetRawHtml"/>
            </example>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ScriptEnabled">
            <summary>
            Does not execute any script until fully activated. Browse Mode only.
            </summary>
            <remarks>
            <para>NetRix does not execute any script until fully activated. This flag is used to postpone 
            script execution until the host is active and, therefore, ready for script to be executed.
            </para>
            In design mode the scripting is always disabled and cannot be enabled by user code. When switching to browse
            mode or design mode to make scripting available remember to wait for <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete"/> event before 
            issue any action or send commands.
            <para>Prior Version 1.6 the description was wrong, but the implemention was as intended.</para>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.DesignModeEnabled"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ScrollBars">
            <summary>
            Sets various styles regarding the scrollbars (runtime property only).
            </summary>
            <remarks>
            This option sets the current body style to specific scrollbar options. To make this property persistent, the host
            application should either save the complete document, including the body, or save the body style "overflow" property
            separatly. The following table maps the various options against the CSS:
            <list type="table">
            	<listheader>
            		<item>Property</item><item>CSS Style</item>
            	</listheader>
            	<term>
            		<item>None</item><item>hidden</item>
            	</term>
            	<term>
            		<item>ForcedBoth</item><item>scroll</item>
            	</term>
            	<term>
            		<item>Both</item><item>auto</item>
            	</term>
            	<term>
            		<item>Vertical, Horizontal, ForcedVertical, ForcedHorizontal</item><item>Not supported.</item>
            	</term>
            </list>
            <para>
            This property can set only after <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete"/> event has been fired.
            </para>
            <para>
            This property is not accessible at design time, it can be set at runtime only.
            </para>
            <para>
            The get accessor will return RichTextBoxScrollBars.Both in case of non recognizable value or non-existing attribute, which
            is the controls default behavior.
            </para>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.ScrollBarsEnabled"/>
            </remarks>
            <exception cref="T:System.NotSupportedException">Throws if the value cannot be transformed into corresponding CSS.</exception>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ScrollBarsEnabled">
            <summary>
            Enables or disables scrollbars.
            </summary>
            <remarks>
            This property works globally and turns scrollbars on or off for the next document being loaded.
            For more scrollbar options see <see cref="P:GuruComponents.Netrix.HtmlEditor.ScrollBars"/> property.
            <para>
            This property can be set at both, design time and run time.
            </para>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.ScrollBars"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.TempFile">
            <summary>
            Allows access to the temp file if any exists, used for path resolvation.
            </summary>
            <remarks>
            The property may return <c>null</c> (<c>Nothing</c> in Visual Basic) in case of non existent temporary path.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.TempPath">
            <summary>
            Allows access to the base path if any, used for path resolvation.
            </summary>
            <remarks>
            The property may return <c>null</c> (<c>Nothing</c> in Visual Basic) in case of non existent temporary path.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AntiQuirks">
            <summary>
            Sets the control into W3C compliant rendering mode.
            </summary>
            <remarks>
            This property changes the behavior of the document by setting the DOCTYPE tag on top of the document
            during creation. Existing documents will not change their behavior.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Url">
            <summary>
            Gets the url of the document contained in the control.
            </summary>
            <remarks>
            If there is no path defined, the property returns <c>null</c>.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.HandleTAB">
            <summary>
            Elements which could be influenced by TAB key should get TAB sequences in design mode.
            </summary>
            <remarks>
            This applies to:
            <list type="bullet">
                <item>LI</item>
            </list>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Border3d">
            <summary>
            Show component borders in 3D style.
            </summary>
            <remarks>
            The default is true (3D style used). Changing this property requieres re-load.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.XPTheming">
            <summary>
            Controls the way the component renders themeable controls.
            </summary>
            <remarks>
            Buttons, Select boxes and other form elements can be rendered during
            design time using XP themes, if the application runs on XP. If the designer
            is used to design pages which run later on other operating systems,
            it is recommended to switch theming support of.
            <para>
            The default value is <c>true</c> (Theming is on).
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.BlockDefault">
            <summary>
            Sets how paragraphs will be inserted, DIV or P tags.
            </summary>
            <remarks>
            <seealso cref="T:GuruComponents.Netrix.BlockDefaultType"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.AllowInPlaceNavigation">
            <summary>
            Set the behavior of links in browse mode.
            </summary>
            <remarks>
            If this property is set to <c>true</c> an the user clicks a link in browse mode the new page
            will load internally and replace the current page. If set to <c>false</c> the link will start
            a new instance of Internet Explorer (or the systems default browser) and opens the link 
            externally. Any further navigation operations are no longer under the control of NetRix.
            <para>
            This option is not recognized in design mode.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.NoTextSelection">
            <summary>
            Disables the ability to select text if control is in browse mode.
            </summary>
            <remarks>
            This applies only if the content is loaded after setting the property.
            <para>
            Note: This features is available as of NetRix Pro 1.6. It's not available in Advanced or Standard.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ImeReconversion">
            <summary>
            Allows computer users to employ IME reconversion while browsing Web pages.
            </summary>
            <remarks>
            During initialization, the host can set this flag to enable Input Method Editor (IME) reconversion, allowing computer users to employ IME reconversion while browsing Web pages. An input method editor is a program that allows users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard.
            <para>
            Note: This features is available as of NetRix Pro 1.6.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.IsFullDocumentMode">
            <summary>
            Gets or sets a value to determine full document mode.
            </summary>
            <remarks>
            The full document mode forces the basic structure of the loaded HTML document to 
            this one:
            <code>
            &lt;html&gt;
            &lt;body&gt;
              &lt;!-- your HTML fragment goes here --&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            </code>
            To avoid this behavior just set this property to <c>false</c> and reload the document.
            <para>
            Changing this property during an editing session will not be recognized.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanCopy">
            <summary>
            Indicates if the current selection can be copied.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanCut">
            <summary>
            Indicates if the current selection can be cut.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanPaste">
            <summary>
            Indicates if the current selection can be pasted to.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanDelete">
            <summary>
            Indicates if the current selection can be deleted.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanRedo">
            <summary>
            Indicates if the editor can redo.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CanUndo">
            <summary>
            Indicates if the editor can undo.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Copy">
            <summary>
            Copy the current selection.
            </summary>
            <remarks>
            The command does nothing if the <see cref="P:GuruComponents.Netrix.HtmlEditor.CanCopy"/> property returns false.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Cut">
            <summary>
            Cut the current selection
            </summary>
            <remarks>
            The command does nothing if the <see cref="P:GuruComponents.Netrix.HtmlEditor.CanCut"/> property returns false.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Paste">
            <summary>
            Cut the current selection.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Delete">
            <summary>
            Delete the current selection.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.FlatScrollBars">
            <summary>
            Shows flat or normal themed scrollbars
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ThreadSafety">
            <summary>
            Turns on thread safe access to properties and methods.
            </summary>
            <remarks>
            By default the component isn't thread safe. However, the burdensome Invoke technique required to invoke
            cross thread calls is implemented internally and can be turned on or off using this property.
            The drawback is that permanent access in a threadsafe manner could result in the performance flaw. In
            case nobody needs cross thread access it's recommended to let this property set to <c>false</c>.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.HtmlEditor._htmlElementHashCode">
            <summary>
            Stores the last elements hashcode. This is used to avoid multiple element changed event during mouse move
            or keypress if the current element is not left.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.#ctor">
            <overloads>This method has two overloads.</overloads>
            <summary>
            This is the base constructor for the control.
            </summary>
            <remarks>
            Calling this constructor will instantiate the
            editor and set the default values for all properties. It is necessary to wait for the
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> event before any action on the control starts. Returning the
            object does not mean that the underlying component is ready to receive commands.
            <para>
            The recommended way to use the control is the VS.NET designer. If the code is written without
            a designer the following call is applicable:
            <code>
            using GuruComponents.Netrix;
            
            HtmlEditor htmlEditor1;
            
            htmlEditor1 = new HtmlEditor();
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.#ctor(System.Boolean)">
            <summary>
            This is the second constructor for the control.
            </summary>
            <remarks>
            Calling this constructor will instantiate the
            editor and set the default values for all properties. It is necessary to wait for the
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete"/> event before any action on the control starts. Returning the
            object does not mean that the underlying component is ready to receive commands.
            <para>
            The recommended way to use the control is the VS.NET designer. If the code is written without
            a designer the following call is applicable:
            <code>
            using GuruComponents.Netrix;
            
            HtmlEditor htmlEditor1;
            
            htmlEditor1 = new HtmlEditor(false);
            </code>
            </para>
            <para>
            If the control is put into part document mode the base skeleton of a HTML page is not build 
            around elements. This can be used to edit HTML fragments.
            </para>
            </remarks>
            <param name="fullDocumentMode"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.#ctor(System.Boolean,System.Boolean)">
            <summary>
            This is the second constructor for the control.
            </summary>
            <remarks>
            Calling this constructor will instantiate the
            editor and set the default values for all properties. It is necessary to wait for the
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete"/> event before any action on the control starts. Returning the
            object does not mean that the underlying component is ready to receive commands.
            <para>
            The recommended way to use the control is the VS.NET designer. If the code is written without
            a designer the following call is applicable:
            <code>
            using GuruComponents.Netrix;
            
            HtmlEditor htmlEditor1;
            
            htmlEditor1 = new HtmlEditor(false);
            </code>
            </para>
            <para>
            If the control is put into part document mode the base skeleton of a HTML page is not build 
            around elements. This can be used to edit HTML fragments.
            </para>
            </remarks>
            <param name="fullDocumentMode"></param>
            <param name="showTools">False suppresses the additional UI .</param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.IsTrial">
            <summary>
            Compiled as trial version.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnPanelCreated(System.EventArgs)">
            <summary>
            <para>
            We can only activate the MSHTML after our handle has been created,
            so upon creating the handle, we create and activate Interop.
            </para>
            <para>
            If LoadHtml was called prior to this, we do the loading now.
            </para>
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.HideCaret">
            <summary>
            The HideCaret function removes the caret from the screen. 
            </summary>
            <remarks>
            Hiding a caret does not destroy its current shape or invalidate the insertion point.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ShowCaret">
            <summary>
            The ShowCaret function makes the caret visible on the screen at the caret's current position.
            </summary>
            <remarks>
            When the caret becomes visible, it begins flashing automatically. 
            ShowCaret shows the caret only if the specified window owns the caret, the caret has a shape, and the caret has not been hidden two or more times in a row. If one or more of these conditions is not met, ShowCaret does nothing and returns <c>false</c>.
            <para>
            Hiding is cumulative. If your application calls HideCaret five times in a row, it must also call ShowCaret five times before the caret reappears.
            </para>            
            <para>
            The system provides one caret per queue. A window should create a caret only when it has the keyboard focus or is active. The window should destroy the caret before losing the keyboard focus or becoming inactive.
            In NetRix this is the default behavior and there is no need to manipulate the caret directly but a different behavior is required.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ReflectInnerType(System.String)">
            <summary>
            This methods returns one of the inner types not available in the Core assembly.
            </summary>
            <remarks>
            This method is used by plug-ins to get access to internal types. The method works lazy and
            returns <c>null</c> (<c>Nothing</c> in VB) in case of error.
            </remarks>
            <param name="typeName">The full qualified name.</param>
            <returns>The Type, if the name was found and is declared in 'Guru.Netrix.Professional.Editor.v4.dll'.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Zoom(System.Decimal)">
            <summary>
            Set the editor window zoom level temporarily to given value.
            </summary>
            <remarks>
            This setting does not persist. Reloading document removes zoom level and sets document to 100%.
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.IDocument.Zoom"/>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.GetZoom"/>
            <param name="ratio">Value for zoom, 1 equals 100%. Set 0.5 for 50% or 2.0 for 200%.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetZoom">
            <summary>
            Returns the current temporary Zoom level.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.IDocument.Zoom"/>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.Zoom(System.Decimal)"/>
            <returns>Zoom value, return 1 for 100%, 0.5 for 50% or 2.0 for 200%.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SetEditDesigner">
            <internalonly/>
            <summary>
            Set the standard designer which is responsible for all base events.
            </summary>
            <remarks>
            Called in readystate "complete" state and before external event handling.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.AddEditDesigner(System.Object)">
            <summary>
            Add a external designer to the designer chain. 
            </summary>
            <remarks>
            This is done by the various PlugIns the control accepts. The designers attached are loaded during
            readystate complete phase. This means, this method takes effect only for new documents.
            <para>
            Scenario: Create Designer > Add Designer > Load Content > Wait for ReadyStateComplete > Designer receives events
            </para>
            </remarks>
            <param name="designer"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetActiveDocument(System.Boolean)">
            <summary>
            Access to native object of either the current main document or the current active frame document.
            </summary>
            <remarks>
            The purpose of this method is access to underyling COM document for extensibility and
            customization. Applications which host the control and deal with the content ususally do not
            access the underyling COM wrapper due to some impications required by COM/Interop. 
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SetActiveFrameDocument(GuruComponents.Netrix.ComInterop.Interop.IHTMLDocument2)">
            <summary>
            This method sets the current active frame document, so any task starts later 
            uses this document instead of the base doc.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetParentElement(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,System.String)">
            <summary>
            Searches the element tree upwards to detect the next element the current element is in.
            </summary>
            <remarks>
            Search stops and fails if body is reached ==> element is not in document tree.
            Search returns the first occurence of element, therefore the innermost element of a nested
            structure is recognized.
            </remarks>
            <param name="element">Interop.IHTMLElement element or null if not found.</param>
            <param name="tagName">The tag name which the methods searches for.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetParentFromHierarchy(GuruComponents.Netrix.WebEditing.Elements.IElement,System.String)">
            <summary>
            Searches the element tree upwards to detect the next element the current element is in.
            </summary>
            <remarks>
            Search stops and fails if body is reached ==> element is not in document tree.
            Search returns the first occurence of element, therefore the innermost element of a nested
            structure is recognized.
            </remarks>
            <param name="element">IElement element or null if not found.</param>
            <param name="tagName">The tag name which the methods searches for.</param>
            <returns>Returns the element, if found.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CommandTarget">
            <summary>
            Gets the command target to send IDM commands to the component.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SetMousePointer(System.Boolean)">
            <summary>
            Set or hide the current mouse pointer. 
            </summary>
            <remarks>
            Hiding does not remove the pointer but display the last standard pointer instead of the current.
            </remarks>
            <param name="Hide">If true reset to the standard pointer</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Exec(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Executes the specified command in MSHTML directly.
            </summary>
            <param name="command">The command. Not all commands are supported in all situations.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Exec(GuruComponents.Netrix.ComInterop.Interop.IDM,System.Object)">
            <summary>
            Executes the specified command in MSHTML with the specified arguments.
            </summary>
            <param name="command">The command. Not all commands are supported in all situations.</param>
            <param name="argument">The argument. Supported types are string, bool, int and short.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ExecResult(GuruComponents.Netrix.ComInterop.Interop.IDM,GuruComponents.Netrix.ComInterop.Interop.OLEVARIANT@)">
            <summary>
            Executes the specified command in MSHTML and returns the result as 
            <see cref="T:GuruComponents.Netrix.ComInterop.Interop.OLEVARIANT">OLEVARIANT</see>. The caller
            is responsible for correct preparing and marshaling of the structure.
            </summary>
            <param name="command">The command send to MSHTML</param>
            <param name="retVal">Return value as <see cref="T:GuruComponents.Netrix.ComInterop.Interop.OLEVARIANT">OLEVARIANT</see></param>
            <returns>object result - The result of the command</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ExecResultBoolean(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Send a command to MSHTML and excepts to get an bool value back.
            If the command does not work or does not return the expected type an exception is thrown.
            </summary>
            <param name="command">The command</param>
            <returns>bool value or false</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ExecResultString(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Send a command to MSHTML and excepts to get an string value back
            If the command does not work or does not return the expected type an exception is thrown.
            </summary>
            <param name="command">The command</param>
            <returns>string value or String.Empty</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ExecResultObject(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Send a command to MSHTML and excepts to get an string value back
            If the command does not work or does not return the expected type an exception is thrown.
            </summary>
            <param name="command">The command</param>
            <returns>object value or String.Object</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ExecResultInt(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Send a command to MSHTML and excepts to get an integer value back
            If the command does not work or does not return the expected type an exception is thrown.
            </summary>
            <param name="command">The command</param>
            <returns>integer value or 0</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetCommandInfo(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Queries MSHTML for the command info (enabled and checked) for the specified command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.IsCommandChecked(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Indicates if the specified command is checked
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.IsCommandEnabled(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Indicates if the specified command is enabled
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.IsCommandEnabledAndChecked(GuruComponents.Netrix.ComInterop.Interop.IDM)">
            <summary>
            Indicates if the specified command is enabled
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.CommandStatus(GuruComponents.Netrix.HtmlCommand)">
            <summary>
            Gets the current status of any (theoretical) available command.
            </summary>
            <remarks>
            This is a very fast method to check the current state of the control and
            the currently available commands, used to update toolbars and menus. 
            </remarks>
            <param name="command">Any command from the <see cref="T:GuruComponents.Netrix.HtmlCommand">HtmlCommand</see> enumeration.</param>
            <returns>A value that indicates the command is available or not or currently toggled on.</returns>
        </member>
        <member name="F:GuruComponents.Netrix.HtmlEditor._iscreated">
            <summary>
            Indicates if the Interop.HTMLDocument2 is created.
            </summary>
            
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SetCaretToElement(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,GuruComponents.Netrix.ComInterop.Interop.ELEMENT_ADJACENCY)">
            <summary>
            Set the caret to an element.
            </summary>
            <param name="el">The element where the caret is set to.</param>
            <param name="adjacency">The position within the elements container.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ThrowDocumentNotReadyException">
            <summary>
            Checks ready state and throw an exception but in design mode.
            </summary>
            <returns>False if not ready</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InsertElementAtCaret(GuruComponents.Netrix.ComInterop.Interop.ELEMENT_TAG_ID,System.String)">
            <summary>
            Inserts an given element at the current caret position.
            </summary>
            <remarks>
            The caller must assure that only a single element is being inserted, not a structure.
            So, an insertion like <table></table> is allowed, whereas <table><tbody></tbody></table> is not.
            </remarks>
            <param name="tagId"></param>
            <param name="name"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InsertElementAtCaret(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement,System.String)">
            <summary>
            Inserts an given element at the current caret position.
            </summary>
            <remarks>
            The caller must assure that only a single element is being inserted, not a structure.
            So, an insertion like <table></table> is allowed, whereas <table><tbody></tbody></table> is not.
            </remarks>
            <param name="el"></param>
            <param name="name"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InsertTextAtCaret(System.String)">
            <summary>
            Insert Text at Caret position.
            </summary>
            <remarks>
            This method will always insert any characters als Text, tag definitions appear
            as converted text, e.g. &lt;span&gt; is inserted as &amp;lt;span&amp;gt;.
            </remarks>
            <param name="text">Text that has to be inserted.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.CreateElementAtCaret(System.String)">
            <summary>
            Inserts a generic created element at the current caret position.
            </summary>
            <remarks>
            This method internally calls <see cref="M:GuruComponents.Netrix.HtmlEditor.CreateElement(System.String)"/> to add the element to the documents DOM.
            After that, the element is inserted. The method may fail if the element cannot be inserted at caret position.
            The control will not accept invalid HTML. In case of error an internal exception is thrown and catched. The
            method will return <c>null</c> (<c>Nothing</c> in VB.NET) if no success.
            </remarks>
            <param name="tagName">The name of tag to be inserted. Use "span" to insert &lt;span&gt;, for instance.</param>
            <returns>Returns <c>True</c> on success, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InsertElementAtCaret(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Insert the element at the current caret position.
            </summary>
            <remarks>
            This method inserts an element based on a "template" element. It returns the real element instead.
            </remarks>
            <param name="element">The element which has to be inserted, will be replaced by a clone of the element which points to the inserted one.</param>
            <returns>Returns <c>True</c> on success or <c>False</c> if the insertion fails.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.CurrentScopeElement">
            <summary>
            Get the element near the last caret position. Does not recognize elements which have handles.
            </summary>
            <returns>The element</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.CreateElement(System.String)">
            <summary>
            Creates an instance of the element for the specified tag.
            </summary>
            <remarks>
            This method does not add the element to the DOM, it makes it available for adding later.
            <para>
            You can create all elements programmatically, except for &lt;frame&gt; and &lt;iframe&gt;. 
            In addition, the properties of these created elements are read/write and can be accessed 
            programmatically. Before you use new objects, you must explicitly add them to their respective 
            collections or to the document's DOM. To insert new elements into the current document, 
            use the <see cref="M:GuruComponents.Netrix.WebEditing.Elements.IElementDom.InsertBefore(GuruComponents.Netrix.WebEditing.Elements.IElement,GuruComponents.Netrix.WebEditing.Elements.IElement)">InsertBefore</see> or 
            <see cref="M:GuruComponents.Netrix.WebEditing.Elements.IElementDom.AppendChild(GuruComponents.Netrix.WebEditing.Elements.IElement)">AppendChild</see> methods. 
            </para>
            <para>You must perform a second step when using <c>CreateElement</c> to create the &lt;input&gt; element. 
            The method generates an <see cref="T:GuruComponents.Netrix.WebEditing.Elements.InputTextElement">InputTextElement</see>, because that is the default input type property. 
            To insert any other kind of input element, first invoke CreateElement for input, then set the 
            type property to the appropriate value in the next line of code. 
            <code>
            inputElement.SetAttribute("type", "radio");
            </code>
            Attributes can be included with the <c>tagName</c> parameter as long as the entire string is valid HTML. 
            You should do this if you wish to include the NAME attribute at run time on objects created with the 
            createElement method. Attributes should be included with the sTag when form elements are created that 
            are to be reset using the reset method or a BUTTON with a TYPE attribute value of reset.
            </para>
            </remarks>
            <example>
            The following example creates an <see cref="T:GuruComponents.Netrix.WebEditing.Elements.InputRadioElement">InputRadioElement</see> directly:
            <code>
            InputRadioElement radio = (InputRadioElement) editor.CreateElement(String.Format("&lt;input type={0}&gt;", "radio"));
            </code>
            After creating the element you're supposed to add it to the document:
            <code>
            masterElement.ElementDom.AppendChild(radio);
            </code>
            This example assumes that you have an element object <c>masterElement</c> which is a container and can 
            hold any sort of form elements.
            </example>
            <seealso cref="T:GuruComponents.Netrix.HtmlDocument">HtmlDocument</seealso>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.Document">Document</seealso>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnElementCreated(System.Web.UI.Control)">
            <summary>
            Called when a new element has been created successfully.
            </summary>
            <remarks></remarks>
            <param name="element">The element which has been created.</param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.GenericElementFactory">
            <summary>
            This property returns an instance of IElementFactory.
            </summary>
            <remarks>
            Its purpose is to provide access to the element factory for plug-ins and extension modules.
            Extension authors can use the factory to add elements to the elements cache. It's not 
            recommended to use this property directly from user code, in fact, it supports the NetRix
            infrastructure only.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetCurrentScopeElement">
            <summary>
            Get the current element which is in the scope for next editing operation. 
            </summary>
            <remarks>
            Caller can cast the object to the right IElement derived type.
            <para>
            If it's more important to get the current element, which has fired the last event or
            is set by <see cref="E:GuruComponents.Netrix.HtmlEditor.HtmlElementChanged"/> event, it's better to use the <see cref="M:GuruComponents.Netrix.HtmlEditor.GetCurrentElement"/>
            method. Under normal circumstances both method return the same element, but during key or mouse
            operations in nested element hierarchies there might be a difference between currency and scope.
            </para>
            </remarks>
            <returns>The element object</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetCurrentElement">
            <summary>
            Gets the current element.
            </summary>
            <remarks>
            This method returns the current element, as it is set by <see cref="E:GuruComponents.Netrix.HtmlEditor.HtmlElementChanged"/> event.
            If the element wasn't recognized for some reason the method returns the Body Element
            </remarks>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.GetCurrentScopeElement"/>
            <returns>The current element object.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnSaved">
            <summary>
            Fires the AfterSave event.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnLoading">
            <summary>
            Overridden to remove the grid behavior before loading.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnLoaded">
            <summary>
            This method fires the AfterLoad event.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnSaving">
            <summary>
            This method fires the BeforeSave event.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OverWrite(System.Boolean)">
            <summary>
            Sets overwrite or insert mode.
            </summary>
            <remarks>
            This methods sets the behavior of the insertion point. The user can independently use
            the INS key to switch the behavior, but the host application can synchronize the
            UI with the behavior by forcing the state using this method.
            </remarks>
            <param name="Mode">The mode which sets the override behavior. <c>True</c> turns it on.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetConnectionState">
             <summary>
             Provides information about the current state of the internet connection.
             </summary>
             <remarks>
             Does not check if the connection is established but if it is possible to do so.
             </remarks>
             <example>
             The following code shows how to use the method and how to convert the enum values into readable strings:
             <code>
            private string GetConnectionStateString()
            {
                GuruComponents.Netrix.InternetConnectState t = this.htmlEditor2.GetConnectionState();
                string s = String.Concat("[", (int)t, "] ");
                if ((t &amp; GuruComponents.Netrix.InternetConnectState.ConnectionLAN) == 0 == false)
                {
                    s += "LAN";
                }
                if ((t &amp; GuruComponents.Netrix.InternetConnectState.ConnectionModem) == 0 == false)
                {
                    s += "Modem";
                    if ((t &amp; GuruComponents.Netrix.InternetConnectState.Configured) == 0 == false)
                    {
                        s += "/Configured";
                    } 
                    else 
                    {
                        s += "/Not Configured";
                    }
                }
                if ((t &amp; GuruComponents.Netrix.InternetConnectState.ConnectionProxy) == 0 == false)
                {
                    s += "Proxy";
                }
                if ((t &amp; GuruComponents.Netrix.InternetConnectState.Offline) == 0 == false)
                {
                    s += "/Offline";
                } 
                else 
                {
                    s += "/Online";
                }
                return s;
            }</code>
             </example>
             <returns>One or more values of the bitflag 
             enumeration <see cref="T:GuruComponents.Netrix.InternetConnectState">GuruComponents.Netrix.InternetConnectState</see>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.PrintPageSetup">
            <summary>
            Shows the internal Page Setup Dialog.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.PrintWithPreview">
            <summary>
            Shows the print preview and let the user optionally print.
            </summary>
            <remarks>
            To use the print feature the control must be able to reload the current content internally. 
            Therefore the host application must provide a path or URL to the LoadXXX methods before 
            a printing process can start. Without a valid path the print command is ignored and the
            preview will display a blank page.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.PrintWithPreview(System.String)">
            <summary>
            Prints a document using a customized preview from the given 
            print template.
            </summary>
            <remarks>
            To use the print feature the control must be able to reload the current content internally. 
            Therefore the host application must provide a path or URL to the LoadXXX methods before 
            a printing process can start. Without a valid path the print command is ignored and the
            preview will display a blank page.
            </remarks>
            <param name="PathToPrintTemplate">The path to the HTML code creating the print template.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.PrintImmediately">
            <summary>
            Print the current document to the current printer without any user interaction.
            </summary>
            <remarks>
            To use the print feature the control must be able to reload the current content internally. 
            Therefore the host application must provide a path or URL to the LoadXXX methods before 
            a printing process can start. Without a valid path the print command is ignored and the
            method will print a blank page.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SendIDMCommand(System.Int32)">
            <summary>
            This method sends an IDM command directly to MSHTML.
            </summary>
            <remarks>
            The call is protected by a try/catch block. The 
            method does not throw an exception on error and does always return nothing. This method is just for
            experimental environments and should not used in production environments.
            <para>
            This is method is subject to be changed or removed in later versions without further notice.
            </para>
            <list type="table">
            <listheader>
                <term>IDM constant</term><term>Numeric Value</term>
            </listheader>
            <item><description>Interop.IDM.UNKNOWN                 </description><description>0</description></item>
            <item><description>Interop.IDM.ALIGNBOTTOM             </description><description>1</description></item>
            <item><description>Interop.IDM.ALIGNHORIZONTALCENTERS  </description><description>2</description></item>
            <item><description>Interop.IDM.ALIGNLEFT               </description><description>3</description></item>
            <item><description>Interop.IDM.ALIGNRIGHT              </description><description>4</description></item>
            <item><description>Interop.IDM.ALIGNTOGRID             </description><description>5</description></item>
            <item><description>Interop.IDM.ALIGNTOP                </description><description>6</description></item>
            <item><description>Interop.IDM.ALIGNVERTICALCENTERS    </description><description>7</description></item>
            <item><description>Interop.IDM.ARRANGEBOTTOM           </description><description>8</description></item>
            <item><description>Interop.IDM.ARRANGERIGHT            </description><description>9</description></item>
            <item><description>Interop.IDM.BRINGFORWARD            </description><description>10</description></item>
            <item><description>Interop.IDM.BRINGTOFRONT            </description><description>11</description></item>
            <item><description>Interop.IDM.CENTERHORIZONTALLY      </description><description>12</description></item>
            <item><description>Interop.IDM.CENTERVERTICALLY        </description><description>13</description></item>
            <item><description>Interop.IDM.CODE                    </description><description>14</description></item>
            <item><description>Interop.IDM.DELETE                  </description><description>17</description></item>
            <item><description>Interop.IDM.FONTNAME                </description><description>18</description></item>
            <item><description>Interop.IDM.FONTSIZE                </description><description>19</description></item>
            <item><description>Interop.IDM.GROUP                   </description><description>20</description></item>
            <item><description>Interop.IDM.HORIZSPACECONCATENATE   </description><description>21</description></item>
            <item><description>Interop.IDM.HORIZSPACEDECREASE      </description><description>22</description></item>
            <item><description>Interop.IDM.HORIZSPACEINCREASE      </description><description>23</description></item>
            <item><description>Interop.IDM.HORIZSPACEMAKEEQUAL     </description><description>24</description></item>
            <item><description>Interop.IDM.INSERTOBJECT            </description><description>25</description></item>
            <item><description>Interop.IDM.MULTILEVELREDO          </description><description>30</description></item>
            <item><description>Interop.IDM.SENDBACKWARD            </description><description>32</description></item>
            <item><description>Interop.IDM.SENDTOBACK              </description><description>33</description></item>
            <item><description>Interop.IDM.SHOWTABLE               </description><description>34</description></item>
            <item><description>Interop.IDM.SIZETOCONTROL           </description><description>35</description></item>
            <item><description>Interop.IDM.SIZETOCONTROLHEIGHT     </description><description>36</description></item>
            <item><description>Interop.IDM.SIZETOCONTROLWIDTH      </description><description>37</description></item>
            <item><description>Interop.IDM.SIZETOFIT               </description><description>38</description></item>
            <item><description>Interop.IDM.SIZETOGRID              </description><description>39</description></item>
            <item><description>Interop.IDM.SNAPTOGRID              </description><description>40</description></item>
            <item><description>Interop.IDM.TABORDER                </description><description>41</description></item>
            <item><description>Interop.IDM.TOOLBOX                 </description><description>42</description></item>
            <item><description>Interop.IDM.MULTILEVELUNDO          </description><description>44</description></item>
            <item><description>Interop.IDM.UNGROUP                 </description><description>45</description></item>
            <item><description>Interop.IDM.VERTSPACECONCATENATE    </description><description>46</description></item>
            <item><description>Interop.IDM.VERTSPACEDECREASE       </description><description>47</description></item>
            <item><description>Interop.IDM.VERTSPACEINCREASE       </description><description>48</description></item>
            <item><description>Interop.IDM.VERTSPACEMAKEEQUAL      </description><description>49</description></item>
            <item><description>Interop.IDM.JUSTIFYFULL             </description><description>50</description></item>
            <item><description>Interop.IDM.BACKCOLOR               </description><description>51</description></item>
            <item><description>Interop.IDM.BOLD                    </description><description>52</description></item>
            <item><description>Interop.IDM.BORDERCOLOR             </description><description>53</description></item>
            <item><description>Interop.IDM.FLAT                    </description><description>54</description></item>
            <item><description>Interop.IDM.FORECOLOR               </description><description>55</description></item>
            <item><description>Interop.IDM.ITALIC                  </description><description>56</description></item>
            <item><description>Interop.IDM.JUSTIFYCENTER           </description><description>57</description></item>
            <item><description>Interop.IDM.JUSTIFYGENERAL          </description><description>58</description></item>
            <item><description>Interop.IDM.JUSTIFYLEFT             </description><description>59</description></item>
            <item><description>Interop.IDM.JUSTIFYRIGHT            </description><description>60</description></item>
            <item><description>Interop.IDM.RAISED                  </description><description>61</description></item>
            <item><description>Interop.IDM.SUNKEN                  </description><description>62</description></item>
            <item><description>Interop.IDM.UNDERLINE               </description><description>63</description></item>
            <item><description>Interop.IDM.CHISELED                </description><description>64</description></item>
            <item><description>Interop.IDM.ETCHED                  </description><description>65</description></item>
            <item><description>Interop.IDM.SHADOWED                </description><description>66</description></item>
            <item><description>Interop.IDM.FIND                    </description><description>67</description></item>
            <item><description>Interop.IDM.SHOWGRID                </description><description>69</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST0         </description><description>72</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST1         </description><description>73</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST2         </description><description>74</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST3         </description><description>75</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST4         </description><description>76</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST5         </description><description>77</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST6         </description><description>78</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST7         </description><description>79</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST8         </description><description>80</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST9         </description><description>81</description></item>
            <item><description>Interop.IDM.CONVERTOBJECT       </description><description>    82</description></item>
            <item><description>Interop.IDM.CUSTOMCONTROL       </description><description>    83</description></item>
            <item><description>Interop.IDM.CUSTOMIZEITEM       </description><description>    84</description></item>
            <item><description>Interop.IDM.RENAME              </description><description>    85</description></item>
            <item><description>Interop.IDM.IMPORT              </description><description>    86</description></item>
            <item><description>Interop.IDM.NEWPAGE             </description><description>    87</description></item>
            <item><description>Interop.IDM.MOVE                </description><description>    88</description></item>
            <item><description>Interop.IDM.CANCEL              </description><description>    89</description></item>
            <item><description>Interop.IDM.FONT                </description><description>    90</description></item>
            <item><description>Interop.IDM.STRIKETHROUGH       </description><description>    91</description></item>
            <item><description>Interop.IDM.DELETEWORD          </description><description>    92</description></item>
            <item><description>Interop.IDM.EXECPRINT           </description><description>    93</description></item>
            <item><description>Interop.IDM.JUSTIFYNONE         </description><description>    94</description></item>
            <item><description>Interop.IDM.TRISTATEBOLD        </description><description>    95</description></item>
            <item><description>Interop.IDM.TRISTATEITALIC      </description><description>    96</description></item>
            <item><description>Interop.IDM.TRISTATEUNDERLINE   </description><description>    97</description></item>
            <item><description>Interop.IDM.FOLLOW_ANCHOR        </description><description>   2008</description></item>
            <item><description>Interop.IDM.INSINPUTIMAGE         </description><description>  2114</description></item>
            <item><description>Interop.IDM.INSINPUTBUTTON        </description><description>  2115</description></item>
            <item><description>Interop.IDM.INSINPUTRESET         </description><description>  2116</description></item>
            <item><description>Interop.IDM.INSINPUTSUBMIT        </description><description>  2117</description></item>
            <item><description>Interop.IDM.INSINPUTUPLOAD        </description><description>  2118</description></item>
            <item><description>Interop.IDM.INSFIELDSET           </description><description>  2119</description></item>
            <item><description>Interop.IDM.PASTEINSERT          </description><description>   2120</description></item>
            <item><description>Interop.IDM.REPLACE              </description><description>   2121</description></item>
            <item><description>Interop.IDM.EDITSOURCE           </description><description>   2122</description></item>
            <item><description>Interop.IDM.BOOKMARK             </description><description>   2123</description></item>
            <item><description>Interop.IDM.HYPERLINK            </description><description>   2124</description></item>
            <item><description>Interop.IDM.UNLINK               </description><description>   2125</description></item>
            <item><description>Interop.IDM.BROWSEMODE           </description><description>   2126</description></item>
            <item><description>Interop.IDM.EDITMODE             </description><description>   2127</description></item>
            <item><description>Interop.IDM.UNBOOKMARK           </description><description>   2128</description></item>
            <item><description>Interop.IDM.TOOLBARS             </description><description>   2130</description></item>
            <item><description>Interop.IDM.STATUSBAR            </description><description>   2131</description></item>
            <item><description>Interop.IDM.FORMATMARK           </description><description>   2132</description></item>
            <item><description>Interop.IDM.TEXTONLY             </description><description>   2133</description></item>
            <item><description>Interop.IDM.OPTIONS              </description><description>   2135</description></item>
            <item><description>Interop.IDM.FOLLOWLINKC          </description><description>   2136</description></item>
            <item><description>Interop.IDM.FOLLOWLINKN          </description><description>   2137</description></item>
            <item><description>Interop.IDM.VIEWSOURCE           </description><description>   2139</description></item>
            <item><description>Interop.IDM.ZOOMPOPUP            </description><description>   2140</description></item>
            <item><description>Interop.IDM.BASELINEFONT1       </description><description>    2141</description></item>
            <item><description>Interop.IDM.BASELINEFONT2       </description><description>    2142</description></item>
            <item><description>Interop.IDM.BASELINEFONT3       </description><description>    2143</description></item>
            <item><description>Interop.IDM.BASELINEFONT4       </description><description>    2144</description></item>
            <item><description>Interop.IDM.BASELINEFONT5       </description><description>    2145</description></item>
            <item><description>Interop.IDM.HORIZONTALLINE      </description><description>    2150</description></item>
            <item><description>Interop.IDM.LINEBREAKNORMAL     </description><description>    2151</description></item>
            <item><description>Interop.IDM.LINEBREAKLEFT       </description><description>    2152</description></item>
            <item><description>Interop.IDM.LINEBREAKRIGHT      </description><description>    2153</description></item>
            <item><description>Interop.IDM.LINEBREAKBOTH       </description><description>    2154</description></item>
            <item><description>Interop.IDM.NONBREAK            </description><description>    2155</description></item>
            <item><description>Interop.IDM.SPECIALCHAR         </description><description>    2156</description></item>
            <item><description>Interop.IDM.HTMLSOURCE          </description><description>    2157</description></item>
            <item><description>Interop.IDM.IFRAME              </description><description>    2158</description></item>
            <item><description>Interop.IDM.HTMLCONTAIN         </description><description>    2159</description></item>
            <item><description>Interop.IDM.TEXTBOX             </description><description>    2161</description></item>
            <item><description>Interop.IDM.TEXTAREA            </description><description>    2162</description></item>
            <item><description>Interop.IDM.CHECKBOX            </description><description>    2163</description></item>
            <item><description>Interop.IDM.RADIOBUTTON         </description><description>    2164</description></item>
            <item><description>Interop.IDM.DROPDOWNBOX         </description><description>    2165</description></item>
            <item><description>Interop.IDM.LISTBOX             </description><description>    2166</description></item>
            <item><description>Interop.IDM.BUTTON              </description><description>    2167</description></item>
            <item><description>Interop.IDM.IMAGE               </description><description>    2168</description></item>
            <item><description>Interop.IDM.OBJECT              </description><description>    2169</description></item>
            <item><description>Interop.IDM.1D                  </description><description>    2170</description></item>
            <item><description>Interop.IDM.IMAGEMAP            </description><description>    2171</description></item>
            <item><description>Interop.IDM.FILE                </description><description>    2172</description></item>
            <item><description>Interop.IDM.COMMENT             </description><description>    2173</description></item>
            <item><description>Interop.IDM.SCRIPT              </description><description>    2174</description></item>
            <item><description>Interop.IDM.JAVAAPPLET          </description><description>    2175</description></item>
            <item><description>Interop.IDM.PLUGIN              </description><description>    2176</description></item>
            <item><description>Interop.IDM.PAGEBREAK           </description><description>    2177</description></item>
            <item><description>Interop.IDM.HTMLAREA            </description><description>    2178</description></item>
            <item><description>Interop.IDM.PARAGRAPH           </description><description>    2180</description></item>
            <item><description>Interop.IDM.FORM                </description><description>    2181</description></item>
            <item><description>Interop.IDM.MARQUEE             </description><description>    2182</description></item>
            <item><description>Interop.IDM.LIST                </description><description>    2183</description></item>
            <item><description>Interop.IDM.ORDERLIST           </description><description>    2184</description></item>
            <item><description>Interop.IDM.UNORDERLIST         </description><description>    2185</description></item>
            <item><description>Interop.IDM.INDENT              </description><description>    2186</description></item>
            <item><description>Interop.IDM.OUTDENT             </description><description>    2187</description></item>
            <item><description>Interop.IDM.PREFORMATTED        </description><description>    2188</description></item>
            <item><description>Interop.IDM.ADDRESS             </description><description>    2189</description></item>
            <item><description>Interop.IDM.BLINK               </description><description>    2190</description></item>
            <item><description>Interop.IDM.DIV                 </description><description>    2191</description></item>
            <item><description>Interop.IDM.TABLEINSERT         </description><description>    2200</description></item>
            <item><description>Interop.IDM.RCINSERT            </description><description>    2201</description></item>
            <item><description>Interop.IDM.CELLINSERT          </description><description>    2202</description></item>
            <item><description>Interop.IDM.CAPTIONINSERT       </description><description>    2203</description></item>
            <item><description>Interop.IDM.CELLMERGE           </description><description>    2204</description></item>
            <item><description>Interop.IDM.CELLSPLIT           </description><description>    2205</description></item>
            <item><description>Interop.IDM.CELLSELECT          </description><description>    2206</description></item>
            <item><description>Interop.IDM.ROWSELECT           </description><description>    2207</description></item>
            <item><description>Interop.IDM.COLUMNSELECT        </description><description>    2208</description></item>
            <item><description>Interop.IDM.TABLESELECT         </description><description>    2209</description></item>
            <item><description>Interop.IDM.TABLEPROPERTIES     </description><description>    2210</description></item>
            <item><description>Interop.IDM.CELLPROPERTIES      </description><description>    2211</description></item>
            <item><description>Interop.IDM.ROWINSERT           </description><description>    2212</description></item>
            <item><description>Interop.IDM.COLUMNINSERT        </description><description>    2213</description></item>
            <item><description>Interop.IDM.HELP_CONTENT         </description><description>   2220</description></item>
            <item><description>Interop.IDM.HELP_ABOUT           </description><description>   2221</description></item>
            <item><description>Interop.IDM.HELP_README          </description><description>   2222</description></item>
            <item><description>Interop.IDM.REMOVEFORMAT          </description><description>  2230</description></item>
            <item><description>Interop.IDM.PAGEINFO             </description><description>   2231</description></item>
            <item><description>Interop.IDM.TELETYPE             </description><description>   2232</description></item>
            <item><description>Interop.IDM.GETBLOCKFMTS          </description><description>  2233</description></item>
            <item><description>Interop.IDM.BLOCKFMT              </description><description>  2234</description></item>
            <item><description>Interop.IDM.SHOWHIDE_CODE         </description><description>  2235</description></item>
            <item><description>Interop.IDM.TABLE                 </description><description>  2236</description></item>
            <item><description>Interop.IDM.COPYFORMAT             </description><description> 2237</description></item>
            <item><description>Interop.IDM.PASTEFORMAT         </description><description>    2238</description></item>
            <item><description>Interop.IDM.GOTO                 </description><description>   2239</description></item>
            <item><description>Interop.IDM.CHANGEFONT            </description><description>  2240</description></item>
            <item><description>Interop.IDM.CHANGEFONTSIZE        </description><description>  2241</description></item>
            <item><description>Interop.IDM.CHANGECASE            </description><description>  2246</description></item>
            <item><description>Interop.IDM.SHOWSPECIALCHAR       </description><description>  2249</description></item>
            <item><description>Interop.IDM.SUBSCRIPT             </description><description>  2247</description></item>
            <item><description>Interop.IDM.SUPERSCRIPT           </description><description>  2248</description></item>
            <item><description>Interop.IDM.CENTERALIGNPARA       </description><description>  2250</description></item>
            <item><description>Interop.IDM.LEFTALIGNPARA         </description><description>  2251</description></item>
            <item><description>Interop.IDM.RIGHTALIGNPARA        </description><description>  2252</description></item>
            <item><description>Interop.IDM.REMOVEPARAFORMAT      </description><description>  2253</description></item>
            <item><description>Interop.IDM.APPLYNORMAL           </description><description>  2254</description></item>
            <item><description>Interop.IDM.APPLYHEADING1         </description><description>  2255</description></item>
            <item><description>Interop.IDM.APPLYHEADING2         </description><description>  2256</description></item>
            <item><description>Interop.IDM.APPLYHEADING3         </description><description>  2257</description></item>
            <item><description>Interop.IDM.DOCPROPERTIES         </description><description>  2260</description></item>
            <item><description>Interop.IDM.ADDFAVORITES          </description><description>  2261</description></item>
            <item><description>Interop.IDM.COPYSHORTCUT          </description><description>  2262</description></item>
            <item><description>Interop.IDM.SAVEBACKGROUND        </description><description>  2263</description></item>
            <item><description>Interop.IDM.SETWALLPAPER          </description><description>  2264</description></item>
            <item><description>Interop.IDM.COPYBACKGROUND        </description><description>  2265</description></item>
            <item><description>Interop.IDM.CREATESHORTCUT        </description><description>  2266</description></item>
            <item><description>Interop.IDM.PAGE                  </description><description>  2267</description></item>
            <item><description>Interop.IDM.SAVETARGET            </description><description>  2268</description></item>
            <item><description>Interop.IDM.SHOWPICTURE           </description><description>  2269</description></item>
            <item><description>Interop.IDM.SAVEPICTURE           </description><description>  2270</description></item>
            <item><description>Interop.IDM.DYNSRCPLAY            </description><description>  2271</description></item>
            <item><description>Interop.IDM.DYNSRCSTOP            </description><description>  2272</description></item>
            <item><description>Interop.IDM.PRINTTARGET           </description><description>  2273</description></item>
            <item><description>Interop.IDM.IMGARTPLAY            </description><description>  2274</description></item>
            <item><description>Interop.IDM.IMGARTSTOP            </description><description>  2275</description></item>
            <item><description>Interop.IDM.IMGARTREWIND          </description><description>  2276</description></item>
            <item><description>Interop.IDM.PRINTQUERYJOBSPENDING </description><description>  2277</description></item>
            <item><description>Interop.IDM.SETDESKTOPITEM        </description><description>  2278</description></item>
            <item><description>Interop.IDM.CONTEXTMENU           </description><description>  2280</description></item>
            <item><description>Interop.IDM.GOBACKWARD            </description><description>  2282</description></item>
            <item><description>Interop.IDM.GOFORWARD             </description><description>  2283</description></item>
            <item><description>Interop.IDM.PRESTOP               </description><description>  2284</description></item>
            <item><description>Interop.IDM.MP_MYPICS             </description><description>  2287</description></item>
            <item><description>Interop.IDM.MP_EMAILPICTURE       </description><description>  2288</description></item>
            <item><description>Interop.IDM.MP_PRINTPICTURE       </description><description>  2289</description></item>
            <item><description>Interop.IDM.CREATELINK           </description><description>   2290</description></item>
            <item><description>Interop.IDM.COPYCONTENT          </description><description>   2291</description></item>
            <item><description>Interop.IDM.LANGUAGE             </description><description>   2292</description></item>
            <item><description>Interop.IDM.GETPRINTTEMPLATE    </description><description>    2295</description></item>
            <item><description>Interop.IDM.SETPRINTTEMPLATE    </description><description>    2296</description></item>
            <item><description>Interop.IDM.TEMPLATE_PAGESETUP  </description><description>    2298</description></item>
            <item><description>Interop.IDM.REFRESH              </description><description>   2300</description></item>
            <item><description>Interop.IDM.STOPDOWNLOAD         </description><description>   2301</description></item>
            <item><description>Interop.IDM.ENABLE_INTERACTION    </description><description>  2302</description></item>
            <item><description>Interop.IDM.LAUNCHDEBUGGER         </description><description> 2310</description></item>
            <item><description>Interop.IDM.BREAKATNEXT            </description><description> 2311</description></item>
            <item><description>Interop.IDM.INSINPUTHIDDEN        </description><description>  2312</description></item>
            <item><description>Interop.IDM.INSINPUTPASSWORD      </description><description>  2313</description></item>
            <item><description>Interop.IDM.OVERWRITE          </description><description>     2314</description></item>
            <item><description>Interop.IDM.PARSECOMPLETE       </description><description>    2315</description></item>
            <item><description>Interop.IDM.HTMLEDITMODE       </description><description>     2316</description></item>
            <item><description>Interop.IDM.REGISTRYREFRESH      </description><description>   2317</description></item>
            <item><description>Interop.IDM.COMPOSESETTINGS      </description><description>   2318</description></item>
            <item><description>Interop.IDM.SHOWALLTAGS           </description><description>  2327</description></item>
            <item><description>Interop.IDM.SHOWALIGNEDSITETAGS   </description><description>  2321</description></item>
            <item><description>Interop.IDM.SHOWSCRIPTTAGS        </description><description>  2322</description></item>
            <item><description>Interop.IDM.SHOWSTYLETAGS         </description><description>  2323</description></item>
            <item><description>Interop.IDM.SHOWCOMMENTTAGS       </description><description>  2324</description></item>
            <item><description>Interop.IDM.SHOWAREATAGS          </description><description>  2325</description></item>
            <item><description>Interop.IDM.SHOWUNKNOWNTAGS       </description><description>  2326</description></item>
            <item><description>Interop.IDM.SHOWMISCTAGS          </description><description>  2320</description></item>
            <item><description>Interop.IDM.SHOWZEROBORDERATDESIGNTIME  </description><description>       2328</description></item>
            <item><description>Interop.IDM.AUTODETECT         </description><description>     2329</description></item>
            <item><description>Interop.IDM.SCRIPTDEBUGGER     </description><description>     2330</description></item>
            <item><description>Interop.IDM.GETBYTESDOWNLOADED  </description><description>    2331</description></item>
            <item><description>Interop.IDM.NOACTIVATENORMALOLECONTROLS   </description><description>     2332</description></item>
            <item><description>Interop.IDM.NOACTIVATEDESIGNTIMECONTROLS  </description><description>     2333</description></item>
            <item><description>Interop.IDM.NOACTIVATEJAVAAPPLETS          </description><description>    2334</description></item>
            <item><description>Interop.IDM.NOFIXUPURLSONPASTE              </description><description>   2335</description></item>
            <item><description>Interop.IDM.EMPTYGLYPHTABLE   </description><description>      2336</description></item>
            <item><description>Interop.IDM.ADDTOGLYPHTABLE   </description><description>      2337</description></item>
            <item><description>Interop.IDM.REMOVEFROMGLYPHTABLE </description><description>   2338</description></item>
            <item><description>Interop.IDM.REPLACEGLYPHCONTENTS  </description><description>  2339</description></item>
            <item><description>Interop.IDM.SHOWWBRTAGS            </description><description> 2340</description></item>
            <item><description>Interop.IDM.PERSISTSTREAMSYNC      </description><description> 2341</description></item>
            <item><description>Interop.IDM.SETDIRTY              </description><description>  2342</description></item>
            <item><description>Interop.IDM.RUNURLSCRIPT       </description><description>     2343</description></item>
            <item><description>Interop.IDM.ZOOMRATIO          </description><description>     2344</description></item>
            <item><description>Interop.IDM.GETZOOMNUMERATOR    </description><description>    2345</description></item>
            <item><description>Interop.IDM.GETZOOMDENOMINATOR   </description><description>   2346</description></item>
            <item><description>Interop.IDM.DIRLTR                </description><description>  2350</description></item>
            <item><description>Interop.IDM.DIRRTL               </description><description>   2351</description></item>
            <item><description>Interop.IDM.BLOCKDIRLTR          </description><description>   2352</description></item>
            <item><description>Interop.IDM.BLOCKDIRRTL          </description><description>   2353</description></item>
            <item><description>Interop.IDM.INLINEDIRLTR         </description><description>   2354</description></item>
            <item><description>Interop.IDM.INLINEDIRRTL         </description><description>   2355</description></item>
            <item><description>Interop.IDM.ISTRUSTEDDLG     </description><description>       2356</description></item>
            <item><description>Interop.IDM.INSERTSPAN        </description><description>      2357</description></item>
            <item><description>Interop.IDM.LOCALIZEEDITOR     </description><description>     2358</description></item>
            <item><description>Interop.IDM.SAVEPRETRANSFORMSOURCE </description><description> 2370</description></item>
            <item><description>Interop.IDM.VIEWPRETRANSFORMSOURCE </description><description> 2371</description></item>
            <item><description>Interop.IDM.SCROLL_HERE            </description><description> 2380</description></item>
            <item><description>Interop.IDM.SCROLL_TOP             </description><description> 2381</description></item>
            <item><description>Interop.IDM.SCROLL_BOTTOM          </description><description> 2382</description></item>
            <item><description>Interop.IDM.SCROLL_PAGEUP          </description><description> 2383</description></item>
            <item><description>Interop.IDM.SCROLL_PAGEDOWN        </description><description> 2384</description></item>
            <item><description>Interop.IDM.SCROLL_UP              </description><description> 2385</description></item>
            <item><description>Interop.IDM.SCROLL_DOWN            </description><description> 2386</description></item>
            <item><description>Interop.IDM.SCROLL_LEFTEDGE        </description><description> 2387</description></item>
            <item><description>Interop.IDM.SCROLL_RIGHTEDGE       </description><description> 2388</description></item>
            <item><description>Interop.IDM.SCROLL_PAGELEFT        </description><description> 2389</description></item>
            <item><description>Interop.IDM.SCROLL_PAGERIGHT       </description><description> 2390</description></item>
            <item><description>Interop.IDM.SCROLL_LEFT            </description><description> 2391</description></item>
            <item><description>Interop.IDM.SCROLL_RIGHT           </description><description> 2392</description></item>
            <item><description>Interop.IDM.MULTIPLESELECTION      </description><description> 2393</description></item>
            <item><description>Interop.IDM.TWOD_POSITION            </description><description> 2394</description></item>
            <item><description>Interop.IDM.TWOD_ELEMENT             </description><description> 2395</description></item>
            <item><description>Interop.IDM.ONED_ELEMENT             </description><description> 2396</description></item>
            <item><description>Interop.IDM.ABSOLUTE_POSITION      </description><description> 2397</description></item>
            <item><description>Interop.IDM.LIVERESIZE             </description><description> 2398</description></item>
            <item><description>Interop.IDM.ATOMICSELECTION	</description><description>		2399</description></item>
            <item><description>Interop.IDM.AUTOURLDETECT_MODE  </description><description>    2400</description></item>
            <item><description>Interop.IDM.IE50_PASTE          </description><description>    2401</description></item>
            <item><description>Interop.IDM.IE50_PASTE_MODE      </description><description>   2402</description></item>
            <item><description>Interop.IDM.DISABLE_EDITFOCUS_UI   </description><description> 2404</description></item>
            <item><description>Interop.IDM.RESPECTVISIBILITY_INDESIGN </description><description> 2405</description></item>
            <item><description>Interop.IDM.CSSEDITING_LEVEL         </description><description>   2406</description></item>
            <item><description>Interop.IDM.UI_OUTDENT                </description><description>  2407</description></item>
            <item><description>Interop.IDM.UPDATEPAGESTATUS           </description><description> 2408</description></item>
            <item><description>Interop.IDM.IME_ENABLE_RECONVERSION	</description><description>	2409</description></item>
            <item><description>Interop.IDM.KEEPSELECTION			</description><description>	2410</description></item>
            <item><description>Interop.IDM.UNLOADDOCUMENT             </description><description> 2411</description></item>
            <item><description>Interop.IDM.OVERRIDE_CURSOR            </description><description> 2420</description></item>
            <item><description>Interop.IDM.PEERHITTESTSAMEINEDIT      </description><description> 2423</description></item>
            <item><description>Interop.IDM.TRUSTAPPCACHE              </description><description> 2425</description></item>
            <item><description>Interop.IDM.BACKGROUNDIMAGECACHE       </description><description> 2430</description></item>
            <item><description>Interop.IDM.DEFAULTBLOCK           </description><description>     6046</description></item>
            <item><description>Interop.IDM.MIMECSET__FIRST__       </description><description>    3609</description></item>
            <item><description>Interop.IDM.MIMECSET__LAST__         </description><description>   3699</description></item>
            <item><description>Interop.IDM.MENUEXT_FIRST__   </description><description>    3700</description></item>
            <item><description>Interop.IDM.MENUEXT_LAST__     </description><description>   3732</description></item>
            <item><description>Interop.IDM.MENUEXT_COUNT       </description><description>  3733</description></item>
            <item><description>Interop.IDM.OPEN                </description><description>    2000</description></item>
            <item><description>Interop.IDM.NEW                 </description><description>    2001</description></item>
            <item><description>Interop.IDM.SAVE                </description><description>    70</description></item>
            <item><description>Interop.IDM.SAVEAS              </description><description>    71</description></item>
            <item><description>Interop.IDM.SAVECOPYAS          </description><description>    2002</description></item>
            <item><description>Interop.IDM.PRINTPREVIEW        </description><description>    2003</description></item>
            <item><description>Interop.IDM.SHOWPRINT           </description><description>    2010</description></item>
            <item><description>Interop.IDM.SHOWPAGESETUP       </description><description>    2011</description></item>
            <item><description>Interop.IDM.PRINT               </description><description>    27</description></item>
            <item><description>Interop.IDM.PAGESETUP           </description><description>    2004</description></item>
            <item><description>Interop.IDM.SPELL               </description><description>    2005</description></item>
            <item><description>Interop.IDM.PASTESPECIAL        </description><description>    2006</description></item>
            <item><description>Interop.IDM.CLEARSELECTION      </description><description>    2007</description></item>
            <item><description>Interop.IDM.PROPERTIES          </description><description>    28</description></item>
            <item><description>Interop.IDM.REDO                </description><description>    29</description></item>
            <item><description>Interop.IDM.UNDO                </description><description>    43</description></item>
            <item><description>Interop.IDM.SELECTALL           </description><description>    31</description></item>
            <item><description>Interop.IDM.ZOOMPERCENT         </description><description>    50</description></item>
            <item><description>Interop.IDM.GETZOOM             </description><description>    68</description></item>
            <item><description>Interop.IDM.STOP                </description><description>    2138</description></item>
            <item><description>Interop.IDM.COPY                </description><description>    15</description></item>
            <item><description>Interop.IDM.CUT                 </description><description>    16</description></item>
            <item><description>Interop.IDM.PASTE               </description><description>    26</description></item>
            <item><description>Interop.IDM.PERSISTDEFAULTVALUES </description><description> 7100</description></item>
            <item><description>Interop.IDM.PROTECTMETATAGS </description><description>  7101</description></item>
            <item><description>Interop.IDM.PRESERVEUNDOALWAYS </description><description> 6049</description></item>
            </list>
            Note: The appearance in this list does not mean that a particular command works either in NetRix or
            MSHTML.
            </remarks>
            <param name="command">The IDM command ID sent to the control.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SendIDMCommand(System.Int32,System.Object)">
            <summary>
            This method sends an IDM command directly to MSHTML.
            </summary>
            <remarks>
            The call is protected by a try/catch block. The 
            method does not throw an exception on error and does always return nothing. This method is just for
            experimental environments and should not used in production environments.
            <para>
            This is method is subject to be changed or removed in later versions without further notice.
            </para>
            <list type="table">
            <listheader>
                <term>IDM constant</term><term>Numeric Value</term>
            </listheader>
            <item><description>Interop.IDM.UNKNOWN                 </description><description>0</description></item>
            <item><description>Interop.IDM.ALIGNBOTTOM             </description><description>1</description></item>
            <item><description>Interop.IDM.ALIGNHORIZONTALCENTERS  </description><description>2</description></item>
            <item><description>Interop.IDM.ALIGNLEFT               </description><description>3</description></item>
            <item><description>Interop.IDM.ALIGNRIGHT              </description><description>4</description></item>
            <item><description>Interop.IDM.ALIGNTOGRID             </description><description>5</description></item>
            <item><description>Interop.IDM.ALIGNTOP                </description><description>6</description></item>
            <item><description>Interop.IDM.ALIGNVERTICALCENTERS    </description><description>7</description></item>
            <item><description>Interop.IDM.ARRANGEBOTTOM           </description><description>8</description></item>
            <item><description>Interop.IDM.ARRANGERIGHT            </description><description>9</description></item>
            <item><description>Interop.IDM.BRINGFORWARD            </description><description>10</description></item>
            <item><description>Interop.IDM.BRINGTOFRONT            </description><description>11</description></item>
            <item><description>Interop.IDM.CENTERHORIZONTALLY      </description><description>12</description></item>
            <item><description>Interop.IDM.CENTERVERTICALLY        </description><description>13</description></item>
            <item><description>Interop.IDM.CODE                    </description><description>14</description></item>
            <item><description>Interop.IDM.DELETE                  </description><description>17</description></item>
            <item><description>Interop.IDM.FONTNAME                </description><description>18</description></item>
            <item><description>Interop.IDM.FONTSIZE                </description><description>19</description></item>
            <item><description>Interop.IDM.GROUP                   </description><description>20</description></item>
            <item><description>Interop.IDM.HORIZSPACECONCATENATE   </description><description>21</description></item>
            <item><description>Interop.IDM.HORIZSPACEDECREASE      </description><description>22</description></item>
            <item><description>Interop.IDM.HORIZSPACEINCREASE      </description><description>23</description></item>
            <item><description>Interop.IDM.HORIZSPACEMAKEEQUAL     </description><description>24</description></item>
            <item><description>Interop.IDM.INSERTOBJECT            </description><description>25</description></item>
            <item><description>Interop.IDM.MULTILEVELREDO          </description><description>30</description></item>
            <item><description>Interop.IDM.SENDBACKWARD            </description><description>32</description></item>
            <item><description>Interop.IDM.SENDTOBACK              </description><description>33</description></item>
            <item><description>Interop.IDM.SHOWTABLE               </description><description>34</description></item>
            <item><description>Interop.IDM.SIZETOCONTROL           </description><description>35</description></item>
            <item><description>Interop.IDM.SIZETOCONTROLHEIGHT     </description><description>36</description></item>
            <item><description>Interop.IDM.SIZETOCONTROLWIDTH      </description><description>37</description></item>
            <item><description>Interop.IDM.SIZETOFIT               </description><description>38</description></item>
            <item><description>Interop.IDM.SIZETOGRID              </description><description>39</description></item>
            <item><description>Interop.IDM.SNAPTOGRID              </description><description>40</description></item>
            <item><description>Interop.IDM.TABORDER                </description><description>41</description></item>
            <item><description>Interop.IDM.TOOLBOX                 </description><description>42</description></item>
            <item><description>Interop.IDM.MULTILEVELUNDO          </description><description>44</description></item>
            <item><description>Interop.IDM.UNGROUP                 </description><description>45</description></item>
            <item><description>Interop.IDM.VERTSPACECONCATENATE    </description><description>46</description></item>
            <item><description>Interop.IDM.VERTSPACEDECREASE       </description><description>47</description></item>
            <item><description>Interop.IDM.VERTSPACEINCREASE       </description><description>48</description></item>
            <item><description>Interop.IDM.VERTSPACEMAKEEQUAL      </description><description>49</description></item>
            <item><description>Interop.IDM.JUSTIFYFULL             </description><description>50</description></item>
            <item><description>Interop.IDM.BACKCOLOR               </description><description>51</description></item>
            <item><description>Interop.IDM.BOLD                    </description><description>52</description></item>
            <item><description>Interop.IDM.BORDERCOLOR             </description><description>53</description></item>
            <item><description>Interop.IDM.FLAT                    </description><description>54</description></item>
            <item><description>Interop.IDM.FORECOLOR               </description><description>55</description></item>
            <item><description>Interop.IDM.ITALIC                  </description><description>56</description></item>
            <item><description>Interop.IDM.JUSTIFYCENTER           </description><description>57</description></item>
            <item><description>Interop.IDM.JUSTIFYGENERAL          </description><description>58</description></item>
            <item><description>Interop.IDM.JUSTIFYLEFT             </description><description>59</description></item>
            <item><description>Interop.IDM.JUSTIFYRIGHT            </description><description>60</description></item>
            <item><description>Interop.IDM.RAISED                  </description><description>61</description></item>
            <item><description>Interop.IDM.SUNKEN                  </description><description>62</description></item>
            <item><description>Interop.IDM.UNDERLINE               </description><description>63</description></item>
            <item><description>Interop.IDM.CHISELED                </description><description>64</description></item>
            <item><description>Interop.IDM.ETCHED                  </description><description>65</description></item>
            <item><description>Interop.IDM.SHADOWED                </description><description>66</description></item>
            <item><description>Interop.IDM.FIND                    </description><description>67</description></item>
            <item><description>Interop.IDM.SHOWGRID                </description><description>69</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST0         </description><description>72</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST1         </description><description>73</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST2         </description><description>74</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST3         </description><description>75</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST4         </description><description>76</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST5         </description><description>77</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST6         </description><description>78</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST7         </description><description>79</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST8         </description><description>80</description></item>
            <item><description>Interop.IDM.OBJECTVERBLIST9         </description><description>81</description></item>
            <item><description>Interop.IDM.CONVERTOBJECT       </description><description>    82</description></item>
            <item><description>Interop.IDM.CUSTOMCONTROL       </description><description>    83</description></item>
            <item><description>Interop.IDM.CUSTOMIZEITEM       </description><description>    84</description></item>
            <item><description>Interop.IDM.RENAME              </description><description>    85</description></item>
            <item><description>Interop.IDM.IMPORT              </description><description>    86</description></item>
            <item><description>Interop.IDM.NEWPAGE             </description><description>    87</description></item>
            <item><description>Interop.IDM.MOVE                </description><description>    88</description></item>
            <item><description>Interop.IDM.CANCEL              </description><description>    89</description></item>
            <item><description>Interop.IDM.FONT                </description><description>    90</description></item>
            <item><description>Interop.IDM.STRIKETHROUGH       </description><description>    91</description></item>
            <item><description>Interop.IDM.DELETEWORD          </description><description>    92</description></item>
            <item><description>Interop.IDM.EXECPRINT           </description><description>    93</description></item>
            <item><description>Interop.IDM.JUSTIFYNONE         </description><description>    94</description></item>
            <item><description>Interop.IDM.TRISTATEBOLD        </description><description>    95</description></item>
            <item><description>Interop.IDM.TRISTATEITALIC      </description><description>    96</description></item>
            <item><description>Interop.IDM.TRISTATEUNDERLINE   </description><description>    97</description></item>
            <item><description>Interop.IDM.FOLLOW_ANCHOR        </description><description>   2008</description></item>
            <item><description>Interop.IDM.INSINPUTIMAGE         </description><description>  2114</description></item>
            <item><description>Interop.IDM.INSINPUTBUTTON        </description><description>  2115</description></item>
            <item><description>Interop.IDM.INSINPUTRESET         </description><description>  2116</description></item>
            <item><description>Interop.IDM.INSINPUTSUBMIT        </description><description>  2117</description></item>
            <item><description>Interop.IDM.INSINPUTUPLOAD        </description><description>  2118</description></item>
            <item><description>Interop.IDM.INSFIELDSET           </description><description>  2119</description></item>
            <item><description>Interop.IDM.PASTEINSERT          </description><description>   2120</description></item>
            <item><description>Interop.IDM.REPLACE              </description><description>   2121</description></item>
            <item><description>Interop.IDM.EDITSOURCE           </description><description>   2122</description></item>
            <item><description>Interop.IDM.BOOKMARK             </description><description>   2123</description></item>
            <item><description>Interop.IDM.HYPERLINK            </description><description>   2124</description></item>
            <item><description>Interop.IDM.UNLINK               </description><description>   2125</description></item>
            <item><description>Interop.IDM.BROWSEMODE           </description><description>   2126</description></item>
            <item><description>Interop.IDM.EDITMODE             </description><description>   2127</description></item>
            <item><description>Interop.IDM.UNBOOKMARK           </description><description>   2128</description></item>
            <item><description>Interop.IDM.TOOLBARS             </description><description>   2130</description></item>
            <item><description>Interop.IDM.STATUSBAR            </description><description>   2131</description></item>
            <item><description>Interop.IDM.FORMATMARK           </description><description>   2132</description></item>
            <item><description>Interop.IDM.TEXTONLY             </description><description>   2133</description></item>
            <item><description>Interop.IDM.OPTIONS              </description><description>   2135</description></item>
            <item><description>Interop.IDM.FOLLOWLINKC          </description><description>   2136</description></item>
            <item><description>Interop.IDM.FOLLOWLINKN          </description><description>   2137</description></item>
            <item><description>Interop.IDM.VIEWSOURCE           </description><description>   2139</description></item>
            <item><description>Interop.IDM.ZOOMPOPUP            </description><description>   2140</description></item>
            <item><description>Interop.IDM.BASELINEFONT1       </description><description>    2141</description></item>
            <item><description>Interop.IDM.BASELINEFONT2       </description><description>    2142</description></item>
            <item><description>Interop.IDM.BASELINEFONT3       </description><description>    2143</description></item>
            <item><description>Interop.IDM.BASELINEFONT4       </description><description>    2144</description></item>
            <item><description>Interop.IDM.BASELINEFONT5       </description><description>    2145</description></item>
            <item><description>Interop.IDM.HORIZONTALLINE      </description><description>    2150</description></item>
            <item><description>Interop.IDM.LINEBREAKNORMAL     </description><description>    2151</description></item>
            <item><description>Interop.IDM.LINEBREAKLEFT       </description><description>    2152</description></item>
            <item><description>Interop.IDM.LINEBREAKRIGHT      </description><description>    2153</description></item>
            <item><description>Interop.IDM.LINEBREAKBOTH       </description><description>    2154</description></item>
            <item><description>Interop.IDM.NONBREAK            </description><description>    2155</description></item>
            <item><description>Interop.IDM.SPECIALCHAR         </description><description>    2156</description></item>
            <item><description>Interop.IDM.HTMLSOURCE          </description><description>    2157</description></item>
            <item><description>Interop.IDM.IFRAME              </description><description>    2158</description></item>
            <item><description>Interop.IDM.HTMLCONTAIN         </description><description>    2159</description></item>
            <item><description>Interop.IDM.TEXTBOX             </description><description>    2161</description></item>
            <item><description>Interop.IDM.TEXTAREA            </description><description>    2162</description></item>
            <item><description>Interop.IDM.CHECKBOX            </description><description>    2163</description></item>
            <item><description>Interop.IDM.RADIOBUTTON         </description><description>    2164</description></item>
            <item><description>Interop.IDM.DROPDOWNBOX         </description><description>    2165</description></item>
            <item><description>Interop.IDM.LISTBOX             </description><description>    2166</description></item>
            <item><description>Interop.IDM.BUTTON              </description><description>    2167</description></item>
            <item><description>Interop.IDM.IMAGE               </description><description>    2168</description></item>
            <item><description>Interop.IDM.OBJECT              </description><description>    2169</description></item>
            <item><description>Interop.IDM.1D                  </description><description>    2170</description></item>
            <item><description>Interop.IDM.IMAGEMAP            </description><description>    2171</description></item>
            <item><description>Interop.IDM.FILE                </description><description>    2172</description></item>
            <item><description>Interop.IDM.COMMENT             </description><description>    2173</description></item>
            <item><description>Interop.IDM.SCRIPT              </description><description>    2174</description></item>
            <item><description>Interop.IDM.JAVAAPPLET          </description><description>    2175</description></item>
            <item><description>Interop.IDM.PLUGIN              </description><description>    2176</description></item>
            <item><description>Interop.IDM.PAGEBREAK           </description><description>    2177</description></item>
            <item><description>Interop.IDM.HTMLAREA            </description><description>    2178</description></item>
            <item><description>Interop.IDM.PARAGRAPH           </description><description>    2180</description></item>
            <item><description>Interop.IDM.FORM                </description><description>    2181</description></item>
            <item><description>Interop.IDM.MARQUEE             </description><description>    2182</description></item>
            <item><description>Interop.IDM.LIST                </description><description>    2183</description></item>
            <item><description>Interop.IDM.ORDERLIST           </description><description>    2184</description></item>
            <item><description>Interop.IDM.UNORDERLIST         </description><description>    2185</description></item>
            <item><description>Interop.IDM.INDENT              </description><description>    2186</description></item>
            <item><description>Interop.IDM.OUTDENT             </description><description>    2187</description></item>
            <item><description>Interop.IDM.PREFORMATTED        </description><description>    2188</description></item>
            <item><description>Interop.IDM.ADDRESS             </description><description>    2189</description></item>
            <item><description>Interop.IDM.BLINK               </description><description>    2190</description></item>
            <item><description>Interop.IDM.DIV                 </description><description>    2191</description></item>
            <item><description>Interop.IDM.TABLEINSERT         </description><description>    2200</description></item>
            <item><description>Interop.IDM.RCINSERT            </description><description>    2201</description></item>
            <item><description>Interop.IDM.CELLINSERT          </description><description>    2202</description></item>
            <item><description>Interop.IDM.CAPTIONINSERT       </description><description>    2203</description></item>
            <item><description>Interop.IDM.CELLMERGE           </description><description>    2204</description></item>
            <item><description>Interop.IDM.CELLSPLIT           </description><description>    2205</description></item>
            <item><description>Interop.IDM.CELLSELECT          </description><description>    2206</description></item>
            <item><description>Interop.IDM.ROWSELECT           </description><description>    2207</description></item>
            <item><description>Interop.IDM.COLUMNSELECT        </description><description>    2208</description></item>
            <item><description>Interop.IDM.TABLESELECT         </description><description>    2209</description></item>
            <item><description>Interop.IDM.TABLEPROPERTIES     </description><description>    2210</description></item>
            <item><description>Interop.IDM.CELLPROPERTIES      </description><description>    2211</description></item>
            <item><description>Interop.IDM.ROWINSERT           </description><description>    2212</description></item>
            <item><description>Interop.IDM.COLUMNINSERT        </description><description>    2213</description></item>
            <item><description>Interop.IDM.HELP_CONTENT         </description><description>   2220</description></item>
            <item><description>Interop.IDM.HELP_ABOUT           </description><description>   2221</description></item>
            <item><description>Interop.IDM.HELP_README          </description><description>   2222</description></item>
            <item><description>Interop.IDM.REMOVEFORMAT          </description><description>  2230</description></item>
            <item><description>Interop.IDM.PAGEINFO             </description><description>   2231</description></item>
            <item><description>Interop.IDM.TELETYPE             </description><description>   2232</description></item>
            <item><description>Interop.IDM.GETBLOCKFMTS          </description><description>  2233</description></item>
            <item><description>Interop.IDM.BLOCKFMT              </description><description>  2234</description></item>
            <item><description>Interop.IDM.SHOWHIDE_CODE         </description><description>  2235</description></item>
            <item><description>Interop.IDM.TABLE                 </description><description>  2236</description></item>
            <item><description>Interop.IDM.COPYFORMAT             </description><description> 2237</description></item>
            <item><description>Interop.IDM.PASTEFORMAT         </description><description>    2238</description></item>
            <item><description>Interop.IDM.GOTO                 </description><description>   2239</description></item>
            <item><description>Interop.IDM.CHANGEFONT            </description><description>  2240</description></item>
            <item><description>Interop.IDM.CHANGEFONTSIZE        </description><description>  2241</description></item>
            <item><description>Interop.IDM.CHANGECASE            </description><description>  2246</description></item>
            <item><description>Interop.IDM.SHOWSPECIALCHAR       </description><description>  2249</description></item>
            <item><description>Interop.IDM.SUBSCRIPT             </description><description>  2247</description></item>
            <item><description>Interop.IDM.SUPERSCRIPT           </description><description>  2248</description></item>
            <item><description>Interop.IDM.CENTERALIGNPARA       </description><description>  2250</description></item>
            <item><description>Interop.IDM.LEFTALIGNPARA         </description><description>  2251</description></item>
            <item><description>Interop.IDM.RIGHTALIGNPARA        </description><description>  2252</description></item>
            <item><description>Interop.IDM.REMOVEPARAFORMAT      </description><description>  2253</description></item>
            <item><description>Interop.IDM.APPLYNORMAL           </description><description>  2254</description></item>
            <item><description>Interop.IDM.APPLYHEADING1         </description><description>  2255</description></item>
            <item><description>Interop.IDM.APPLYHEADING2         </description><description>  2256</description></item>
            <item><description>Interop.IDM.APPLYHEADING3         </description><description>  2257</description></item>
            <item><description>Interop.IDM.DOCPROPERTIES         </description><description>  2260</description></item>
            <item><description>Interop.IDM.ADDFAVORITES          </description><description>  2261</description></item>
            <item><description>Interop.IDM.COPYSHORTCUT          </description><description>  2262</description></item>
            <item><description>Interop.IDM.SAVEBACKGROUND        </description><description>  2263</description></item>
            <item><description>Interop.IDM.SETWALLPAPER          </description><description>  2264</description></item>
            <item><description>Interop.IDM.COPYBACKGROUND        </description><description>  2265</description></item>
            <item><description>Interop.IDM.CREATESHORTCUT        </description><description>  2266</description></item>
            <item><description>Interop.IDM.PAGE                  </description><description>  2267</description></item>
            <item><description>Interop.IDM.SAVETARGET            </description><description>  2268</description></item>
            <item><description>Interop.IDM.SHOWPICTURE           </description><description>  2269</description></item>
            <item><description>Interop.IDM.SAVEPICTURE           </description><description>  2270</description></item>
            <item><description>Interop.IDM.DYNSRCPLAY            </description><description>  2271</description></item>
            <item><description>Interop.IDM.DYNSRCSTOP            </description><description>  2272</description></item>
            <item><description>Interop.IDM.PRINTTARGET           </description><description>  2273</description></item>
            <item><description>Interop.IDM.IMGARTPLAY            </description><description>  2274</description></item>
            <item><description>Interop.IDM.IMGARTSTOP            </description><description>  2275</description></item>
            <item><description>Interop.IDM.IMGARTREWIND          </description><description>  2276</description></item>
            <item><description>Interop.IDM.PRINTQUERYJOBSPENDING </description><description>  2277</description></item>
            <item><description>Interop.IDM.SETDESKTOPITEM        </description><description>  2278</description></item>
            <item><description>Interop.IDM.CONTEXTMENU           </description><description>  2280</description></item>
            <item><description>Interop.IDM.GOBACKWARD            </description><description>  2282</description></item>
            <item><description>Interop.IDM.GOFORWARD             </description><description>  2283</description></item>
            <item><description>Interop.IDM.PRESTOP               </description><description>  2284</description></item>
            <item><description>Interop.IDM.MP_MYPICS             </description><description>  2287</description></item>
            <item><description>Interop.IDM.MP_EMAILPICTURE       </description><description>  2288</description></item>
            <item><description>Interop.IDM.MP_PRINTPICTURE       </description><description>  2289</description></item>
            <item><description>Interop.IDM.CREATELINK           </description><description>   2290</description></item>
            <item><description>Interop.IDM.COPYCONTENT          </description><description>   2291</description></item>
            <item><description>Interop.IDM.LANGUAGE             </description><description>   2292</description></item>
            <item><description>Interop.IDM.GETPRINTTEMPLATE    </description><description>    2295</description></item>
            <item><description>Interop.IDM.SETPRINTTEMPLATE    </description><description>    2296</description></item>
            <item><description>Interop.IDM.TEMPLATE_PAGESETUP  </description><description>    2298</description></item>
            <item><description>Interop.IDM.REFRESH              </description><description>   2300</description></item>
            <item><description>Interop.IDM.STOPDOWNLOAD         </description><description>   2301</description></item>
            <item><description>Interop.IDM.ENABLE_INTERACTION    </description><description>  2302</description></item>
            <item><description>Interop.IDM.LAUNCHDEBUGGER         </description><description> 2310</description></item>
            <item><description>Interop.IDM.BREAKATNEXT            </description><description> 2311</description></item>
            <item><description>Interop.IDM.INSINPUTHIDDEN        </description><description>  2312</description></item>
            <item><description>Interop.IDM.INSINPUTPASSWORD      </description><description>  2313</description></item>
            <item><description>Interop.IDM.OVERWRITE          </description><description>     2314</description></item>
            <item><description>Interop.IDM.PARSECOMPLETE       </description><description>    2315</description></item>
            <item><description>Interop.IDM.HTMLEDITMODE       </description><description>     2316</description></item>
            <item><description>Interop.IDM.REGISTRYREFRESH      </description><description>   2317</description></item>
            <item><description>Interop.IDM.COMPOSESETTINGS      </description><description>   2318</description></item>
            <item><description>Interop.IDM.SHOWALLTAGS           </description><description>  2327</description></item>
            <item><description>Interop.IDM.SHOWALIGNEDSITETAGS   </description><description>  2321</description></item>
            <item><description>Interop.IDM.SHOWSCRIPTTAGS        </description><description>  2322</description></item>
            <item><description>Interop.IDM.SHOWSTYLETAGS         </description><description>  2323</description></item>
            <item><description>Interop.IDM.SHOWCOMMENTTAGS       </description><description>  2324</description></item>
            <item><description>Interop.IDM.SHOWAREATAGS          </description><description>  2325</description></item>
            <item><description>Interop.IDM.SHOWUNKNOWNTAGS       </description><description>  2326</description></item>
            <item><description>Interop.IDM.SHOWMISCTAGS          </description><description>  2320</description></item>
            <item><description>Interop.IDM.SHOWZEROBORDERATDESIGNTIME  </description><description>       2328</description></item>
            <item><description>Interop.IDM.AUTODETECT         </description><description>     2329</description></item>
            <item><description>Interop.IDM.SCRIPTDEBUGGER     </description><description>     2330</description></item>
            <item><description>Interop.IDM.GETBYTESDOWNLOADED  </description><description>    2331</description></item>
            <item><description>Interop.IDM.NOACTIVATENORMALOLECONTROLS   </description><description>     2332</description></item>
            <item><description>Interop.IDM.NOACTIVATEDESIGNTIMECONTROLS  </description><description>     2333</description></item>
            <item><description>Interop.IDM.NOACTIVATEJAVAAPPLETS          </description><description>    2334</description></item>
            <item><description>Interop.IDM.NOFIXUPURLSONPASTE              </description><description>   2335</description></item>
            <item><description>Interop.IDM.EMPTYGLYPHTABLE   </description><description>      2336</description></item>
            <item><description>Interop.IDM.ADDTOGLYPHTABLE   </description><description>      2337</description></item>
            <item><description>Interop.IDM.REMOVEFROMGLYPHTABLE </description><description>   2338</description></item>
            <item><description>Interop.IDM.REPLACEGLYPHCONTENTS  </description><description>  2339</description></item>
            <item><description>Interop.IDM.SHOWWBRTAGS            </description><description> 2340</description></item>
            <item><description>Interop.IDM.PERSISTSTREAMSYNC      </description><description> 2341</description></item>
            <item><description>Interop.IDM.SETDIRTY              </description><description>  2342</description></item>
            <item><description>Interop.IDM.RUNURLSCRIPT       </description><description>     2343</description></item>
            <item><description>Interop.IDM.ZOOMRATIO          </description><description>     2344</description></item>
            <item><description>Interop.IDM.GETZOOMNUMERATOR    </description><description>    2345</description></item>
            <item><description>Interop.IDM.GETZOOMDENOMINATOR   </description><description>   2346</description></item>
            <item><description>Interop.IDM.DIRLTR                </description><description>  2350</description></item>
            <item><description>Interop.IDM.DIRRTL               </description><description>   2351</description></item>
            <item><description>Interop.IDM.BLOCKDIRLTR          </description><description>   2352</description></item>
            <item><description>Interop.IDM.BLOCKDIRRTL          </description><description>   2353</description></item>
            <item><description>Interop.IDM.INLINEDIRLTR         </description><description>   2354</description></item>
            <item><description>Interop.IDM.INLINEDIRRTL         </description><description>   2355</description></item>
            <item><description>Interop.IDM.ISTRUSTEDDLG     </description><description>       2356</description></item>
            <item><description>Interop.IDM.INSERTSPAN        </description><description>      2357</description></item>
            <item><description>Interop.IDM.LOCALIZEEDITOR     </description><description>     2358</description></item>
            <item><description>Interop.IDM.SAVEPRETRANSFORMSOURCE </description><description> 2370</description></item>
            <item><description>Interop.IDM.VIEWPRETRANSFORMSOURCE </description><description> 2371</description></item>
            <item><description>Interop.IDM.SCROLL_HERE            </description><description> 2380</description></item>
            <item><description>Interop.IDM.SCROLL_TOP             </description><description> 2381</description></item>
            <item><description>Interop.IDM.SCROLL_BOTTOM          </description><description> 2382</description></item>
            <item><description>Interop.IDM.SCROLL_PAGEUP          </description><description> 2383</description></item>
            <item><description>Interop.IDM.SCROLL_PAGEDOWN        </description><description> 2384</description></item>
            <item><description>Interop.IDM.SCROLL_UP              </description><description> 2385</description></item>
            <item><description>Interop.IDM.SCROLL_DOWN            </description><description> 2386</description></item>
            <item><description>Interop.IDM.SCROLL_LEFTEDGE        </description><description> 2387</description></item>
            <item><description>Interop.IDM.SCROLL_RIGHTEDGE       </description><description> 2388</description></item>
            <item><description>Interop.IDM.SCROLL_PAGELEFT        </description><description> 2389</description></item>
            <item><description>Interop.IDM.SCROLL_PAGERIGHT       </description><description> 2390</description></item>
            <item><description>Interop.IDM.SCROLL_LEFT            </description><description> 2391</description></item>
            <item><description>Interop.IDM.SCROLL_RIGHT           </description><description> 2392</description></item>
            <item><description>Interop.IDM.MULTIPLESELECTION      </description><description> 2393</description></item>
            <item><description>Interop.IDM.TWOD_POSITION            </description><description> 2394</description></item>
            <item><description>Interop.IDM.TWOD_ELEMENT             </description><description> 2395</description></item>
            <item><description>Interop.IDM.ONED_ELEMENT             </description><description> 2396</description></item>
            <item><description>Interop.IDM.ABSOLUTE_POSITION      </description><description> 2397</description></item>
            <item><description>Interop.IDM.LIVERESIZE             </description><description> 2398</description></item>
            <item><description>Interop.IDM.ATOMICSELECTION	</description><description>		2399</description></item>
            <item><description>Interop.IDM.AUTOURLDETECT_MODE  </description><description>    2400</description></item>
            <item><description>Interop.IDM.IE50_PASTE          </description><description>    2401</description></item>
            <item><description>Interop.IDM.IE50_PASTE_MODE      </description><description>   2402</description></item>
            <item><description>Interop.IDM.DISABLE_EDITFOCUS_UI   </description><description> 2404</description></item>
            <item><description>Interop.IDM.RESPECTVISIBILITY_INDESIGN </description><description> 2405</description></item>
            <item><description>Interop.IDM.CSSEDITING_LEVEL         </description><description>   2406</description></item>
            <item><description>Interop.IDM.UI_OUTDENT                </description><description>  2407</description></item>
            <item><description>Interop.IDM.UPDATEPAGESTATUS           </description><description> 2408</description></item>
            <item><description>Interop.IDM.IME_ENABLE_RECONVERSION	</description><description>	2409</description></item>
            <item><description>Interop.IDM.KEEPSELECTION			</description><description>	2410</description></item>
            <item><description>Interop.IDM.UNLOADDOCUMENT             </description><description> 2411</description></item>
            <item><description>Interop.IDM.OVERRIDE_CURSOR            </description><description> 2420</description></item>
            <item><description>Interop.IDM.PEERHITTESTSAMEINEDIT      </description><description> 2423</description></item>
            <item><description>Interop.IDM.TRUSTAPPCACHE              </description><description> 2425</description></item>
            <item><description>Interop.IDM.BACKGROUNDIMAGECACHE       </description><description> 2430</description></item>
            <item><description>Interop.IDM.DEFAULTBLOCK           </description><description>     6046</description></item>
            <item><description>Interop.IDM.MIMECSET__FIRST__       </description><description>    3609</description></item>
            <item><description>Interop.IDM.MIMECSET__LAST__         </description><description>   3699</description></item>
            <item><description>Interop.IDM.MENUEXT_FIRST__   </description><description>    3700</description></item>
            <item><description>Interop.IDM.MENUEXT_LAST__     </description><description>   3732</description></item>
            <item><description>Interop.IDM.MENUEXT_COUNT       </description><description>  3733</description></item>
            <item><description>Interop.IDM.OPEN                </description><description>    2000</description></item>
            <item><description>Interop.IDM.NEW                 </description><description>    2001</description></item>
            <item><description>Interop.IDM.SAVE                </description><description>    70</description></item>
            <item><description>Interop.IDM.SAVEAS              </description><description>    71</description></item>
            <item><description>Interop.IDM.SAVECOPYAS          </description><description>    2002</description></item>
            <item><description>Interop.IDM.PRINTPREVIEW        </description><description>    2003</description></item>
            <item><description>Interop.IDM.SHOWPRINT           </description><description>    2010</description></item>
            <item><description>Interop.IDM.SHOWPAGESETUP       </description><description>    2011</description></item>
            <item><description>Interop.IDM.PRINT               </description><description>    27</description></item>
            <item><description>Interop.IDM.PAGESETUP           </description><description>    2004</description></item>
            <item><description>Interop.IDM.SPELL               </description><description>    2005</description></item>
            <item><description>Interop.IDM.PASTESPECIAL        </description><description>    2006</description></item>
            <item><description>Interop.IDM.CLEARSELECTION      </description><description>    2007</description></item>
            <item><description>Interop.IDM.PROPERTIES          </description><description>    28</description></item>
            <item><description>Interop.IDM.REDO                </description><description>    29</description></item>
            <item><description>Interop.IDM.UNDO                </description><description>    43</description></item>
            <item><description>Interop.IDM.SELECTALL           </description><description>    31</description></item>
            <item><description>Interop.IDM.ZOOMPERCENT         </description><description>    50</description></item>
            <item><description>Interop.IDM.GETZOOM             </description><description>    68</description></item>
            <item><description>Interop.IDM.STOP                </description><description>    2138</description></item>
            <item><description>Interop.IDM.COPY                </description><description>    15</description></item>
            <item><description>Interop.IDM.CUT                 </description><description>    16</description></item>
            <item><description>Interop.IDM.PASTE               </description><description>    26</description></item>
            <item><description>Interop.IDM.PERSISTDEFAULTVALUES </description><description> 7100</description></item>
            <item><description>Interop.IDM.PROTECTMETATAGS </description><description>  7101</description></item>
            <item><description>Interop.IDM.PRESERVEUNDOALWAYS </description><description> 6049</description></item>
            </list>
            Note: The appearance in this list does not mean that a particular command works either in NetRix or
            MSHTML.
            </remarks>
            <param name="command">The IDM command ID sent to the control.</param>
            <param name="argument">Argument object specific to the command parameter.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnContentChanged">
            <summary>
            Fires the <see cref="E:GuruComponents.Netrix.HtmlEditor.ContentChanged"/> event.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetFullPathUrl">
            <summary>
            Gets the full decoded path to the file this document is load locally from.
            </summary>
            <remarks>
            This can be an URL, but under most circumstances this may be a Path. Any monikers of type "file://" are removed.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Replace(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <overloads/>
            <summary>
            Searches and replaces a string.
            </summary>
            <param name="searchString">String to search for</param>
            <param name="replaceString">String to replace with</param>
            <param name="matchCase">true if case sensitive</param>
            <param name="wholeWord">true if only whole words (search string matches word boundaries) found</param>
            <param name="searchUp">true if search upwards, false otherwise</param>
            <returns>Number of replaces</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Replace(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Searches and replaces a string.
            </summary>
            <remarks>
            The method uses the callback to <see cref="E:GuruComponents.Netrix.HtmlEditor.BeforeReplace"/> event to inform the host application about
            thew next replacement. If no handler present, the method will continuously replace all occurences of the
            string. The event handler can set a property of type <see cref="T:System.Windows.Forms.DialogResult">DialogResult</see>
            to control the behavior of the Replace method. The various field of the 
            <see cref="T:System.Windows.Forms.DialogResult">DialogResult</see> enumeration have the following meaning:
            <list type="bullet">
            <item><term>Yes</term><description>Replace</description></item>
            <item><term>OK</term><description>Replace</description></item>
            <item><term>None</term><description>End method and stop all replacements (e.g. Cancel)</description></item>
            <item><term>Cancel</term><description>End method and stop all replacements (e.g. Cancel)</description></item>
            <item><term>Abort</term><description>End method and stop all replacements (e.g. Cancel)</description></item>
            <item><term>No</term><description>Skip this (current) replacement, but continue.</description></item>
            <item><term>Ignore</term><description>Skip this (current) replacement, but continue.</description></item>
            <item><term>Retry</term><description>Start replacement at the beginning. (Helpful after some words were skipped)</description></item>
            </list>
            <para>
            Version 1.6.2008 (Aug 2008): Added support for spell checking within TextArea Elements.
            </para>
            </remarks>
            <param name="searchString">String to search for</param>
            <param name="replaceString">String to replace with</param>
            <param name="matchCase"><c>True</c> if case sensitive</param>
            <param name="wholeWord"><c>True</c> if only whole words (search string matches word boundaries) found</param>
            <param name="searchUp"><c>True</c> if search upwards, false otherwise</param>
            <param name="maxReplacements">Limits the number of replacements.</param>
            <returns>Number of replaces</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Find(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <overloads/>
            <summary>
            Searches for a text string in the whole document.
            </summary>
            <remarks>
            Searches document for a given string and, if the string was found, returns true. The search stops at the first 
            hit and starts from the last stop. Subsequent calls jump from hit to hit. The document will automatically 
            scroll to the marked position.
            <para>The method does not stop at end. After the end of document has been reached the method returns to the document 
            start. See other overloads for information about the <c>StopAtEnd</c> parameter.</para>
            <para>The method uses the whole document as search range. To move the range a specific number of characters see
            other overloads.</para>
            </remarks>
            <example>
            The following code assumes that you have a dialog created which provides the following properties:
            <list type="bullet">
            <item>
                <term>WithReplace</term>
                <description>A boolean value (supported by a checkbox) which turn replacement on.</description>
            </item>
            <item>
                <term>Search</term>
                <description>A string value (supported by a textbox) which returns the phrase we're searching for.</description>
            </item>
            <item>
                <term>Replace</term>
                <description>A string value (supported by a textbox) which returns the characters we use for replacement.</description>
            </item>
            <item>
                <term>Match</term>
                <description>A boolean value (supported by a checkbox) which indicates that the search is case sensitive.</description>
            </item>
            <item>
                <term>Word</term>
                <description>A boolean value (supported by a checkbox) which delimites the search to whole words.</description>
            </item>
            <item>
                <term>Up</term>
                <description>A boolean value (supported by a checkbox). The search runs upwards if turned on.</description>
            </item>
            </list>
            <code>
            if (SearchReplaceDialog.ShowDialog() == DialogResult.OK)
            {        
                if (SearchReplaceDialog.WithReplace)
                {
                    int c = this.htmlEditor1.Replace(SearchReplaceDialog.Search, SearchReplaceDialog.Replace, SearchReplaceDialog.Match, SearchReplaceDialog.Word, SearchReplaceDialog.Up);
                    MessageBox.Show(c.ToString() + " strings found and replaced");
                } 
                else 
                {
                    bool r = this.htmlEditor1.Find(SearchReplaceDialog.Search, SearchReplaceDialog.Match, SearchReplaceDialog.Word, SearchReplaceDialog.Up);
                    if (!r)
                    {
                        MessageBox.Show("String '"+SearchReplaceDialog.Search+"' not found");
                    }
                }
            }
            </code>
            </example>
            <param name="searchString">A string to search for.</param>
            <param name="matchCase">Must be set to <c>true</c> if match case is required.</param>
            <param name="wholeWord">Must set to <c>true</c> if only whole words should be found.</param>
            <param name="searchUp">Must set to <c>true</c> to search backwards.</param>
            <returns>Returns <c>true</c> if something was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Find(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <overloads/>
            <summary>
            Searches for a text string in the whole document.
            </summary>
            <remarks>
            Searches document for a given string and, if the string was found, returns true. The search stops at the first 
            hit and starts from the last stop. Subsequent calls jump from hit to hit. The document will automatically 
            scroll to the marked position.
            </remarks>
            <example>
            The following code assumes that you have a dialog created which provides the following properties:
            <list type="bullet">
            <item>
                <term>WithReplace</term>
                <description>A boolean value (supported by a checkbox) which turn replacement on.</description>
            </item>
            <item>
                <term>Search</term>
                <description>A string value (supported by a textbox) which returns the phrase we're searching for.</description>
            </item>
            <item>
                <term>Replace</term>
                <description>A string value (supported by a textbox) which returns the characters we use for replacement.</description>
            </item>
            <item>
                <term>Match</term>
                <description>A boolean value (supported by a checkbox) which indicates that the search is case sensitive.</description>
            </item>
            <item>
                <term>Word</term>
                <description>A boolean value (supported by a checkbox) which delimites the search to whole words.</description>
            </item>
            <item>
                <term>Up</term>
                <description>A boolean value (supported by a checkbox). The search runs upwards if turned on.</description>
            </item>
            </list>
            <code>
            if (SearchReplaceDialog.ShowDialog() == DialogResult.OK)
            {        
                if (SearchReplaceDialog.WithReplace)
                {
                    int c = this.htmlEditor1.Replace(SearchReplaceDialog.Search, SearchReplaceDialog.Replace, SearchReplaceDialog.Match, SearchReplaceDialog.Word, SearchReplaceDialog.Up);
                    MessageBox.Show(c.ToString() + " strings found and replaced");
                } 
                else 
                {
                    bool r = this.htmlEditor1.Find(SearchReplaceDialog.Search, SearchReplaceDialog.Match, SearchReplaceDialog.Word, SearchReplaceDialog.Up);
                    if (!r)
                    {
                        MessageBox.Show("String '"+SearchReplaceDialog.Search+"' not found");
                    }
                }
            }
            </code>
            </example>
            <param name="searchString">A string to search for.</param>
            <param name="matchCase">Must be set to <c>true</c> if match case is required.</param>
            <param name="wholeWord">Must set to <c>true</c> if only whole words should be found.</param>
            <param name="searchUp">Must set to <c>true</c> to search backwards.</param>
            <param name="stopAtEnd">By default the Find method "loops", e.g. it doesn't stop after reaching the end of document. If set to <c>true</c> the method stops at end.</param>
            <returns>Returns <c>true</c> if something was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Find(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Searches for a text string in the whole document.
            </summary>
            <remarks>
            Searches document for a given string and, if the string was found, returns true. The search stops at the first 
            hit and starts from the last stop. Subsequent calls jump from hit to hit. The document will automatically 
            scroll to the marked position.
            </remarks>
            <example>
            The following code assumes that you have a dialog created which provides the following properties:
            <list type="bullet">
            <item>
                <term>WithReplace</term>
                <description>A boolean value (supported by a checkbox) which turn replacement on.</description>
            </item>
            <item>
                <term>Search</term>
                <description>A string value (supported by a textbox) which returns the phrase we're searching for.</description>
            </item>
            <item>
                <term>Replace</term>
                <description>A string value (supported by a textbox) which returns the characters we use for replacement.</description>
            </item>
            <item>
                <term>Match</term>
                <description>A boolean value (supported by a checkbox) which indicates that the search is case sensitive.</description>
            </item>
            <item>
                <term>Word</term>
                <description>A boolean value (supported by a checkbox) which delimites the search to whole words.</description>
            </item>
            <item>
                <term>Up</term>
                <description>A boolean value (supported by a checkbox). The search runs upwards if turned on.</description>
            </item>
            </list>
            <code>
            if (SearchReplaceDialog.ShowDialog() == DialogResult.OK)
            {        
                if (SearchReplaceDialog.WithReplace)
                {
                    int c = this.htmlEditor1.Replace(SearchReplaceDialog.Search, SearchReplaceDialog.Replace, SearchReplaceDialog.Match, SearchReplaceDialog.Word, SearchReplaceDialog.Up);
                    MessageBox.Show(c.ToString() + " strings found and replaced");
                } 
                else 
                {
                    bool r = this.htmlEditor1.Find(SearchReplaceDialog.Search, SearchReplaceDialog.Match, SearchReplaceDialog.Word, SearchReplaceDialog.Up);
                    if (!r)
                    {
                        MessageBox.Show("String '"+SearchReplaceDialog.Search+"' not found");
                    }
                }
            }
            </code>
            </example>
            <param name="searchString">A string to search for.</param>
            <param name="matchCase">Must be set to <c>true</c> if match case is required.</param>
            <param name="wholeWord">Must set to <c>true</c> if only whole words should be found.</param>
            <param name="searchUp">Must set to <c>true</c> to search backwards.</param>
            <param name="stopAtEnd">If set to <c>true</c> the process stops if the end of document is reached.</param>
            <param name="startPosition">Number of characters the search range is supposed to move before Find starts. Default is 0 (no move).</param>
            <returns>Returns <c>true</c> if something was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.FindCheckEndPoint(GuruComponents.Netrix.ComInterop.Interop.IHTMLTxtRange,System.Boolean)">
            <summary>
            Checks for reaching the document end compared with the current find range.
            </summary>
            <param name="currentRange">Current Range</param>
            <param name="foundString">Hint that the string was found.</param>
            <returns>Returns <c>true</c> when the end point was reached.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ClearDirtyState">
            <summary>
            Reset the dirty state flag to inform the control that the current state is
            used as unchanged state.</summary>
            <remarks>This may result in removing the Undo history under some circumstances.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SetAuthentication(System.String,System.String)">
            <summary>
            Sets username and password for silent authentication on protected sites.
            </summary>
            <remarks>
            If these parameters are set the control tries to authenticate using these
            values if a site requests authentication. This in fact suppresses the 
            typical authentication dialog. After changing the values it is necessary to
            call LoadHtml or LoadUrl again.
            </remarks>
            <param name="userName">The username the control should send on request.</param>
            <param name="passWord">The password the control should send on request.</param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.UserAgent">
            <summary>
            User Agent string used to identify the control when browsing the web.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Proxy">
            <summary>
            Gets or sets the proxy used to support download beyond a proxy.
            </summary>
            <remarks>
            Set this property to <c>null</c> if no proxy is required. If the internal loader is being used the 
            proxy settings of IE or operating system are bypassed. Restrictive security settings may make 
            the operation fail, though.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnWebException(System.Net.WebException,System.String@)">
            <summary>
            Called if an exception occured during loading resources from web.
            </summary>
            <param name="ex"></param>
            <param name="url"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ClearAuthenticationCache">
            <overloads>There are two overloads of this method.</overloads>
            <summary>
            This method resets the current credentials applied to the control.
            </summary>
            <remarks>
            After successfull authentication to a secure site the control will reuse the 
            credentials on any further access. To avoid this and to re-force the authentication,
            a call to this method is applicable. Calling this method will not reset the
            username and password set with <see cref="M:GuruComponents.Netrix.HtmlEditor.SetAuthentication(System.String,System.String)">SetAuthentication</see>.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ClearAuthenticationCache(System.Boolean)">
            <summary>
            This method resets the current credentials applied to the control and remove the username and password.
            </summary>
            <remarks>
            After successfull authentication to a secure site the control will reuse the 
            credentials on any further access. To avoid this and to re-force the authentication,
            a call to this method is applicable. Calling this method will clear the
            username and password set with <see cref="M:GuruComponents.Netrix.HtmlEditor.SetAuthentication(System.String,System.String)">SetAuthentication</see>.
            Further calls to a protected site will always fail if no new username and password beeing set before.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SavePartialHtml(GuruComponents.Netrix.WebEditing.Elements.Element)">
            <summary>
            A helper method used to save uncomplete documents. If the host application
            needs the body content it is recommended to grab for the Body element and
            retrieve the InnerText or InnerHtml property.
            </summary>
            <param name="bodyElement"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetRawHtml">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Retrieves the HTML contained in control to a string and return it.
            </summary>
            <remarks>
            The content is unchanged "as is" the MSHTML control provides it. 
            <para>
            This method returns always the content of the base document. In case of a framed document this is the
            document containing the frameset definitions. The host application must use the HtmlFrameSet and 
            related objects to call the save methods there to save the content of each frame document separatly.
            </para>
            </remarks>
            <returns>The HTML in the control</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetRawHtml(System.Boolean)">
            <summary>
            Retrieves the HTML contained in control to a string and return it.
            </summary>
            <remarks>
            The content is unchanged "as is" the MSHTML control provides it. 
            <para>
            This method returns always the content of the base document. In case of a framed document this is the
            document containing the frameset definitions. The host application must use the HtmlFrameSet and 
            related objects to call the save methods there to save the content of each frame document separatly.
            </para>
            </remarks>
            <param name="ClearDirty">If set to true the call of this method will reset the <see cref="P:GuruComponents.Netrix.HtmlEditor.IsDirty">IsDirty</see> flag.</param>
            <returns>The HTML in the control</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetRawHtml(System.Boolean,System.Boolean)">
            <summary>
            Retrieves the HTML contained in control to a string and return it.
            </summary>
            <remarks>
            The content is unchanged "as is" the MSHTML control provides it. 
            <para>
            This method returns always the content of the base document. In case of a framed document this is the
            document containing the frameset definitions. The host application must use the HtmlFrameSet and 
            related objects to call the save methods there to save the content of each frame document separatly.
            </para>
            </remarks>
            <param name="ClearDirty">If set to true the call of this method will reset the <see cref="P:GuruComponents.Netrix.HtmlEditor.IsDirty">IsDirty</see> flag.</param>
            <param name="fromActiveFrame">If set to <c>true</c>, the currently active frame is the source, otherwise the frame definition document. This parameter is ignored, if the document has no frames.</param>
            <returns>The HTML in the control</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetFormattedHtml">
            <summary>
            Returns a well formatted representation of the current document.
            </summary>
            <remarks>Uses the default formatter, see <see cref="P:GuruComponents.Netrix.HtmlEditor.HtmlFormatterOptions"/>. This formatter is set to single space as indent
            char, 4 spaces indent size, 128 characters line length, and produces XHTML compliant code. Once the <see cref="P:GuruComponents.Netrix.HtmlEditor.HtmlFormatterOptions"/>
            property is set for the very first time the defaults are no longer valid and any further call will use the custom settings.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if either the indent size or max line length is less than 0.</exception>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetFormattedHtml(GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions)">
            <summary>
            Returns a well formatted representation of the current document.
            </summary>
            <param name="fo"><see cref="T:GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions"/> for formatting this streams content.</param>
            <exception cref="T:System.ArgumentException">Thrown if either the indent size or max line length is less than 0.</exception>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetFormattedHtml(GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions,System.Boolean)">
            <summary>
            Returns a well formatted representation of the current document.
            </summary>
            <param name="fo"><see cref="T:GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions"/> for formatting this streams content.</param>
            <param name="ClearDirty">Resets the dirty flag.</param>
            <exception cref="T:System.ArgumentException">Thrown if either the indent size or max line length is less than 0.</exception>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetFormattedHtml(GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions,System.Boolean,System.Boolean)">
            <summary>
            Returns a well formatted representation of the current document.
            </summary>
            <param name="fo">See <see cref="T:GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions"/> for formatting this streams content.</param>
            <param name="ClearDirty">If set to true the call of this method will reset the <see cref="P:GuruComponents.Netrix.HtmlEditor.IsDirty">IsDirty</see> flag.</param>
            <param name="fromActiveFrame">For framed documents loaded at once, this parameter can be used to get the content of the current (active) frame instead the base document.</param>
            <exception cref="T:System.ArgumentException">Thrown if either the indent size or max line length is less than 0.</exception>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveHtml(System.IO.Stream)">
            <summary>
            Saves the HTML contained in the control to a stream.
            </summary>
            <remarks>
            Throws an <exception cref="T:System.ArgumentNullException"/> if the parameter is <c>null</c>.
            Uses the global Encoding property for document encoding.
            </remarks>
            <param name="stream"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveFormattedHtml(System.IO.Stream,GuruComponents.Netrix.HtmlFormatting.IHtmlFormatterOptions)">
            <summary>
            Saves the HTML contained in the control to a stream.
            </summary>
            <remarks>
            Throws an <exception cref="T:System.ArgumentNullException"/> if the parameter is <c>null</c>.
            Uses the global Encoding property for document encoding.
            Another method uses the <see cref="M:GuruComponents.Netrix.HtmlEditor.GetRawHtml">GetRawHtml</see> or <see cref="M:GuruComponents.Netrix.HtmlEditor.GetFormattedHtml">GetFormattedHtml</see> 
            methods, which return content of the editor as string. It is up to the host application to use the common .NET file classes to save the content.
            The class <see cref="T:GuruComponents.Netrix.HtmlFormatting.HtmlFormatterOptions">HtmlFormatterOptions</see> provides a way to control the beautifier and formatter. The various properties are:
            <list type="bullet">
                <item>IndentChar</item>
                <item>IndentSize</item>
                <item>MaxLineLength</item>
                <item>AsXhtml</item>
                <item>ElementCasing</item>
                <item>AttributeCasing</item>
            </list>
            <para>
            Note: Both save methods throw an <see cref="T:System.ArgumentNullException">ArgumentNullException</see> if the stream parameter is null. If it is possible that the stream is null under some circumstances, we should put a try/catch block around the call.
            </para>
            <seealso cref="T:GuruComponents.Netrix.HtmlFormatting.HtmlFormatterOptions">HtmlFormatterOptions</seealso>
            </remarks>       
            <exception cref="T:System.ArgumentNullException">Fired if stream parameter is <c>null</c>.</exception>
            <example>
            Assuming a menu exists and a menu item fires a click event, the following event handler will save the content of the base document to file in well formatted XHTML compatible format.
            <code>
            private void menuItem_Click(object sender, System.EventArgs e)
            {
                // Build Formatting Options in variable fo here
                if (this.saveFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    string fileName = this.saveFileDialog1.FileName;
                    FileStream fs = new FileStream(fileName, FileMode.Create);
                    this.htmlEditor1.SaveFormattedHtml(fs, fo);
                    fs.Close();
                }
            }
            </code>
            </example> 
            <param name="stream"></param>
            <param name="fo"> for formatting this streams content.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveFormattedHtml(System.IO.Stream)">
            <summary>
            Saves the HTML contained in the control to a stream using the default formatter.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.HtmlFormatterOptions"/>
            <param name="stream"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveMht(System.String)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Saves the previously loaded content as MHTML stream.
            </summary>
            <remarks>
            If the file does not exist the method will create it. If the file exists the method will overwrite
            it. 
            <para>
            The main idea of the MHTML standard is that you send a HTML document, together with in-line graphics, 
            applets, etc., and also other linked documents if you so wish, in a MIME multipart/related body part.
            The content of the HTML part is coded in quoted printable format. The images and binary objects are
            coded in Base64, always chunked in segments to 76 characters per line.
            </para>
            <para>
            The IE can save and view MHTML. The preferred extension is MHT. NetRix works similiar to the basic
            MHTML save routine, but does not use the internal interfaces. 
            </para>
            <para>
            <b>Attention:</b> The method returns the content as it if was loaded the first time. ANY CHANGE DURING DESIGNTIME IS
            NOT RECOGNIZED. To save the current content the host application MUST save and reload the content AND
            wait for the next ReadyStateComplete event before this method can work properly.
            </para>
            <para>
            <b>Know  Issues:</b> This method is EXPERIMENTAL. It does not save frames properly and it does not handle
            local absolute paths correctly.
            </para>
            </remarks>
            <param name="fileName">The full path the content is saved into.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveMht(System.IO.Stream)">
            <summary>
            Saves the previously loaded content as MHTML stream.
            </summary>
            <remarks>
            If the file does not exist the method will create it. If the file exists the method will overwrite
            it. 
            <para>
            The main idea of the MHTML standard is that you send a HTML document, together with in-line graphics, 
            applets, etc., and also other linked documents if you so wish, in a MIME multipart/related body part.
            The content of the HTML part is coded in quoted printable format. The images and binary objects are
            coded in Base64, always chunked in segments to 76 characters per line.
            </para>
            <para>
            The IE can save and view MHTML. The preferred extension is MHT. NetRix works similiar to the basic
            MHTML save routine, but does not use the internal interfaces. 
            </para>
            <para>
            The method fails if the document is not ready yet.
            </para>
            <para>
            <b>Attention:</b> The method returns the content as it if was loaded the first time. ANY CHANGE DURING DESIGNTIME IS
            NOT RECOGNIZED. To save the current content the host application MUST save and reload the content AND
            wait for the next ReadyStateComplete event before this method can work properly.
            </para>
            <para>
            <b>Know  Issues:</b> This method is EXPERIMENTAL. It does not save frames properly and it does not handle
            local absolute paths correctly.
            </para>
            </remarks>
            <param name="fileStream">A stream (primarily a FileStream) to which the content is saved.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveMht">
            <summary>
            Saves the previously loaded content as MHTML string.
            </summary>
            <remarks>
            Be aware that the string contains the page and all embedded resources as one block of coded data.
            This is approximatly 33% more than the sum of all file sizes (due to the Base64 coding). A normal
            page can produce a huge string and the processing may take a while.
            <para>
            The main idea of the MHTML standard is that you send a HTML document, together with in-line graphics, 
            applets, etc., and also other linked documents if you so wish, in a MIME multipart/related body part.
            The content of the HTML part is coded in quoted printable format. The images and binary objects are
            coded in Base64, always chunked in segments to 76 characters per line.
            </para>
            <para>
            The IE can save and view MHTML. The preferred extension is MHT. NetRix works similiar to the basic
            MHTML save routine, but does not use the internal interfaces. 
            </para>
            <para>
            <b>Attention:</b> The method returns the content as it if was loaded the first time. ANY CHANGE DURING DESIGNTIME IS
            NOT RECOGNIZED. To save the current content the host application MUST save and reload the content AND
            wait for the next ReadyStateComplete event before this method can work properly.
            </para>
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.CanSaveMht"/>
            <returns>The string to which the content was written or <c>null</c>, if there is no content or the document is not ready.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.DocumentDom">
            <summary>
            Returns the DOM (document object model) of the current loaded document.
            </summary>
            <remarks>
            The property may return <c>null</c> (<c>Nothing</c> in Visual Basic) if the document is 
            either not ready or doesn't contain a HTML element.
            <para>
            After first call the reference to the object is being cached, so a direct and extensive access
            using this property does not cause a performance flaw. Any LoadXXX method will reset cache
            and the first subsequent call will recreate the new document structure. Changes to the
            document are reflected synchrounously.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetXmlDocument">
            <overloads/>
            <summary>
            Returns the current document as <see cref="T:System.Xml.XmlDocument"/> formatted object.
            </summary>
            <remarks>
            This method should be
            covered by a try/catch structure because it rethrows internal exceptions occuring during the parse process.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetXmlDocument(System.Boolean)">
            <overloads/>
            <summary>
            Returns the current document as <see cref="T:System.Xml.XmlDocument"/> formatted object.
            </summary>
            <remarks>
            This method should be
            covered by a try/catch structure because it rethrows internal exceptions occuring during the parse process.
            </remarks>
            <param name="AddXmlDeclaration">
            If <c>true</c> the module tries to add the &lt;?xml version="1.0" ?&gt; declaration in front of the document.
            </param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetXmlDocument(System.Boolean,System.Boolean)">
            <summary>
            Returns the current document as <see cref="T:System.Xml.XmlDocument"/> formatted object.
            </summary>
            <remarks>
            This method should be
            covered by a try/catch structure because it rethrows internal exceptions occuring during the parse process.
            </remarks>
            <param name="AddXmlDeclaration">
            If <c>true</c> the module tries to add the &lt;?xml version="1.0" ?&gt; declaration in front of the document.
            </param>
            <param name="fromActiveFrame"><c>True</c> if content is read from active frame, otherwise the content of the frame definition file is read.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ReLoadHtml(System.String)">
            <summary>
            This method replaces the content of the whole designer.
            </summary>
            <remarks>
            The relation to the previously loaded URL or filename is left untouched. The content is also
            beeing rewritten to the file and reloaded from that location. This assures that the paths to 
            relative embedded objects are still valid.
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.ReLoadHtml(System.String)">ReLoadHtml</seealso>
            </remarks>
            <param name="content">Content which replaces the current content</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ReLoadUrl(System.String,System.Boolean)">
            <overloads>This method has to overloads.</overloads>
            <summary>
            This method replaces the content of the whole designer.
            </summary>
            <remarks>
            This is the preferred methos to refresh the
            content. If the content was externally changed, it is necessary to save the content before the reload
            takes place. If saving is not done, the old content will replace all changes.
            <para>
            It is up to the host application to decide where to save the content. If the parameter <c>saveContent</c>
            is set to <c>true</c>, the component will save the content internally and overwrite the original file without
            further questions.
            </para>
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the path is not valid or not a file.</exception>
            <param name="content">Content which replaces the current content</param>
            <param name="saveContent">If <c>true</c>, the component will save the the current content to 
            file and reload from file then. If <c>false</c> the component will load the last not saved content from 
            the related URL. This means, that any unsaved content will be lost. There is no UNDO on this action available.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ReLoadUrl(System.Boolean)">
            <summary>
            This method simply refreshes the content to rebuild all relations, like linked stylesheets.
            </summary>
            <remarks>
            A call to this method can force the save operation on request. 
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.CreateHtmlContent(System.String)">
            <summary>
            If loading parts of HTML create a skeleton to get a full DOM.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.LoadFile(System.String)">
            <summary>
            Loads the content of a local file into the control.
            </summary>
            <remarks>
            This method is simply a wrapper for <see cref="M:GuruComponents.Netrix.HtmlEditor.LoadUrl(System.String)"/>. It checks the existence of the file on the local system
            and loads it if possible. 
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException">Fires this exception if the file was not found.</exception>
            <param name="fileName"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveFile">
            <summary>
            Saves the content as a file to the location the content was previously loaded from.
            </summary>
            <remarks>
            The method checks whether the file already exists and tries to create the file if it does not exist. The name of
            the <see cref="P:GuruComponents.Netrix.HtmlEditor.Url"/> method is used as a file name. If the path does not point to a filesystem with write 
            permissions an exception occurs.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveFile(System.String)">
            <summary>
            Save the current content into a file.
            </summary>
            <remarks>
            This method saves the "raw" content which consists of unformatted HTML. 
            This method requires Write access to the file. The file will be created if it doesn't exists.
            <para>
            The method checks whether the file already exists and tries to create the file if it does not exist. The name of
            the <see cref="P:GuruComponents.Netrix.HtmlEditor.Url"/> method is used as a file name. If the path does not point to a filesystem with write 
            permissions an exception occurs.
            </para>
            </remarks>
            <param name="fileName">The filename optionally including the full path.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.SaveFile(System.IO.Stream)">
            <summary>
            Saves the current "raw" content into a stream. The stream is not closed and remains open.
            </summary>
            <param name="stream">The stream the content is written into.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.LoadUrl(System.String)">
            <summary>
            Loads HTML content from a URL or local path.
            </summary>
            <remarks>
            This is the preferred load method. It can take HTML content from the following sources:
            <list type="bullet">
                <item>A locally stored file</item>
                <item>An URL, with the leading "http://" (required)</item>
            </list>
            The method will fire the <see cref="E:GuruComponents.Netrix.HtmlEditor.Loading">Loading</see> before
            the load process starts, but not when the URL or filename was not accepted. This can be used to check
            the processing, e.g. if the event does not fire the URL is wrong or the filename was not found. 
            If the processing is done the <see cref="E:GuruComponents.Netrix.HtmlEditor.Loaded">Loaded</see> event
            will fired. Remember that the next editing command MUST wait until the
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> was fired, which
            takes a bit more time used by the control to render and display of the content.
            <para>
            Use <see cref="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.String)">LoadHtml</see> to load memory based strings only.
            </para>
            <para>
            If MSHTML has not yet been created, the loading is postponed until MSHTML has been created.
            The method uses internally IMoniker to set the current base path to resolve relative paths
            in src and href attributes without changing the parameters.
            </para>
            </remarks>
            <example>
            The following example shows how to load a file into NetRix using a menu entry event handler. The
            code assumes that a main menu extists with a entry <c>menuItem</c> in it and a event handler
            <c>menuItem_Click</c> attached to the Click event.
            <code>
            private void menuItem_Click(object sender, System.EventArgs e)
            {
               if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
               {
                  string fileName = this.openFileDialog1.FileName;
                  if (File.Exists(fileName))
                  {
                     this.htmlEditor1.LoadUrl(this.openFileDialog1.FileName);
                  }
               }
            }
            </code>
            If is recommended to check whether the file exists. However, the method will not throw an exception
            but ignores the command, which makes it impossible to inform the user that the action fails. 
            <para>
            From build 1015 on the control accepts SSL protected connections too.
            </para>
            </example>
            <param name="url">URL (http://any.domain.com/file.html) or file (C:\whatever\path\file.html) to load from.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.RemoveTempFile">
            <summary>
            Delete temporarily used file. Called on each LoadHtml and finally with Dispose().
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.ResetDesiredProperties(System.Boolean)">
            <summary>
            Bring control back into virgin state.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.LoadDocx(System.String)">
            <summary>
            Load a docx document from given full path.
            </summary>
            <remarks>
            <para>
            Docx is being converted into HTML and loaded after transformation. The control does not write
            the document back as Docx. Instead, the converted and loaded HTML is being written back.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if filePath is null or empty.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if folder does not exists.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if file does not exists.</exception>
            <exception cref="T:System.Xml.XmlException">Cannot transform DOCX into HTML for some reason. See inner exception.</exception>
            <param name="filePath">The path and filename the file is loaded from.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.IO.FileStream)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Loads HTML content from a stream into this control.
            </summary>
            <remarks>
            It is recommended to use a <see cref="T:System.IO.FileStream">FileStream</see> for that procedure, because
            internally the name is extracted from the file name of the underlying stream. Otherwise any stream is
            possible which can be used with the <see cref="T:System.IO.StreamReader">StreamReader</see> class.
            The method will fire the <see cref="E:GuruComponents.Netrix.HtmlEditor.Loading">Loading</see> before
            the load process starts, but not when the URL or filename was not accepted. This can be used to check
            the processing, e.g. if the event does not fire the URL is wrong or the filename was not found. 
            If the processing is done the <see cref="E:GuruComponents.Netrix.HtmlEditor.Loaded">Loaded</see> event
            will fired. Remember that the next editing command MUST wait until the
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> was fired, which
            takes a bit more time used by the control to render and display of the content.
            <para>
            If MSHTML has not yet been created, the loading is postponed until MSHTML has been created.
            The method uses internally IMoniker to set the current base path to resolve relative paths
            in src and href attributes without changing the parameters.
            </para>
            </remarks>
            <param name="stream"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.String)">
            <summary>
            Loads HTML content from a string into this control.
            </summary>
            <remarks>
            If previously used stream or file load process was used the existing URL (e.g. the filename) remains.
            If in a previous operation was no name set the default name "localhost" was set. 
            The method will fire the <see cref="E:GuruComponents.Netrix.HtmlEditor.Loading">Loading</see> before
            the load process starts, but not when the URL or filename was not accepted. This can be used to check
            the processing, e.g. if the event does not fire the URL is wrong or the filename was not found. 
            If the processing is done the <see cref="E:GuruComponents.Netrix.HtmlEditor.Loaded">Loaded</see> event
            will fired. Remember that the next editing command MUST wait until the
            <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateComplete">ReadyStateComplete</see> was fired, which
            takes a bit more time used by the control to render and display of the content.
            <para>
            If MSHTML has not yet been created, the loading is postponed until MSHTML has been created.
            The method uses internally IMoniker to set the current base path to resolve relative paths
            in src and href attributes without changing the parameters.
            </para>
            <para>If content is empty or null, the procedure is passed but does nothing but firing the load events. 
            In that case old content might stay not be removed. Call <see cref="M:GuruComponents.Netrix.HtmlEditor.NewDocument"/> instead.</para>
            <para>This method will set the control into non file based mode, as there is no filename provided.</para>
            </remarks>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.NewDocument"/>
            <param name="content"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.String,System.String)">
            <summary>
            Loads the given content into the control using the given base url.
            </summary>
            <param name="content"></param>
            <param name="baseUrl"></param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.UseTempFile">
            <summary>
            The tempfile option has been removed is no longer available. Obsolete.
            </summary>
            <remarks>Property returns always <c>false</c>.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.InnerHtml">
            <summary>
            This property changes the content of the body. 
            </summary>
            <remarks>Its purpose is to support simple databindings.</remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.OuterHtml"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.InnerText">
            <summary>
            This property changes the content of the body and strips out all HTML tags.
            </summary>
            <remarks>
            This is for spellchecking and other basic text functions.
            <para>
            Setting this value will result in lost of all HTML based formatting, as the InnerText property
            internally strips out any HTML and does not preserve any formatting. Reading will not hurt
            the content.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ComplexContent">
            <summary>
            Disables the internal monikers to support very complex content.
            </summary>
            <remarks>
            The internal moniker procedure helps building MHT and deals with
            local files faster. This handling may fail if complex documents, like
            the one exported by PowerPoint or Word are loaded. 
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.OuterHtml">
            <summary>
            This property returns the document's content in raw (unformatted) format.
            </summary>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.GetRawHtml"/>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.InnerHtml"/>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.NewDocument">
            <summary>
            Creates a new document.
            </summary>
            <remarks>
            Used to reset the control into a neutral state.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Undo">
            <summary>
            Undo the last action.
            </summary>
            <remarks>
            The command does nothing if the <see cref="P:GuruComponents.Netrix.HtmlEditor.CanUndo"/> property returns false.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Redo">
            <summary>
            Redo the last operation or - in case of a batched operation - the whole batch.
            </summary>
            <remarks>
            The command does nothing if the <see cref="P:GuruComponents.Netrix.HtmlEditor.CanRedo"/> property returns false.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetUndoManager(System.String)">
            <summary>
            Gets a new, opened undo manager. 
            </summary>
            <remarks>
            Until the <see cref="M:GuruComponents.Netrix.WebEditing.UndoRedo.IUndoStack.Close">Close</see> method is called all
            following operations become part of one single undo step.
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.NextOperationAdded"/>
            <param name="Name">Provide a specific name to distinguish this manager instance from other parallel opened ones.</param>
            <returns>The undo stack, that contains all current undo steps the undo manager currently helds.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetUndoManager">
            <summary>
            Gets the default, internally used undo manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OpenBatchUndo(System.String)">
            <summary>
            Opens a new Undo section in the UndoManager.
            </summary>
            <param name="description">used to handle nested undo processes</param>
            <returns>The undo object. Provides a Close method to finish the undo section.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnNextOperationAdded(GuruComponents.Netrix.WebEditing.UndoRedo.UndoEventArgs)">
            <summary>
            Called if the undo manager adds a new undo unit to the current stack.
            </summary>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.GetUndoManager"/>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetRedoManager(System.String)">
            <summary>
            Gets a new, already opened redo manager. 
            </summary>
            <remarks>
            Until the <see cref="M:GuruComponents.Netrix.WebEditing.UndoRedo.IUndoStack.Close">Close</see> method is called all
            following operations become part of one single redo step.
            <para>
            The host application should assure that only operations become part of the redo stack which can be 
            reliable "redone" in any situation. It is not recommended to use this in conjunction with table operations.
            </para>
            <para>If the name parameter is empty the method returns the current internal undo stack.</para>
            <para>Redo steps are not being notified.</para>
            </remarks>
            <param name="description">Provide a specific name to distinguish this manager instance from other parallel opened ones.</param>
            <returns>Returns an object which provides the method and properties to control the redo manager.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InternalUndoStack(System.String)">
            <summary>
            Opens a new Undo section in the UndoManager.
            </summary>
            <param name="description">Provide a specific name to distinguish this manager instance from other parallel opened ones.</param>
            <returns>The undo object. Provides a Close method to finish the undo section.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnBeforeResourceLoad(GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs)">
            <summary>
            Calls a handler with which the host application can decide, where the resource is really loaded from.
            </summary>
            <param name="e">URL of resource. The handler may change the URL in the event arguments to change the behavior.</param>
            <returns><c>True</c>, if the resource should still be loaded. <c>False</c>, if the resource should never load.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnShowContextMenu(GuruComponents.Netrix.Events.ShowContextMenuEventArgs)">
            <summary>
            Fire internal context menu, if assigned AND external event handler, if
            used.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InvokeExternalHtmlElementChanged(System.ComponentModel.IComponent,GuruComponents.Netrix.Events.HtmlElementChangedType)">
            <summary>
            Called from plug-ins using reflection. DO NOT USE IN PUBLIC CODE!
            </summary>
            <remarks>
            This methods supports the infrastructure and should not called from user code.
            </remarks>
            <param name="element"></param>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnUpdateUI(System.String)">
            <summary>
            Calls the event handler for UpdateUI.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnToolItemClicked(System.Object,GuruComponents.Netrix.Events.ToolClickedCancelEventArgs)">
            <summary>
            Called if the toolstrips are active and user clicked a tool.
            </summary>
            <remarks>
            Event is being fired before any internal action to allow the host application to stop or skip internal operations.
            </remarks>
            <param name="sender">Toolstrip which causes the event.</param>
            <param name="e">Parameter contains information about clicked tool.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InvokeExternalHtmlEvent(System.String,System.Web.UI.Control,GuruComponents.Netrix.ComInterop.Interop.IHTMLEventObj)">
            <summary>
            This method supports the NETRIX infrastructure and is not intended being called from host application directly.
            </summary>
            <remarks>
            Called from plug-ins using Reflection only. To force any of the events override the appropriate "Onxxx" method
            to invoke own event methods.
            </remarks>
            <param name="eventType">Event type.</param>
            <param name="element">Element that causes the event.</param>
            <param name="eventObj">Native (COM) event object.</param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.EventManager">
            <summary>
            Allows the management of events on element level.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.EventBinding">
            <summary>
            Gets access to the event binding service.
            </summary>
            <remarks>
            Provides a service for registering event handlers for component events. This allows implementers
            to show events in the PropertyGrid's and attach tasks as events of EventBindingService.
            <example>
            To show the event tab in PropertyGrid attach the Site of the current component and refresh the tabs:
            <code>
            propertyGrid1.SelectedObject = e.CurrentElement;
            IComponent c = ((IComponent)e.CurrentElement);
            this.propertyGrid1.Site = c.Site;
            this.propertyGrid1.RefreshTabs(PropertyTabScope.Component);
            </code>
            This code assumes to be within an event handler which provides the event argument <c>e</c>. 
            From main control you can access the EventBinding events:
            
            </example>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.UIBinding">
            <summary>
            Binding to the user interface service.
            </summary>
            <remarks>
            The purpose is to have total control over the way designer aware components, like the
            PropertyGrid, operate and interact with the control and elements. This allows you to
            add component editors, catch internal errors thrown by the PropertyGrid, add styles
            or show private dialogs instead of the common one for collection editors or other internally
            invoked dialogs.
            <para>
            Several events can be used to interact with the service.
            </para>
            <seealso cref="T:GuruComponents.Netrix.Designer.UIService">UIService</seealso>
            <seealso cref="T:GuruComponents.Netrix.Designer.IUIService">IUIService (Netrix' implementation)</seealso>
            <seealso cref="T:System.Windows.Forms.Design.IUIService">IUIService (System's implementation)</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Focus">
            <summary>
            Set the focus to the control.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.Focused">
            <summary>
            Informs whether the control has the focus.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.StopFocusOnLoad">
            <summary>
            If set to <c>true</c> the focus will not set on load.
            </summary>
            <remarks>
            The default behavior of the focus will set the focus on the control and
            activates the caret after loading a document or HTML. This property suppresses
            this behavior if set.
            <para>
            It is important to set (or let) this property to <c>false</c>, if content is loaded, which
            has client side scripts in it or which has forms where the user can enter values. If the
            document cannot receive the focus, the user cannot enter anything, the content is totally
            blocked. 
            </para>
            The intention of this property is to allow the subsequential re-loading of the content using
            <see cref="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.String)">LoadHtml</see> whereas the user enters data into another control on the form. If, under
            any circumstances, the user is allows to enter anything or copy anything from the control, the
            property must turned off (set to <c>false</c> again.
            <para>
            This property was introduced in the second edition of the 1016 Build, June 8, 2004. The normal
            behavior was not changed if the property is not set explicitly and the control runs in design
            mode. In browse mode the control runs with getting the focus, unless this property is
            explicitly set.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.TransposeEnterBehavior">
            <summary>
            Exchanges the behavior of Enter key. If active, Enter inserts BR instead of P.
            </summary>
            <remarks>
            This method allows the editor to behave differently if the user hits the Enter key.
            By default, enter inserts a new paragraph. If this property is <c>true</c>, the Enter key will
            insert a break (BR tag). The opposite insertion method, Shft-Enter, will insert a paragraph.
            The type of paragraph depends on the the current <see cref="P:GuruComponents.Netrix.HtmlEditor.BlockDefault"/> setting.
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.BlockDefault"/>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.PanelGotFocus(System.EventArgs)">
            <summary>
            On focus, we have to also return focus to MSHTML.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnReadyStateComplete(System.EventArgs)">
            <summary>
            Called when the control has just become ready.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ChangeManager">
            <summary>
            Allows access to the change monitor.
            </summary>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.ContentChanged"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.IsFileBasedDocument">
            <summary>
            Determines that the document is loaded from and saved into a file.
            </summary>
            <remarks>
            This property is set automatically if the document is loaded from an URL or file
            using the <see cref="M:GuruComponents.Netrix.HtmlEditor.LoadUrl(System.String)"/> methods. If the <see cref="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.String)">LoadHtml</see> methods are
            used, the host application can determine how the load/save process works. To
            work with files the property is set to <c>true</c>. This is the default value.
            To work without any file relation, the property should set to <c>false</c>, before
            issuing a <see cref="M:GuruComponents.Netrix.HtmlEditor.LoadHtml(System.String)">LoadHtml</see> method to load content.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnReadyStateChanged(System.String)">
            <summary>
            We check the ready state and fire the complete event if the incoming event is "complete".
            </summary>
            <remarks>
            Before the
            native complete event is fired the universal <see cref="E:GuruComponents.Netrix.HtmlEditor.ReadyStateChanged"/>
            event is fired.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.Dispose(System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.OnFrameActivated(GuruComponents.Netrix.Events.FrameEventArgs)">
            <summary>
            Called if a frame becomes the active frame in a frameset.
            </summary>
            <param name="e">Argument which has information about the frame.</param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.RegisteredPlugIns">
            <summary>
            Gives direct access to the list of registered plug-ins.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.RegisterPlugIn(GuruComponents.Netrix.PlugIns.IPlugIn)">
            <summary>
            Plugins can call this method to register itself as callback for certain functions.
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument <paramref name="plugin"/> must not be <c>null</c>.</exception>
            <param name="plugin">The Plugin object which user wish to register.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.AddCommand(GuruComponents.Netrix.Designer.CommandWrapper)">
            <summary>
            Adds an externally provided command to the list of available menu commands.
            </summary>
            <param name="wrapper">The command object, which provides callback information.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.RegisterNamespace(System.String,System.String,System.Type)">
            <summary>
            Registers a namespace alias for the namespace manager.
            </summary>
            <remarks>
            The purpose of this method is to add a namespace of elements, for which any plug-in
            is available that provides design and formatter information. 
            </remarks>
            <param name="alias">The alias of the namespace, like "asp" for ASP.NET controls.</param>
            <param name="namespaceName">URN of namespace</param>
            <param name="behavior">The type of behavior the namespace manager uses to resolve elements for rendering. Must inherit from IBaseBehavior.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.RegisterNamespace(System.String,System.Type)">
            <summary>
            Registers a namespace alias for the namespace manager.
            </summary>
            <remarks>
            The purpose of this method is to add a namespace of elements, for which any plug-in
            is available that provides design and formatter information. 
            </remarks>
            <param name="alias">The alias of the namespace, like "asp" for ASP.NET controls.</param>
            <param name="behavior">The type of behavior the namespace manager uses to resolve elements for rendering. Must inherit from IBaseBehavior.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetRegisteredNamespaces">
            <summary>
            Returns the list of registered namespaces as dictionary with alias:ns pairs.
            </summary>
            <returns>A list of registered namespaces as dictionary with alias:ns pairs</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.RegisterElement(GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo,System.Type)">
            <summary>
            Registers an element for internal processing.
            </summary>
            <remarks>
            The type class must have a public constructor which must accept exact one parameter of
            type <see cref="T:GuruComponents.Netrix.ComInterop.Interop.IHTMLElement">IHTMLElement</see>.
            Once the element is registered, the control tries to get the constructor, instantiate an
            object and return the object to the caller. Some of the events the control fires use these
            generic object creation to expose native element objects to the host application.
            <para>
            To obtain the <see cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo">ITagInfo</see>
            object instantiate it using the <see cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.TagInfo">TagInfo</see> class or
            any class which implements <see cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo">ITagInfo</see>.
            When creating an <see cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo">ITagInfo</see> object for
            elements which resides in a specific namespace, one must include the namespace alias which
            registered whithin the control. The namespace must have been registered before the first element is added.
            </para>
            <para>
            The type the element object is created from must implement <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</see>.
            </para>
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.RegisterNamespace(System.String,System.Type)">RegisterNamespace</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement"/>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.Element"/>
            <seealso cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.ITagInfo"/>
            <seealso cref="T:GuruComponents.Netrix.HtmlFormatting.Elements.TagInfo"/>
            </remarks>
            <param name="tagInfo">The formatting information.</param>
            <param name="elementType">The type of element.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.GetRegisteredNamespaceParent(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            Try to find the next parent element in the hierarchy which belongs to one of the registered namespaces.
            </summary>
            <remarks>
            This method is used to redirect base events from viewlink elements to its parents. The pre event handler can
            call this method to see any parents and stop firing base events. Then the event chain is redirected to the
            plugged designers, which in turn re-fire the base events.
            </remarks>
            <returns>The generic parent element, if one exists, or <c>null</c> in case of failure.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlEditor.InvokeCommand(System.ComponentModel.Design.CommandID)">
            <summary>
            Invoke a command with the specific Command ID.
            </summary>
            <remarks>
            Plug-Ins can extend the list of available commands at any time and use this method to
            issue their own (or any other registered command).
            <seealso cref="M:GuruComponents.Netrix.HtmlEditor.AddCommand(GuruComponents.Netrix.Designer.CommandWrapper)"/>
            </remarks>
            <param name="id">The ID of any internal or externally registered command.</param>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.HtmlEditorSite">
            <summary>
            Provides access for sited components.
            </summary>
            <remarks>
            In case you work with a complete design time environment, including usage of PropertyGrid and services,
            the design time code needs access to the internal services the NetRix component provides. HtmlEditorSite
            gives that access by offering its own ISite implementation.
            <para>
            This is important, if you use the PropertyGrid to create new objects. For instance, if you have a
            &lt;select&gt; element and wish to add &lt;option&gt; elements, these elements need a reference to the
            underlying editor. The internal service is aware of this and the design time host is supposed to use these
            services as well. 
            </para>
            <example>
            The following examples assumes you have a PropertyGrid and HtmlEditor component on a form:
            <code>
            private void htmlEditor_HtmlElementChanged(object sender, HtmlElementChangedEventArgs e)
            {            
                this.propertyGrid1.Site = htmlEditor.HtmlEditorSite; // comment out and ctor calls will fail!
                this.propertyGrid1.SelectedObject = e.CurrentElement;
            }
            </code>
            This assignes the internal Site to the PropertyGrid. And the grid will call the appropriate services, then.
            </example>
            <para>
            Internally NetRix Pro provides a fully developed design time environment, which is responsible for all 
            particular needs the HTML elements may have. Even if public constructors exists the call must match specific
            conditions to have valid references between the element and the editor.
            </para>
            <para>
            In case you don't use the PropertyGrid you can cast <c>HtmlEditorSite</c> to <c>ISite</c> and use 
            <c>GetService</c> to create elements within an design time environment. For instance, IDesignerHost ist
            available to create elements.
            </para>
            </remarks>
            <seealso cref="T:GuruComponents.Netrix.Designer.DesignerHost"/>
            <seealso cref="T:GuruComponents.Netrix.Designer.DesignSite"/>
            <seealso cref="T:GuruComponents.Netrix.Designer.CommandService"/>
            <seealso cref="T:GuruComponents.Netrix.Designer.UIService"/>
            <seealso cref="T:GuruComponents.Netrix.Events.HtmlElementChangedEventArgs"/>
            <seealso cref="E:GuruComponents.Netrix.HtmlEditor.HtmlElementChanged"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ServiceProvider">
            <summary>
            Gets the service provide for all internal and private services.
            </summary>
            <remarks>
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.HtmlEditor.HtmlEditorSite"/>
            <seealso cref="T:System.ComponentModel.Design.ServiceContainer"/>
            <seealso cref="T:GuruComponents.Netrix.NetrixServiceProvider"/>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlEditor.PropertyChanged">
            <summary>
            Event raised when a property is changed on the component.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ShowVerticalRuler">
            <summary>
            Shows the vertical ruler. Off by default.
            </summary>
            <remarks>
            The property <see cref="P:GuruComponents.Netrix.HtmlEditor.VerticalRuler"/> returns the ruler object and allows
            setting several properties at design and run time.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ShowHorizontalRuler">
            <summary>
            Shows the horizontal ruler. Off by default.
            </summary>
            <remarks>
            The property <see cref="P:GuruComponents.Netrix.HtmlEditor.HorizontalRuler"/> returns the ruler object and allows
            setting several properties at design and run time.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ToolbarVisible">
            <summary>
            Makes all toolbars visible or hides them.
            </summary>
            <remarks>
            This property controls all toolbars, whether they are integrated in the base control
            or provided by a plug-in.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.MenuStripVisible">
            <summary>
            Makes all main menustrip visible or hides it.
            </summary>
            <remarks>
            By default the menustrip is hidden.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.StatusStripVisible">
            <summary>
            Makes all statusstrip visible or hides it.
            </summary>
            <remarks>
            By default the statusstrip is hidden. The statusstrip has no integrated features
            and appears empty. See <see cref="P:GuruComponents.Netrix.HtmlEditor.StatusStrip"/> property to get the statusstrip
            object and set properties and panes at design or runtime.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.VerticalRuler">
            <summary>
            Returns the vertical ruler object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.HorizontalRuler">
            <summary>
            Returns the horizontal ruler object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.MenuStrip">
            <summary>
            Returns the main menustrip object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.StatusStrip">
            <summary>
            Returns the statusstrip object.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlEditor.ToolStripContainer">
            <summary>
            Returns the toolstrip container to allow access to whole UI.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.ElementFactory">
            <summary>
            This class wraps internal element objects into native one.
            </summary>
            <remarks>
            This class is widely used internally to wrap the COM interface related element objects directly
            into .NET native objects. The class provides an object cache, which helds all previously created 
            instances. The method <see cref="M:GuruComponents.Netrix.ElementFactory.CreateElement(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">CreateElement</see>
            will call the <c>internal</c> constructor of each element class to instantiate the object.
            <para>
            Under normal circumstances a direct call to this classe is not appropriate. However, plug-ins may use
            the class to add there element types to the list of recognizable ones.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.ElementFactory.ResetElementCache">
            <summary>
            Clears the cache
            </summary>
            <remarks>
            Subsequent access to cleared elements leads to immediate recreation. However, attached
            event handlers and delegate methods get orphaned.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.ElementFactory.RegisterElement(System.String,System.Type)">
            <summary>
            Let plug-ins register their element classes to make the control ready
            to handle non-HTML elements internally.
            </summary>
            <remarks>
            The element is recognized by alias and name, divided by colon (asp:button, html:img). The basic
            HTML elements have the alias html, even if the document loaded is not XHTML conform. For
            a HTML comment the name is "!" without an alias. Plug-Ins may define different name schemas.
            </remarks>
            <seealso cref="M:GuruComponents.Netrix.ElementFactory.UnRegisterElement(System.String)"/>
            <param name="elementName">Name of element being registered, including the alias (see remarks).</param>
            <param name="elementType">The type defined in an assembly, which is part of the app domain.</param>
        </member>
        <member name="M:GuruComponents.Netrix.ElementFactory.UnRegisterElement(System.String)">
            <summary>
            Removes an element from the list of registered types.
            </summary>
            <remarks>
            The element is recognized by alias and name, divided by colon (asp:button, html:img). The basic
            HTML elements have the alias html, even if the document loaded is not XHTML conform. For
            a HTML comment the name is "!" without an alias. Plug-Ins may define different name schemas.
            </remarks>
            <seealso cref="M:GuruComponents.Netrix.ElementFactory.RegisterElement(System.String,System.Type)"/>
            <param name="elementName">The name of the element type, including the alias (see remarks).</param>
        </member>
        <member name="M:GuruComponents.Netrix.ElementFactory.BuildElements">
            <summary>
            Build elements look up table for HTML elements.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.ElementFactory.CreateElement(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            Makes a association between an element and a native element class.
            </summary><remarks>
            In case of an already created object the object is returned instead of creating a new one.
            This class returns <see cref="T:System.Web.UI.Control">Control</see>, but all element classes internally
            used are using IElement, too. So in any case an internal HTML element object is being retrieved, it's
            possible to cast to IElement instead. In case of a plug-in this is not required, because plug-ins may handle
            their elements differently and such a cast is not appropriate. Consult the documentation of the plug-in to
            understand the requirements for object handling.
            </remarks>
            <param name="el">The element for that a native object is needed.</param>
            <returns>System.Web.UI.Control if creating or retrieving was successful, otherwise <c>null</c>. The caller is responsible to cast to the right class type.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.Helper.GetElementName(GuruComponents.Netrix.ComInterop.Interop.ELEMENT_TAG_ID)">
            <summary>
            Returns the tagname for an element from a given element id.
            </summary>
            <param name="tagID">Element id</param>
            <returns>tagname without angle brackets.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.FrameEvents">
            <summary>
            Handle events on frame windows and optional on frame's document level.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.ToolClickedCancelEventHandler">
            <summary>
            Supports cancellable tool item click events.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.ToolClickedCancelEventArgs">
            <summary>
            Supports cancellable tool item click events.
            </summary>
            <remarks>
            This class allows to cancel the internal processing of tool operations.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Events.ToolClickedCancelEventArgs.#ctor(System.Windows.Forms.ToolStripItem)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="clickedItem"></param>
        </member>
        <member name="P:GuruComponents.Netrix.Events.ToolClickedCancelEventArgs.ClickedItem">
            <summary>
            Gets the item that was clicked on the System.Windows.Forms.ToolStrip.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Events.ToolClickedCancelEventArgs.ToolName">
            <summary>
            Returns the internal name of the tool, e.g. "Open" for the Open tool.
            </summary>
            <remarks>
            Tools which do not have any clickable action, like parents or separators, may return an empty string.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.Events.EventBinding">
            <summary>
            This class provides simplified access to the event binding management.
            </summary>
            <remarks>
            If one is using the PropertyGrid to display properties and events, especially to create some
            kind of event driven editor, this class allows a finer grained control of the EventBinding behavior.
            
            <seealso cref="T:GuruComponents.Netrix.Events.EventManager"/>
            <seealso cref="T:GuruComponents.Netrix.Designer.EventBindingService">EventBindingService</seealso>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.EventBinding.EventDisplay">
            <summary>
            Controls which events has to be displayed.
            </summary>
            <remarks>
            This property refers to the list of events available in the PropertyGrid once the events tab is shown.
            The list is build once the component is assigned to the PropertyGrid. The current value of this property
            controls the list, but subsequent changes of the property will not refresh the list.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.Events.EventBinding.ShowCodeRequest">
            <summary>
            The user has double clicked the event name field in PropertyGrid and the editor is supposed to
            open the editor view and navigate to the handler code.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Events.EventBinding.CreateUniqueNameRequest">
            <summary>
            The user has double clicked the event name and before showing the code a unique name for the
            new event handler is required. If a name exists, this event did not fire again.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Events.EventBinding.GetCompatibleMethodsRequest">
            <summary>
            The user has clicked on the dropdown icon in PropertyGrid and expects to see a list of
            compatible methods (e.g. methods with the same signature).
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Events.EventBinding.EventSetValueRequest">
            <summary>
            The PropertyGrid is up to set a new value, because the user has entered a new string. The editor
            is supposed to change the corresponding code.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Events.EventBinding.EventGetValueRequest">
            <summary>
            The PropertyGrid whishes to show the current values and the host is supposed to show the
            corresponding value.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.Events.EventBinding.EventResetValueRequest">
            <summary>
            The value is getting reset and the handler informs the host to reset corresponding code accordingly.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Events.EventBinding.GetInstance(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            
            </summary>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.Events.BeforeNavigateEventArgs">
            <summary>
            This class defines data for the <see cref="E:GuruComponents.Netrix.HtmlEditor.BeforeNavigate">BeforeNavigate</see> event.
            </summary>
            <remarks>
            This class allows to cancel the navigation by setting the cancel property to <c>true</c>.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeNavigateEventArgs.Url">
            <summary>
            The Url passed to the event.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeNavigateEventArgs.UrlEncoded">
            <summary>
            The Url passed to the event, encoded.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeNavigateEventArgs.UrlTranslated">
            <summary>
            Set the translated version of the Url.
            </summary>
            <remarks>
            NetRix will load the source from the translated Url, 
            if the host application changes the value. This will be ignored if cancel is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.Events.BeforeNavigateEventHandler">
            <summary>
            Fired if the control requests a new URL internally.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.BeforeReplaceEventArgs">
            <summary>
            This class defines data for the <see cref="E:GuruComponents.Netrix.HtmlEditor.BeforeReplace">BeforeReplace</see> event.
            </summary>
            <remarks>
            This class allows cancellation of replacement by setting the <see cref="P:GuruComponents.Netrix.Events.BeforeReplaceEventArgs.Result"/> property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeReplaceEventArgs.Result">
            <summary>
            Sets the result of the handler.
            </summary>
            <remarks>
             The various fields of the <see cref="T:System.Windows.Forms.DialogResult">DialogResult</see> enumeration have the following meaning:
            <list type="bullet">
            <item><term>Yes</term><description>Replace</description></item>
            <item><term>OK</term><description>Replace</description></item>
            <item><term>None</term><description>End method and stop all replacements (e.g. Cancel)</description></item>
            <item><term>Cancel</term><description>End method and stop all replacements (e.g. Cancel)</description></item>
            <item><term>Abort</term><description>End method and stop all replacements (e.g. Cancel)</description></item>
            <item><term>No</term><description>Skip this (current) replacement, but continue.</description></item>
            <item><term>Ignore</term><description>Skip this (current) replacement, but continue.</description></item>
            <item><term>Retry</term><description>Start replacement at the beginning. (Helpful after some words were skipped)</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeReplaceEventArgs.Counter">
            <summary>
            Returns the word counter result.
            </summary>                      
            <remarks>
            The number of words the <see cref="M:GuruComponents.Netrix.HtmlEditor.Replace(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">Replace</see> method has
            already replace or is about to replace, if the next action is allowed. The counter increases before the
            next word is replaced, but after the word is selected for replacement.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.Events.BeforeReplaceEventHandler">
            <summary>
            Fired if the control requests the next token for replacement.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs">
             <summary>
             This class defines data for the <see cref="E:GuruComponents.Netrix.HtmlEditor.BeforeResourceLoad">BeforeResourceLoad</see> event.
             </summary>
             <remarks>
             This class allows to cancel the loading by setting the cancel property to <c>true</c>. It also allows to change
             the resource on-the-fly by either providing another URL or a stream. Cancelling the event will suppress both, 
             stream and URL.
             <para>
             It also allows the loader to get the content from a stream instead of a file or URL, if the stream property
             is set to anything but <c>null</c> (<c>Nothing</c> in Visual Basic). <br/>
             </para>
             <example>
             Typically, an event handler reading a stream instead a file could look like this example. It assumes that the
             image src attribute provides a database id (a number) and the file is read into a memory stream to simulate the
             database access easily.
             <para>
             In a real life application one would use something like this: <c>MemoryStream ms = GetBlobFromDB(result);</c>.
             </para>
             <code>
             private void htmlEditor1_BeforeResourceLoad(object sender, GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs e)
            {
                int result = -1;
                string file = Path.GetFileNameWithoutExtension(e.Url);
                string path = Path.GetDirectoryName(Application.ExecutablePath);
                // got a number?
                if (Int32.TryParse(file, out result))
                {
                    // just to simulate DB Blob and assure it's a not a file
                    MemoryStream ms = new MemoryStream();
                    FileStream fs = new FileStream(String.Format("{1}{2}{0}.jpg", result, path, Path.DirectorySeparatorChar), FileMode.Open);
                    byte[] buffer = new byte[fs.Length];
                    fs.Seek(0, SeekOrigin.Begin);
                    fs.Read(buffer, 0, buffer.Length);
                    fs.Close();
                    ms.Write(buffer, 0, buffer.Length);
                    // return a stream instead a URL
                    e.ResourceStream = ms;
                }
            }
             </code>
             <seealso cref="P:GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs.ResourceStream"/>
             </example>
             </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs.TimeOut">
            <summary>
            Set timeout used for this request.
            </summary>
            <remarks>
            Use this to reduce timeout for adserver and similar calls which are not
            required to be completely resolved.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs.Url">
            <summary>
            The Url passed to the event.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs.UrlEncoded">
            <summary>
            The Url passed to the event, encoded.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs.UrlTranslated">
            <summary>
            Sets the translated version of the Url.
            </summary>
            <remarks>
            NetRix will load the source from the translated Url, 
            if the host application changes the value. This will be ignored if cancel is set to <c>true</c>.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.BeforeResourceLoadEventArgs.ResourceStream">
            <summary>
            Resource stream used instead of the content of the URL.
            </summary>
            <remarks>
            Within the event handler one might set the property to a stream and the loader will
            read the stream instead the URL. Set to <c>null</c> (<c>Nothing</c> in VB.NET) to assure the URL
            is read. This property is usually used to replace the content of objects like images from
            datasources other than files, for instance, accessing a database blob instead. 
            <para>
            The stream is read from position 0 regardless the current pointer position.
            The stream is not closed but the position remains on the last byte after reading (this behavior
            is like the regular Read method call is behaving).
            </para>
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.Events.BeforeResourceLoadEventHandler">
            <summary>
            Fired if the control requests resource which is embedded within the document.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.HtmlEventTypeEnum">
            <summary>
            Provides information about why an element change event happens.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Events.HtmlEventTypeEnum.Click">
            <summary>
            Mouse click
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Events.HtmlEventTypeEnum.KeyPress">
            <summary>
            Any key event.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Events.HtmlEventTypeEnum.Selection">
            <summary>
            Mouse move or drop operation happens in conjunction with a selection process.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Events.HtmlEventTypeEnum.FocusIn">
            <summary>
            Caret moved into element boundaries.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Events.HtmlEventTypeEnum.FocusOut">
            <summary>
            Caret moved from element.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Events.HtmlEventTypeEnum.Inserted">
            <summary>
            Element was inserted.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.Events.HtmlEventTypeEnum.Unknown">
            <summary>
            Any other situation (there is no definition when this happens).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.DocumentOnPropertyGridHandler">
            <summary>
            This delegate will fire an attached event handler if the user clicks on the property button
            on an external PropertyGrid. Without a PropertyGrid the underlying event does nothing.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.GetResourceEventArgs">
            <summary>
            This class defines data for the GetResource event.
            </summary>
            <remarks>
            THIS CLASS IS EXPERIMENTAL AND IS SUBJECT TO CHANGE IN LATER VERSIONS WITHOUT FURTHER NOTICE.
            <para>
            DO NOT USE IN CUSTOM CODE!
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.Events.GetResourceEventArgs.Url">
            <summary>
            The Url from which the resource should be retrieved
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Events.GetResourceEventArgs.UrlEncoded">
            <summary>
            The Url passed to the event, encoded.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.Events.GetResourceEventArgs.NativeContent">
            <summary>
            The content which is loaded as the embedded resource.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Events.GetResourceEventHandler">
            <summary>
            Fired if the control requests a embedded resource, e.g. an image or object.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.HtmlDocument">
            <summary>
            HtmlDocument contains base functions to deal with the whole document.</summary>
            <remarks>
            The class contains the most of the insert methods,
            creating and wrapping elements and some methods to check whether or not an element can be inserted.
            This class cannot be instantiated directly. You must use the 
            <see cref="P:GuruComponents.Netrix.HtmlEditor.Document">Document</see> property instead to return
            a singleton instance of the class. The HtmlEditor component can only have one document class
            at the time.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanInsertButton">
            <summary>
            Indicates if a button can be inserted.</summary>
            <remarks>It is recommended to use this property to setup toolbars
            or activate/deactivate menus according to the current state of the caret.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanInsertListBox">
            <summary>
            Indicates if a listbox can be inserted. 
            </summary>
            <remarks>
            It is recommended to use this property to setup toolbars
            or activate/deactivate menus according to the current state of the caret.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanInsertHtml">
            <summary>
            Indicates if HTML can be inserted.
            </summary>
            <remarks>
            It is recommended to use this property to setup toolbars
            or activate/deactivate menus according to the current state of the caret.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanInsertHyperlink">
            <summary>
            Indicates if an hyperlink can be inserted.
            </summary>
            <remarks>
            It is recommended to use this property to setup toolbars
            or activate/deactivate menus according to the current state of the caret.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanInsertRadioButton">
            <summary>
            Indicates if a radio button can be inserted.
            </summary>
            <remarks>
            It is recommended to use this property to setup toolbars
            or activate/deactivate menus according to the current state of the caret.
            </remarks>  
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanInsertTextArea">
            <summary>
            Indicates if a text area can be inserted.
            </summary>
            <remarks>
            It is recommended to use this property to setup toolbars
            or activate/deactivate menus according to the current state of the caret.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanInsertTextBox">
            <summary>
            Indicates if a textbox can be inserted.
            </summary>
            <remarks>
            It is recommended to use this property to setup toolbars
            or activate/deactivate menus according to the current state of the caret.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.Selection">
            <summary>
            The current selection in the editor.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.ActiveElement">
            <summary>
            Returns the currently active element.</summary>
            <remarks>
            This is the selected element, if a selection was made. This property is only useful if
            the editor is in absolute positioning mode and the user is able to made element
            selections. It does not refer to text selections.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.ReleaseCapture">
            <summary>
            Removes mouse capture from the object in the current document.
            </summary>
            <remarks>
            For ReleaseCapture to have an effect, you must set mouse capture through the 
            <see cref="M:GuruComponents.Netrix.WebEditing.Elements.IExtendedProperties.SetCapture(System.Boolean)">SetCapture</see> method
            to any of the elements in the document one can capture.
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</seealso>
            <seealso cref="T:GuruComponents.Netrix.WebEditing.Elements.Element">Element</seealso>
            <seealso cref="M:GuruComponents.Netrix.WebEditing.Elements.IExtendedProperties.ReleaseCapture">ReleaseCapture</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.SetActiveElement(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <overloads>Force setting active element. There are three overloads.</overloads>
            <summary>
            Set the active element and make it the current selection.
            </summary>
            <remarks> Does nothing if element not exists.</remarks>
            <param name="el">The element which should set</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.SetActiveElement(GuruComponents.Netrix.WebEditing.Elements.IElement,System.Boolean)">
            <summary>
            Set the active element and make it the current selection.
            </summary>
            <remarks>
            Does nothing if element not exists.
            If the second parameter is true the element becomes a viewable selection and shows handles.
            </remarks>
            <param name="el">The element which should set</param>
            <param name="SelectElement">Activate the handles around the element</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.SetActiveElement">
            <summary>
            Synchronizes the current element with the selection.
            </summary>
            <remarks>
            Normally for internal use only. This method supports the NetRix infrastructure only. 
            It is public to allow developers to create and attach plug-ins.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CustomColors">
            <summary>
            Sets a list of colors for the customized color tab of color picker control.
            </summary>
            <remarks>
            The host application may define a way to choose various specific colors which should used during
            design time. 
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertElement(GuruComponents.Netrix.ComInterop.Interop.ELEMENT_TAG_ID)">
            <summary>
            Inserts the element and places it right from the current selection.
            </summary>
            <param name="tagID"></param>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertForm">
            <summary>
            Inserts a FORM tag which acts as a container for form elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputButton">
            <summary>
            Inserts a button. Needs JavaScript to work.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputImage">
            <summary>
            Inserts a image button that acts as submit button.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputSubmit">
            <summary>
            Inserts a submit button.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputReset">
            <summary>
            Inserts a reset button.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputPassword">
            <summary>
            Inserts a password field.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputHidden">
            <summary>
            Inserts a hidden field, in Designmode displayed as text field.
            </summary>
            <remarks>
            To make the hidden field invisible or smaller at design time set the width and height style attributes.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputListBox">
            <summary>
            Inserts a list box.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputRadioButton">
            <summary>
            Inserts a radio button.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputCheckbox">
            <summary>
            Inserts a checkbox.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputTextArea">
            <summary>
            Inserts a text area.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputTextBox">
             <summary>
             Inserts a text box.
             </summary>
             <remarks>
             </remarks>
             <example>
             The following code assumes that the form has a button and its click event is handled by this method:
             <code>
            using GuruComponents.Netrix.WebEditing.Elements;
            
            private void button1_Click(object sender, System.EventArgs e)
            {
                IElement f = this.htmlEditor1.Document.InsertInputTextBox();
                f.SetStyleAttribute("BORDER-STYLE", "dashed");
                f.SetStyleAttribute("BORDER-WIDTH", "1px");
                f.SetStyleAttribute("BORDER-COLOR", "#000000");
            }</code>
             The method inserts a textbox at the current caret position and assigns immediately various
             styles to format the box.
             </example>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputDropdownList">
            <summary>
            Inserts a dropdownlist.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertInputFileUpload">
            <summary>
            Inserts a list box.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertHorizontalRule">
            <summary>
            Creates Horizontal Rule (line), &lt;hr&gt; tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBreak">
            <summary>
            Creates line break, &lt;br&gt; tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBreakWithCaret">
             <summary>
             Creates a line break (&lt;br&gt;) tag and move the caret to the next line.
             </summary>
             <remarks>
             The purpose of this method is for replacement of default enter key behavior, which normally
             inserts &lt;p&gt; tags. Together with the replacement code this method is helpful to have
             the best caret control.
             </remarks>
             <example>
             This example shows how to use the KeyPressed event to look for the Enter key. Then, if Enter was
             pressed, the code looks if the caret is already inside a paragraph. If so, the code inserts a 
             special break and moves the caret immediataly to the next line. The Handled property is set to
             inform the control that no paragraph should inserted.
             <code>
            private void htmlEditor1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
            {
                if (e.KeyChar == (char)13)
                {
                    if (this.htmlEditor1.Selection.Element is ParagraphElement)
                    {
                        e.Handled = true;
                        this.htmlEditor1.Document.InsertBreakWithCaret();
                    }
            
                }
            }</code>
             </example>
             <returns>Returns the BR tag which was inserted.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBreakWithClear(GuruComponents.Netrix.WebEditing.Elements.BreakClearEnum)">
            <summary>
            Creates line break, &lt;br clear="xxx"&gt; tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertScript">
            <summary>
            Inserts a &lt;script&gt; tag to activate javascript or something like that
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertIFrame">
            <summary>
            Inserts an embedded frame (iframe)
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertEmbed">
            <summary>
            Inserts an EMBED element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertTable(System.Int32,System.Int32)">
            <summary>
            Insert a new table at caret position if possible. Fill string defaults to an empty string. 
            Border width defaults to 0.
            </summary>
            <param name="rows">Number of Rows</param>
            <param name="cols">Number of Columns</param>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertTable(System.Int32,System.Int32,System.String)">
            <summary>
            Insert a new table at caret position if possible. Provide all possible parameters except border width.
            </summary>
            <param name="rows">Number of Rows</param>
            <param name="cols">Number of Columns</param>
            <param name="preFill">String which prefills the cells, e.g. &amp;nbsp;</param>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertTable(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Insert a new table at caret position if possible. Provide all possible parameters.
            </summary>
            <param name="rows">Number of Rows</param>
            <param name="cols">Number of Columns</param>
            <param name="preFill">String which prefills the cells, e.g. &amp;nbsp;</param>
            <param name="borderWidth">Width of borders</param>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertImage">
            <summary>
            Insert an empty image tag (&lt;img&gt;).
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertDefinitionList">
            <summary>
            Insert (&lt;dl&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertDefinitionEntry">
            <summary>
            Insert (&lt;dd&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertDefinitionTerm">
            <summary>
            Insert (&lt;dt&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertOrderedList">
            <summary>
            Inserts a ordered list. Does not create the first LI.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertUnOrderedList">
            <summary>
            Inserts a unordered (bulleted) list.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertListElement">
            <summary>
            Inserts a list element.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertHyperlink">
            <summary>
            Inserts a hyperlink with the specified href attribute and the current selection in it.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertHyperlink(System.String)">
            <summary>
            Inserts a hyperlink around the currently selected text.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBookmark(System.String)">
            <summary>
            Inserts a bookmark, e.g. a anchor tag with name attribute.
            </summary>
            <param name="name">The name of the bookmark</param>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertPreformatted">
            <summary>
            Insert (&lt;pre&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertAddress">
            <summary>
            Insert (&lt;address&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertAcronym">
            <summary>
            Insert (&lt;acronym&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBidirectionalOverride">
            <summary>
            Insert (&lt;bdo&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBlockquote">
            <summary>
            Insert (&lt;blockquote&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBig">
            <summary>
            Insert (&lt;big&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertBgsound">
            <summary>
            Insert (&lt;bgsound&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertCenter">
            <summary>
            Insert (&lt;center&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertCite">
            <summary>
            Insert (&lt;cite&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertCode">
            <summary>
            Insert (&lt;code&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertDel">
            <summary>
            Insert (&lt;del&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertDefinition">
            <summary>
            Insert (&lt;dfn&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertIns">
            <summary>
            Insert (&lt;ins&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertKeyboard">
            <summary>
            Insert (&lt;kbd&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertEmphasis">
            <summary>
            Insert (&lt;em&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertTeletype">
            <summary>              
            Insert (&lt;tt&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertVariable">
            <summary>
            Insert (&lt;var&gt;) tag.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.CreateOrderedList">
            <summary>
            Create an ordered list &lt;OL&gt; element and the first list element in it.
            </summary>
            <remarks>
            The method returns that element and the host application
            is responsible to set items in it.
            </remarks>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.CreateUnorderedList">
            <summary>
            Create an unordered list &lt;UL&gt; element and the first list element in it.
            </summary>
            <remarks>
            The method returns that element and the host application
            is responsible to set items in it.
            </remarks>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertNonBreakableSpace">
            <summary>
            Creates an &amp;nbsp; entity within the document at the current caret position.
            </summary>
            <returns>The element object that represents the created element.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertComment(System.String)">
            <summary>
            Inserts a HTML comment with the given text.
            </summary>
            <remarks>
            It is allowed to provide an empty string. Anyway, to access the comment later
            it is necessary to switch glyphs on and point the caret or cursor to the comment glyph.
            This will return the <see cref="T:GuruComponents.Netrix.WebEditing.Elements.CommentElement">CommentElement</see>
            object, which can be used to manipulate the content.
            </remarks>
            <param name="innerText">The text which is written into the comment.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertHtml(System.String,System.Boolean)">
            <summary>
            Insert HTML at caret position and delete any selected text, if the DeleteSelection parameter is true.
            </summary>
            <remarks>
            Inserting comments using this method is not possible. One should use 
            <see cref="M:GuruComponents.Netrix.HtmlDocument.InsertComment(System.String)">InsertComment</see> instead.
            This is due to limitations of the underlying MSHTML engine, that doesn't allow insertion
            of invisible elements using standard commands.
            <para>
            This method inserts the given text as HTML, but it does not transform the DOM (Document Object Model) and
            does not add the inserted element to the current element hierarchy. If the element was previously created as
            a native object, any access to <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom">ElementDom</see>
            will fail, as well as attaching behaviors and other internal operations with elements.</para>
            <para>
            The main usage of this method should be the insertion of entities (&amp;ntilde; &amp;nbsp; etc.) and inline
            HTML tags, to which further access doesn't make sense. 
            For instance, in a text like "This is &lt;b&gt;not&lt;/b&gt; allowed" the further access to the Bold tag is never
            necessary and building the structure using the DOM will simple raise the effort without any advantage.
            </para>
            </remarks>
            <param name="Html">HTML text to be inserted.</param>
            <param name="DeleteSelection">True, if the current selection should be deleted.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.InsertHtml(System.String)">
            <summary>
            Inserts the specified string into the HTML over the current selection.
            </summary>
            <remarks>
            Inserting comments using this method is not possible. One should use 
            <see cref="M:GuruComponents.Netrix.HtmlDocument.InsertComment(System.String)">InsertComment</see> instead.
            This is due to limitations of the underlying MSHTML engine, that doesn't allow insertion
            of invisible elements using standard commands.
            <para>
            This method inserts the given text as HTML, but it does not transform the DOM (Document Object Model) and
            does not add the inserted element to the current element hierarchy. If the element was previously created as
            a native object, any access to <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementDom">ElementDom</see>
            will fail, as well as attaching behaviors and other internal operations with elements.</para>
            <para>
            The main usage of this method should be the insertion of entities (&amp;ntilde; &amp;nbsp; etc.) and inline
            HTML tags, to which further access doesn't make sense. 
            For instance, in a text like "This is &lt;b&gt;not&lt;/b&gt; allowed" the further access to the Bold tag is never
            necessary and building the structure using the DOM will simple raise the effort without any advantage.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">For inserting SCRIPT tags you must add the DEFER attribute. See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/properties/innerhtml.asp for details.</exception>
            <param name="html"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.RemoveHyperlink">
            <summary>
            Remove a hyperlink where the caret is placed in.
            </summary>
            <remarks>
            The text which the hyperlink contains will not be removed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanRemoveHyperlink">
            <summary>
            Indicates if the current selection can have it's hyperlink removed.
            </summary>
            <remarks>
            Use this property to update the user interface.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.CanWrapSelection">
            <summary>
            Indicates whether the current selection can be wrapped in HTML tags.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.WrapSelection(System.String)">
            <summary>
            Creates a new tag around the current HTML selection.
            </summary>
            <remarks>
            This method does not check for the validity of the new HTML. If the generated HTML is not valid the 
            call causes unexpected results, including but not limited to ignoring the call.
            </remarks>
            <param name="tag">The tag name which is used to build the tag, e.g. "DIV" for a division.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.WrapSelection(System.String,System.Collections.IDictionary)">
            <summary>
            Creates a new tag around the current HTML selection.
            </summary>
            <remarks>
            The textselection method used internally is "clever" in some ways and tries to keep the HTML valid
            and set the new element as expected. This can result in element duplication.
            <para>
            This HTML <c>&lt;b>stro[ng&lt;/b>&lt;i>ita]lic&lt;</c>, where [] covers the selected text range, 
            would become <c>&lt;b>stro&lt;/b>&lt;span>&lt;b>ng&lt;/b>&lt;i>ita&lt;/span>lic&lt;</c> after using the
            method with the tag SPAN. As you can see, the &lt;b> tag is duplicated to keep the HTML valid.         
            </para>
            After the selection has been changed, the method removes the selection and sets the caret to the
            end of range.
            </remarks>
            <param name="tag">The tag name which is used to build the tag, e.g. "DIV" for a division.</param>
            <param name="attributes">A collection of attributes, expected as name/value pairs. Can be <c>null</c> (<c>Nothing</c> in VB.NET) if no attributes needed.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.ActivateNewElement">
            <summary>
            Depending on caret position we try to get the new element and invoke HtmlElementChanged event.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.WrapSelectionInDiv">
            <summary>
            Takes the selection and put an &lt;div&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.WrapSelectionInSpan">
            <summary>
            Takes the selection and put an &lt;span&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.WrapSelectionInBlockQuote">
            <summary>
            Takes the selection and put an &lt;blockquote&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlDocument.WrapSelectionInHyperlink(System.String)">
            <summary>
            Takes the selection and put an &lt;hyperlink&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlDocument.Zoom">
            <summary>
            Gets or set the editor window zoom level and persist it using body's zoom style attribute.
            </summary>
            <remarks>
            This setting persist's by setting bod element's zoom style. 
            In design mode, this zooms the scrollbars, too. In browse mode, the behavior of the scrollbars
            depends on the current DOCTYPE settings. To get desired behavior (content zoomed and scrollbars
            not zoomed, the following DOCTYPE setting is recommended:
            <code>
            &lt;!doctype html public "-//W3C//DTD HTML 4.01 Strict//EN"&gt;
            </code>
            Insert this line as first line in each document to get desired zoom behavior.
            </remarks>
            <value>Value for zoom, 1 equals 100%. Set 0.5 for 50% or 2.0 for 200%.</value>
        </member>
        <member name="T:GuruComponents.Netrix.HtmlSelection">
            <summary>
            This class provides methods and properties for element selections and layer operations.
            </summary>
            <remarks>
            If the application provides absolute positioning various methods can be used to set z-order or align floating 
            elements to the left, right or top. The class contains also method to wrap elements around the current
            selection. It doesn't matter if this selection is primarily a text or control selection.
            </remarks>
            <example>
            This example shows how to get an instance of this class in C#:
            <code lang="C#">
            using GuruComponents.Netrix;
            
            // run this code anywhere after ReadyStateComplete event was fired
            this.htmlEditor1 = new HtmlEditor();
            ISelection selection = this.htmlEditor1.Selection;
            
            </code>
            This example shows how to get an instance of this class in VB.NET:
            <code>
            Imports GuruComponents.Netrix
            
            // run this code anywhere after ReadyStateComplete event was fired
            Me.htmlEditor1 = New HtmlEditor()
            Dim selection As ISelection = this.htmlEditor1.Selection
            </code>    
            </example>
        </member>
        <member name="F:GuruComponents.Netrix.HtmlSelection._text">
            <summary>
            The text of the current selection, tags are stripped out
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.HtmlSelection._html">
            <summary>
            The current selection with tags
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.CanAlign">
            <summary>
            Indicates if the current selection of absolutely positionable elements can be aligned to 
            any of the borders. </summary>
            <remarks>
            This is possible if two or more elements are selected and all of them
            have the position:absolute style attribute.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.HaveSameParent">
            <summary>
            This method returns true, if all selected elements have the same parent.
            </summary>
            <remarks>
            Under some circumstances it is recommended not to align floating elements if they are
            defined under different parent elements.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.AlignBottom">
            <summary>
            Assign bottom alignment to current selection.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.AlignHorizontalCenter">
            <summary>
            Align selected elements horizontal centered.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.AlignLeft">
            <summary>
            Align selection left.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.AlignRight">
            <summary>
            Align selection to the right.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.AlignTop">
            <summary>
            Align elements vertically at top of containing container.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.AlignVerticalCenter">
            <summary>
            Align elements vertically centered if inside a block element.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.ToggleLock">
            <summary>
            Toggle the design time lock state of the selected items. 
            </summary>
            <remarks>
            Locked elements cannot be changed in design mode.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.GetLockInfo">
            <summary>
            Returns info about the design time lock state of the selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.IsElementLocked(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            Convenience method for checking if the specified element has a design time lock
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.CanChangeZIndex">
            <summary>
            Indicates if the current selection have it's z-index modified
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.IsElement2DPositioned(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Convenience method for checking if the specified element is absolutely positioned
            </summary>
            <param name="element">The element to check.</param>
            <returns>Returns <c>true</c> if "position:absolute" style is set.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.IsElement2DPositioned(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            Convenience method for checking if the specified element is absolutely positioned
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.GetAbsolutePositionInfo">
            <summary>
            Returns info about the absolute positioning of the selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.ToggleAbsolutePosition">
            <summary>
            Toggle the absolute positioning state of the selected items.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.BringToFront">
            <summary>
            Bring currently selected elements to front by changing the z.order in a layered document
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.BringToFront(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Bring the given element to front by changing the z.order in a layered document
            </summary>
            <param name="element">The element which has to bring to front.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.BringToFront(System.Collections.IList)">
            <summary>
            Bring element to front by changing the z.order in a layered document
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SendToBack">
            <summary>
            Sends all selected items to the back.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SendToBack(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Sends given item to the back.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SendToBack(System.Collections.IList)">
            <summary>
            Sends all selected items to the back
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.GetUnsynchronizedElement">
            <summary>
            For some internal procedures we need the current element only and we trust that
            the element is the last one picked up with the mouse. External callers use
            the synchronized version which is much more robust.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.MSHTMLSelection">
            <summary>
            Returns the MSHTML selection object (IHTMLTxtRange or IHTMLControlRange)
            Does not synchronize the selection!!!  Uses the selection from the last synchronization
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.CreateElementWrapper(GuruComponents.Netrix.ComInterop.Interop.IHTMLElement)">
            <summary>
            This method returns a native element instance.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlSelection.SelectionChanged">
            <summary>
            Fired if the selection has changed. 
            </summary>
            <remarks>
            If element selections are made which cannot recognized as selection the event may return only the body element.
            <para>The event fires usually before <see cref="E:GuruComponents.Netrix.IHtmlEditor.HtmlElementChanged">HtmlElementChanged</see> is being fired. In case of a deselection after
            that no longer any elements being selected the event is not fired again.</para>
            </remarks>
            <seealso cref="E:GuruComponents.Netrix.IHtmlEditor.HtmlElementChanged">HtmlElementChanged</seealso>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.Length">
            <summary>
            Number of selected elements or characters.
            </summary>
            <remarks>
            This property returns the number of selected elements, if the current <see cref="P:GuruComponents.Netrix.HtmlSelection.SelectionType"/>
            is <see cref="F:GuruComponents.Netrix.HtmlSelectionType.ElementSelection"/>, otherwise the current number of selected
            characters. If an element is selected, it has handles for move/resize and if a character is selected
            it becomes negative (by default, white font on black background) and accepts various commands.
            <para>
            Most formatting operations in the <see cref="T:GuruComponents.Netrix.ISelection"/> interface need a valid element selection.
            The ability of retrieving the text selection length does not implies a usual way to format text.
            Please refer to <see cref="T:GuruComponents.Netrix.ITextFormatting"/> for text formatting purposes.
            </para>
            <seealso cref="T:GuruComponents.Netrix.ITextFormatting"/>
            <seealso cref="P:GuruComponents.Netrix.HtmlSelection.SelectionType"/>
            <seealso cref="T:GuruComponents.Netrix.HtmlSelectionType"/>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.SameParent">
            <summary>
            Indicates if all items in the selection have the same parent element
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.Element">
            <summary>
            Get the current element after synchronizing the current selection.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.Elements">
            <summary>
            Gets the list of selected elements as Native Type. Normally, if only one element is 
            selected, use the <see cref="P:GuruComponents.Netrix.HtmlSelection.Element"/> method instead.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SetOuterHtml(System.String)">
            <summary>
            Change the complete HTML including the outer HTML
            </summary>
            <param name="outerHtml"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.GetOuterHtml">
            <summary>
            Returns the outer HTML of the current selection. This includes the tag of he outermost element themselfes.
            </summary>
            <returns>HTML code as string</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.GetChildHierarchy(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Gets the list of direct children of the given element. The collection does not reflect the current 
            selection to make this function usable for all elements.
            </summary>
            <param name="o">IElement element</param>
            <returns><see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementCollection"/> of children, can be empty if there are no children or null if element was not recognized</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.GetParentHierarchy(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Get the list of elements building the parent of the given element.
            </summary>
            <remarks>
            The collection does not reflect the current selection to make this function usable for all elements.
            </remarks>
            <param name="o">The Element as <see cref="T:GuruComponents.Netrix.WebEditing.Elements.IElement">IElement</see> derived object.</param>
            <returns>The <see cref="T:GuruComponents.Netrix.WebEditing.Elements.ElementCollection">ElementCollection</see> of parent element or null, if there are no more parents.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.IsSelectableElement(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Determines if the element can have handles, e.g. is a selectable element.
            </summary>
            <remarks>
            Typical elements like TABLE or IMG have handles. DIV can have handles if either width or height is defined.		
            </remarks>
            <param name="element">The element to check.</param>
            <returns>Returns <c>true</c> if the element can have handles.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.IsSelected(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Checks if the element is currently selected.
            </summary>
            <remarks>
            This methods returns always <c>False</c> if the element isn't a selectable block element or
            the element parameter is <c>null</c> (<c>Nothing</c> in VB.NET).
            One can check the selectable property by calling <see cref="M:GuruComponents.Netrix.HtmlSelection.IsSelectableElement(GuruComponents.Netrix.WebEditing.Elements.IElement)"/> method.
            The method does not change the current selection.
            </remarks>
            <param name="element">The element to be checked.</param>
            <returns>Either <c>True</c> or <c>False</c> depending on current state.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.CanMatchSize">
            <summary>
            Indicates if the current selection can be used to assign new values using any other operation.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.Text">
            <summary>
            Returns the text contained in the selection if there is a text selection.
            </summary>
            <remarks>HTML tags are stripped out. If the containing text is an selectable element this property contains the element's 
            content. Child elements such as formatting tags are stripped out as well.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.Html">
            <summary>
            Returns the html text contained in the selection if there is a text selection.
            </summary>
            <remarks> The html tags are not stripped out. See <see cref="P:GuruComponents.Netrix.HtmlSelection.Text"/> for a version which strips tags.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.HasTextSelection">
            <summary>
            This propertys returns true, if the control has currently selected text in it.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.SelectionType">
            <summary>
            The type of the selection.
            </summary>
            <remarks>Can be none (Empty), text or html (Text </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SelectAll">
            <summary>
            Selects all elements in the document if they are absolutely positioned.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SelectElement(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Searches for an element and returns true, if the element exists within the page. The element remains selected.
            </summary>
            <param name="element">The element one is looking for.</param>
            <returns>Returns <c>true</c> if the element is within the page and was selected.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SelectElements(System.Collections.ICollection)">
            <summary>
            Searches for elements and returns true, if the element exists within the page. The elements remain selected.
            </summary>
            <param name="elements">The elements one is looking for.</param>
            <returns>Returns <c>true</c> if all elements are within the page and were selected.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.ClearSelection">
            <summary>
            Removes the selection the user has made but does not delete the content.
            </summary>
            <remarks>
            This method works only with a block element selection in 2D-mode. Use the text formatting 
            features to select/deselect the selection of text.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.DeleteSelection">
            <summary>
            Removes the selected elements and all its content.
            </summary>
            <remarks>
            This method works only with a block element selection in 2D-mode and only if block elements are
            selected. In case of text selection the method ignores the action.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SynchronizeSelection">
            <summary>
            Synchronizes the selection state held in this object with the selection state in MSHTML.
            </summary>
            <remarks>
            This method fires the <see cref="E:GuruComponents.Netrix.HtmlSelection.SelectionChanged"/> event if the current selection is different from the previous one.
            <para>
            This method recognizes only standard HTML elements. It may fail for VML, XML, or other extended elements, 
            which might be selectable, indeed. Instead using the element collection directly it's recommended to check the
            existence of handles (e.g. the selected state) directly by using <see cref="M:GuruComponents.Netrix.HtmlSelection.IsSelected(GuruComponents.Netrix.WebEditing.Elements.IElement)"/> property.
            </para>
            </remarks>
            <returns><c>True</c> if the selection has changed and the event was fired.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.CanWrapSelection">
            <summary>
            Indicates if the current selection can be wrapped in HTML tags.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.WrapSelection(System.String)">
            <summary>
            Creates a new tag around the current HTML selection.
            </summary>
            <remarks>
            This method does not check
            for the validity of the new HTML. If the generated HTML is not valid the call causes
            unexpected results.
            </remarks>
            <param name="tag">The tag name which is used to build the tag, e.g. "DIV" for a division.</param>        
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.WrapSelection(System.String,System.Collections.IDictionary)">
            <summary>
            Creates a new tag around the current HTML selection.
            </summary>
            <remarks>
            The textselection method used internally is "clever" in some ways and tries to keep the HTML valid
            and set the new element as expected. This can result in element duplication.
            <para>
            This HTML <c>&lt;b>stro[ng&lt;/b>&lt;i>ita]lic&lt;</c>, where [] covers the selected text range, 
            would become <c>&lt;b>stro&lt;/b>&lt;span>&lt;b>ng&lt;/b>&lt;i>ita&lt;/span>lic&lt;</c> after using the
            method with the tag SPAN. As you can see, the &lt;b> tag is duplicated to keep the HTML valid.         
            </para>
            After the selection has been changed, the method removes the selection and sets the caret to the
            end of range.
            </remarks>
            <param name="tag">The tag name which is used to build the tag, e.g. "DIV" for a division.</param>
            <param name="attributes">A collection of attributes, expected as name/value pairs. Can be <c>null</c> (<c>Nothing</c> in VB.NET) if no attributes needed.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.WrapSelectionInDiv">
            <summary>
            Takes the selection and put an &lt;div&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.WrapSelectionInSpan">
            <summary>
            Takes the selection and put an &lt;span&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.WrapSelectionInBlockQuote">
            <summary>
            Takes the selection and put an &lt;blockquote&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.WrapSelectionInHyperlink(System.String)">
            <summary>
            Takes the selection and put an &lt;a&gt; around it.
            </summary>
            <remarks>
            The purpose of this method is to insert elements around selected text. If there is no selection the
            element will still be inserted, but it remains invisible if no styles are applied. The host application
            should be aware of inserting empty elements and should provide some help through the user interface
            to make such elements visible or reachable.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.RemoveHyperlink">
            <summary>
            Remove a hyperlink where the caret is placed in.
            </summary>
            <remarks>
            The text which the hyperlink contains will not be removed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.CanRemoveHyperlink">
            <summary>
            Indicates if the current selection can have it's hyperlink removed.
            </summary>
            <remarks>
            Use this property to update the user interface.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.RemoveCurrentElement(System.Boolean)">
            <summary>
            This method removes the current element.</summary>
            <remarks>
            This method remove the current element (as shown in the property grid as result of the last 
            HtmlElementChanged event). Normally this is where the caret is located. If the parameter 
            preserveContent is true the content (text, child elements, …) is preserved. Removing an 
            element will be reflected in the DOM immediately. Undo works as expected. Redo can throw 
            an exception, if the removed element is added twice or more and the DOM does not allow this 
            element to be nested at the current location. It is recommended to disable Redo after calling 
            RemoveCurrentElement for at least one keystroke to avoid adding nested elements, which 
            doesn’t make sense in HTML under most circumstances.
            </remarks>
            <param name="preserveContent">True if the content and children should not be deleted.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
            <summary>
            Set the given components as selected.
            </summary>
            <param name="components"></param>
            <param name="selectionType"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlSelection.GetSelectedComponents">
            <summary>
            Get the selected components.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlSelection.SelectionCount">
            <summary>
            Get the number of selected components.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.HtmlSelection.System#ComponentModel#Design#ISelectionService#SelectionChanged">
            <summary>
            Hook up the regular designer based event to the netrix base implementation.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.HtmlTextFormatting">
            <summary>
            HtmlTextFormatting provides methods to format text selections or text blocks.
            </summary>
            <remarks>
            This class should never called directly from user code. It is necessary to use the 
            <see cref="P:GuruComponents.Netrix.HtmlEditor.TextFormatting"/> property to request a singleton instance
            of the class to access the various properties and methods. This assures that all requests are assigned
            to the current document only.
            <para>
            For dealing with an instance of the class it is recommended to use the <see cref="T:GuruComponents.Netrix.ITextFormatting"/>
            interface as type.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Constructor which simply takes an HtmlEditor to interface with MSHTML.
            </summary>
            <remarks>
            This constructor supports the
            NetRix infrastructure and should never called directly from user code.
            </remarks>
            <param name="editor"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetBlockFormats">
            <summary>
            Gets the block format command strings from MSHTML.
            </summary>
            <remarks>
            The block format command parameters
            depend on the MSHTML version and language. For example: The english version accepts "Header1"
            whereas the german version needs "Überschrift1", in MSHTML 6.0. It is strongly recommended
            to gather the block formats before sending any block formatting command to the editor component.
            </remarks>
            <returns>Array of format command strings</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetFormatString(GuruComponents.Netrix.HtmlFormat)">
            <summary>
            Translate the language dependent block formatting commands into the internal
            used enumaration
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.SelectAll">
            <summary>
            Selects the whole text in the control
            </summary>
            <remarks>
            If key strokes for hot keys are hardwired this methods is linked with the Ctrl-A key.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ClearSelection">
            <summary>
            Removes the selection the user has made. 
            </summary>
            <remarks>
            This method does not delete the content currently selected.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.RemoveInlineFormat">
            <summary>
            Removes the current inline formatting with &lt;font&gt; tag.
            </summary>
            <example>
            The following code assumes menu item to RemoveInlineFormat and its click event 
            is handle like this:
            <code>
            private void mnuRemoveInlineFormat_Click(object sender, System.EventArgs e)
            {
            	htmlEditor2.TextFormatting.RemoveInlineFormat();
            }
            </code>
            </example>
            <seealso cref="M:GuruComponents.Netrix.HtmlTextFormatting.RemoveParagraphFormat"/>
            <seealso cref="M:GuruComponents.Netrix.HtmlTextFormatting.SetHtmlFormat(GuruComponents.Netrix.HtmlFormat)"/>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.RemoveParagraphFormat">
            <summary>
            Removes the current paragraph formatting by any kind of block element.
            </summary>
            <remarks>
            This is a shortcut for <c>SetHtmlFormat(HtmlFormat.Normal)</c>.
            </remarks>
            <example>
            The following code assumes menu item to RemoveInlineFormat and its click event 
            is handle like this:
            <code>
            private void mnuRemoveParagraphFormat_Click(object sender, System.EventArgs e)
            {
            	htmlEditor2.TextFormatting.RemoveParagraphFormat();
            }
            </code>
            </example>
            <seealso cref="M:GuruComponents.Netrix.HtmlTextFormatting.RemoveInlineFormat"/>
            <seealso cref="M:GuruComponents.Netrix.HtmlTextFormatting.SetHtmlFormat(GuruComponents.Netrix.HtmlFormat)"/>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.CanIndent">
            <summary>
            Indicates if the current text can be indented.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.CanSetBackColor">
            <summary>
            Indicates if the background color can be set
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.CanSetFontName">
            <summary>
            Indicates if the font face can be set.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.CanSetFontSize">
            <summary>
            Indicates if the font size can get set.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.CanSetForeColor">
            <summary>
            Indicates if the foreground color can be set.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.CanSetHtmlFormat">
            <summary>
            Indicates if the Html format (eg ordered lists, paragraph, heading) can be set.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.CanUnindent">
            <summary>
            Indicates if the current text can be unindented.
            </summary>
            <remarks>
            It is recommended to use this property to update the user interface, e.g. disabling or enabling toolbar buttons or menu entries.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.FontName">
            <summary>
            Gets and sets the font name of the current text.
            </summary>
            <remarks>
            Any call to the set path will remove empty attributes, if the current element is a font element and
            the attribute is empty. If no more attributes left the font tag is removed.  
            <para>
            The intention if this property is NOT to change the font face of any font attribute which is valid in
            the parent hierarchy. This means, that only an active selection with one or more characters will
            encapsulated with the font tag. To get the current element just use <c>HtmlEditor.GetCurrentElement</c>
            or get the current element form HtmlElementChanged event. If the current element is the font
            element the property <c>face</c> can be used to set or retrieve the current font face value.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.FontSize">
            <summary>
            Gets and sets the font size of the current text.
            </summary>
            <remarks>
            Any call to the set path will remove empty attributes, if the current element is a font element and
            the attribute is empty. If no more attributes left the font tag is removed.  
            <para>
            The intention if this property is NOT to change the font size of any font attribute which is valid in
            the parent hierarchy. This means, that only an active selection with one or more characters will
            encapsulated with the font tag. To get the current element just use <c>HtmlEditor.GetCurrentElement</c>
            or get the current element form HtmlElementChanged event. If the current element is the font
            element the property <c>size</c> can be used to set or retrieve the current font size value.
            </para>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.ForeColor">
             <summary>
             The foreground color of the current text.
             </summary>
             <remarks>
             Any call to the set path will remove empty attributes, if the current element is a font element and
             the attribute is empty. If no more attributes left the font tag is removed.  
             <para>
             The intention if this property is NOT to change the color of any font attribute which is valid in
             the parent hierarchy. This means, that only an active selection with one or more characters will
             encapsulated with the font tag. To get the current element just use <c>HtmlEditor.GetCurrentElement</c>
             or get the current element form HtmlElementChanged event. If the current element is the font
             element the property color can be used to set or retrieve the current color value.
             </para>
             <seealso cref="P:GuruComponents.Netrix.HtmlTextFormatting.BackColor">BackColor</seealso>
             </remarks>
             <example>
             Assuming you have a dialog <c>ColorWizard</c> that provides both, ForeColor and BackColor settings,
             the following code will change the current selection to the selected colors (C#):
             <code>
            ColorWizardDlg = new ColorWizard();
            ColorWizardDlg.FontForeColor = this.htmlEditor1.TextFormatting.ForeColor;
            ColorWizardDlg.FontBackColor = this.htmlEditor1.TextFormatting.BackColor;
            if (ColorWizardDlg.ShowDialog() == DialogResult.OK)
            {
               this.htmlEditor1.TextFormatting.ForeColor = ColorWizardDlg.FontForeColor;
               this.htmlEditor1.TextFormatting.BackColor = ColorWizardDlg.FontBackColor;
            }
             </code>
             The dialog is best build using the ColorPicker user control from NetRix UI package. The following code
             is a good example of how to do this (C#):
             <code>
            using System;
            using System.Drawing;
            using System.Collections;
            using System.ComponentModel;
            using System.Windows.Forms;
            
            using GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker;
            
            namespace Comzept.DemoApplication
            {
            public class ColorWizard : System.Windows.Forms.Form
            {
                private ColorPickerUserControl colorPickerUserControlFore;
                private ColorPickerUserControl colorPickerUserControlBack;
                private System.Windows.Forms.Button buttonOK;
                private System.Windows.Forms.Button buttonCancel;
                private System.Windows.Forms.Label labelHeader;
                private System.Windows.Forms.Label labelForeground;
                private System.Windows.Forms.Label labelBackground;
                private System.Windows.Forms.Label labelSample;
                private System.ComponentModel.Container components = null;
            
                public ColorWizard()
                {
                    InitializeComponent();
                }
            
                protected override void Dispose( bool disposing )
                {
                    if( disposing )
                    {
                        if(components != null)
                        {
                            components.Dispose();
                        }
                    }
                    base.Dispose( disposing );
                }
            
                private void InitializeComponent()
                {
                    this.labelHeader = new System.Windows.Forms.Label();
                    this.colorPickerUserControlFore = new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorPickerUserControl();
                    this.colorPickerUserControlBack = new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorPickerUserControl();
                    this.labelForeground = new System.Windows.Forms.Label();
                    this.labelBackground = new System.Windows.Forms.Label();
                    this.buttonOK = new System.Windows.Forms.Button();
                    this.buttonCancel = new System.Windows.Forms.Button();
                    this.labelSample = new System.Windows.Forms.Label();
                    this.SuspendLayout();
                    /// 
                    /// labelHeader
                    /// 
                    this.labelHeader.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.labelHeader.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                    this.labelHeader.Location = new System.Drawing.Point(8, 8);
                    this.labelHeader.Name = "labelHeader";
                    this.labelHeader.Size = new System.Drawing.Size(272, 24);
                    this.labelHeader.TabIndex = 0;
                    this.labelHeader.Text = "Change the currently selected color:";
                    /// 
                    /// colorPickerUserControlFore
                    /// 
                    this.colorPickerUserControlFore.CurrentColor = System.Drawing.Color.Empty;
                    this.colorPickerUserControlFore.Location = new System.Drawing.Point(8, 48);
                    this.colorPickerUserControlFore.Name = "colorPickerUserControlFore";
                    this.colorPickerUserControlFore.Size = new System.Drawing.Size(272, 23);
                    this.colorPickerUserControlFore.TabIndex = 1;
                    this.colorPickerUserControlFore.ColorChanged += new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorChangedEventHandler(this.colorPickerUserControlFore_ColorChanged);
                    /// 
                    /// colorPickerUserControlBack
                    /// 
                    this.colorPickerUserControlBack.CurrentColor = System.Drawing.Color.Empty;
                    this.colorPickerUserControlBack.Location = new System.Drawing.Point(8, 96);
                    this.colorPickerUserControlBack.Name = "colorPickerUserControlBack";
                    this.colorPickerUserControlBack.Size = new System.Drawing.Size(272, 23);
                    this.colorPickerUserControlBack.TabIndex = 2;
                    this.colorPickerUserControlBack.ColorChanged += new GuruComponents.Netrix.WebEditing.UserInterface.ColorPicker.ColorChangedEventHandler(this.colorPickerUserControlBack_ColorChanged);
                    /// 
                    /// labelForeground
                    /// 
                    this.labelForeground.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.labelForeground.Location = new System.Drawing.Point(8, 32);
                    this.labelForeground.Name = "labelForeground";
                    this.labelForeground.Size = new System.Drawing.Size(100, 16);
                    this.labelForeground.TabIndex = 3;
                    this.labelForeground.Text = "Foreground:";
                    /// 
                    /// labelBackground
                    /// 
                    this.labelBackground.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.labelBackground.Location = new System.Drawing.Point(8, 80);
                    this.labelBackground.Name = "labelBackground";
                    this.labelBackground.Size = new System.Drawing.Size(100, 16);
                    this.labelBackground.TabIndex = 4;
                    this.labelBackground.Text = "Background";
                    /// 
                    /// buttonOK
                    /// 
                    this.buttonOK.DialogResult = System.Windows.Forms.DialogResult.OK;
                    this.buttonOK.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.buttonOK.Location = new System.Drawing.Point(208, 176);
                    this.buttonOK.Name = "buttonOK";
                    this.buttonOK.TabIndex = 5;
                    this.buttonOK.Text = "OK";
                    /// 
                    /// buttonCancel
                    /// 
                    this.buttonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
                    this.buttonCancel.FlatStyle = System.Windows.Forms.FlatStyle.System;
                    this.buttonCancel.Location = new System.Drawing.Point(128, 176);
                    this.buttonCancel.Name = "buttonCancel";
                    this.buttonCancel.TabIndex = 6;
                    this.buttonCancel.Text = "Cancel";
                    /// 
                    /// labelSample
                    /// 
                    this.labelSample.BackColor = System.Drawing.SystemColors.ControlLightLight;
                    this.labelSample.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
                    this.labelSample.Font = new System.Drawing.Font("Verdana", 14F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))), System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                    this.labelSample.Location = new System.Drawing.Point(8, 128);
                    this.labelSample.Name = "labelSample";
                    this.labelSample.Size = new System.Drawing.Size(272, 40);
                    this.labelSample.TabIndex = 7;
                    this.labelSample.Text = "Worldsoft Color Sample";
                    this.labelSample.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
                    /// 
                    /// ColorWizard
                    /// 
                    this.AcceptButton = this.buttonOK;
                    this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
                    this.BackColor = System.Drawing.SystemColors.InactiveCaptionText;
                    this.CancelButton = this.buttonCancel;
                    this.ClientSize = new System.Drawing.Size(290, 208);
                    this.Controls.Add(this.labelSample);
                    this.Controls.Add(this.buttonCancel);
                    this.Controls.Add(this.buttonOK);
                    this.Controls.Add(this.labelBackground);
                    this.Controls.Add(this.labelForeground);
                    this.Controls.Add(this.colorPickerUserControlBack);
                    this.Controls.Add(this.colorPickerUserControlFore);
                    this.Controls.Add(this.labelHeader);
                    this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedToolWindow;
                    this.MaximizeBox = false;
                    this.MinimizeBox = false;
                    this.Name = "ColorWizard";
                    this.ShowInTaskbar = false;
                    this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
                    this.Text = "Color Wizard";
                    this.ResumeLayout(false);
            
                }
            
                private void colorPickerUserControlFore_ColorChanged(object sender, ColorChangedEventArgs e)
                {
                    this.labelSample.ForeColor = e.Color;
                }
            
                private void colorPickerUserControlBack_ColorChanged(object sender, ColorChangedEventArgs e)
                {
                    this.labelSample.BackColor = e.Color;
                }
            
                public Color FontBackColor
                {
                    set
                    {
                        this.colorPickerUserControlBack.CurrentColor = value;
                        this.labelSample.BackColor = value;
                    }
                    get
                    {
                        return this.colorPickerUserControlBack.CurrentColor;
                    }
                }
            
                public Color FontForeColor
                {
                    set
                    {
                        this.colorPickerUserControlFore.CurrentColor = value;
                        this.labelSample.ForeColor = value;
                    }
                    get
                    {
                        return this.colorPickerUserControlFore.CurrentColor;
                    }
                }
            }
            }        
             </code>
             </example>
        </member>
        <member name="P:GuruComponents.Netrix.HtmlTextFormatting.BackColor">
            <summary>
            Sets the background of the current text selection to the given color.
            </summary>
            <remarks>
            This property cannot be 
            applied if no text is selected. 
            Any call to the set path will remove empty attributes, if the current element is a font element and
            the attribute is empty. If no more attributes left the font tag is removed.  
            <para>
            The intention if this property is NOT to change the font face of any font attribute which is valid in
            the parent hierarchy. This means, that only an active selection with one or more characters will
            encapsulated with the font tag. To get the current element just use <code>HtmlEditor.GetCurrentElement</code>
            or get the current element form HtmlElementChanged event. If the current element is the font
            element the style attribute <code>background-color</code> can be used.
            </para>
            <para>
            For an example see <see cref="P:GuruComponents.Netrix.HtmlTextFormatting.ForeColor">ForeColor</see> property.
            </para>
            <seealso cref="P:GuruComponents.Netrix.HtmlTextFormatting.ForeColor">ForeColor</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetBoldInfo">
            <summary>
            Gets the current state of the bold command (enabled and/or checked).
            </summary>
            <remarks>
            The state depends on the current caret position and may vary if the caret moves. It refers to 
            the allowed commands and does not check if issuing the command make sense. Therefore setting
            bold inside a tag that is already bold, doesn't make any sense. But it will result in valid
            HTML and therefore issuing the command wil allowed. It is up the host application to build a 
            more clever user interface by checking the parent/child hierachies.
            </remarks>
            <returns>Returns a value of type <see cref="T:GuruComponents.Netrix.HtmlCommandInfo">HtmlCommandInfo</see>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetHtmlFormat">
            <summary>
            Retrieves the current block format</summary>
            <remarks>
            The block format can be "Header 1", "Unordered List", etc. and the method returns
            it in the internal enum format to stay language independent.
            <seealso cref="T:GuruComponents.Netrix.HtmlFormat">HtmlFormat</seealso>
            </remarks>
            <returns><see cref="T:GuruComponents.Netrix.HtmlFormat">HtmlFormat</see> enumeration</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetItalicsInfo">
            <summary>
            Gets the current state of the italics command (enabled and/or checked).
            </summary>
            <remarks>
            The state depends on the current caret position and may vary if the caret moves. It refers to 
            the allowed commands and does not check if issuing the command make sense. Therefore setting
            bold inside a tag that is already bold, doesn't make any sense. But it will result in valid
            HTML and therefore issuing the command wil allowed. It is up the host application to build a 
            more clever user interface by checking the parent/child hierachies.
            </remarks>
            <returns>Returns a value of type <see cref="T:GuruComponents.Netrix.HtmlCommandInfo">HtmlCommandInfo</see>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetStrikethroughInfo">
            <summary>
            Gets the current state of the strikethrough command (enabled and/or checked).
            </summary>
            <remarks>
            The state depends on the current caret position and may vary if the caret moves. It refers to 
            the allowed commands and does not check if issuing the command make sense. Therefore setting
            bold inside a tag that is already bold, doesn't make any sense. But it will result in valid
            HTML and therefore issuing the command wil allowed. It is up the host application to build a 
            more clever user interface by checking the parent/child hierachies.
            </remarks>
            <returns>Returns a value of type <see cref="T:GuruComponents.Netrix.HtmlCommandInfo">HtmlCommandInfo</see>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetSubscriptInfo">
            <summary>
            Gets the current state of the Subscript command (enabled and/or checked). This method can only
            detect the state if some text is selected. 
            </summary>
            <remarks>
            The state depends on the current caret position and may vary if the caret moves. It refers to 
            the allowed commands and does not check if issuing the command make sense. Therefore setting
            bold inside a tag that is already bold, doesn't make any sense. But it will result in valid
            HTML and therefore issuing the command wil allowed. It is up the host application to build a 
            more clever user interface by checking the parent/child hierachies.
            </remarks>
            <returns>Returns a value of type <see cref="T:GuruComponents.Netrix.HtmlCommandInfo">HtmlCommandInfo</see>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetSuperscriptInfo">
            <summary>
            Gets the current state of the Superscript command (enabled and/or checked).
            </summary>
            <remarks>
            The state depends on the current caret position and may vary if the caret moves. It refers to 
            the allowed commands and does not check if issuing the command make sense. Therefore setting
            bold inside a tag that is already bold, doesn't make any sense. But it will result in valid
            HTML and therefore issuing the command wil allowed. It is up the host application to build a 
            more clever user interface by checking the parent/child hierachies.
            </remarks>
            <returns>Returns a value of type <see cref="T:GuruComponents.Netrix.HtmlCommandInfo">HtmlCommandInfo</see>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetUnderlineInfo">
            <summary>
            Gets the current state of the Underline command (enabled and/or checked).
            </summary>
            <remarks>
            The state depends on the current caret position and may vary if the caret moves. It refers to 
            the allowed commands and does not check if issuing the command make sense. Therefore setting
            bold inside a tag that is already bold, doesn't make any sense. But it will result in valid
            HTML and therefore issuing the command wil allowed. It is up the host application to build a 
            more clever user interface by checking the parent/child hierachies.
            </remarks>
            <returns>Returns a value of type <see cref="T:GuruComponents.Netrix.HtmlCommandInfo">HtmlCommandInfo</see>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.SetHtmlFormat(GuruComponents.Netrix.HtmlFormat)">
             <summary>
             Sets the HTML format (eg ordered list, paragraph, etc.) of the current text.
             </summary>
             <example>
             You may have a click handler for a tool bar. Then the following example shows how to use the
             Tag property of a ToolBarItem from the SyncFusion UI package:
             <code>
            private void barItemFormat_Click(object sender, System.EventArgs e)
            {
                Syncfusion.Windows.Forms.Tools.XPMenus.BarItem barItem = (Syncfusion.Windows.Forms.Tools.XPMenus.BarItem) sender;
                switch (barItem.Tag.ToString())
                {
                    case "bold":
                        this.htmlEditor1.TextFormatting.ToggleBold();
                        break;
                    case "italic":
                        this.htmlEditor1.TextFormatting.ToggleItalics();
                        break;
                    case "underline":
                        this.htmlEditor1.TextFormatting.ToggleUnderline();
                        break;
                    case "superscript":
                        this.htmlEditor1.TextFormatting.ToggleSuperscript();
                        break;
                    case "subscript":
                        this.htmlEditor1.TextFormatting.ToggleSubscript();
                        break;
                    case "strikethrough":
                        this.htmlEditor1.TextFormatting.ToggleStrikethrough();
                        break;
                    case "indent":
                        this.htmlEditor1.TextFormatting.Indent();
                        break;
                    case "outdent":
                        this.htmlEditor1.TextFormatting.UnIndent();
                        break;
                    case "forecolor":
                        ColorWizardDlg = new ColorWizard();
                        ColorWizardDlg.FontForeColor = this.htmlEditor1.TextFormatting.ForeColor;
                        ColorWizardDlg.FontBackColor = this.htmlEditor1.TextFormatting.BackColor;
                        if (ColorWizardDlg.ShowDialog() == DialogResult.OK)
                        {
                            this.htmlEditor1.TextFormatting.ForeColor = ColorWizardDlg.FontForeColor;
                            this.htmlEditor1.TextFormatting.BackColor = ColorWizardDlg.FontBackColor;
                        }
                        break;
                    case "fontname":
                        FontWizardDlg = new FontWizard();
                        FontWizardDlg.FontName = this.htmlEditor1.TextFormatting.FontName;
                        FontWizardDlg.FontSize = this.htmlEditor1.TextFormatting.FontSize;
                        if (FontWizardDlg.ShowDialog() == DialogResult.OK)
                        {
                            this.htmlEditor1.TextFormatting.FontName = FontWizardDlg.FontName;
                            this.htmlEditor1.TextFormatting.FontSize = FontWizardDlg.FontSize;
                        }
                        break;
                    case "fontsize":
                        ///
                        break;
                    case "justifyleft":
                        this.htmlEditor1.TextFormatting.SetAlignment(Alignment.Left);
                        break;
                    case "justifycenter":
                        this.htmlEditor1.TextFormatting.SetAlignment(Alignment.Center);
                        break;
                    case "justifyright":
                        this.htmlEditor1.TextFormatting.SetAlignment(Alignment.Right);
                        break;
                    case "justifyfull":
                        this.htmlEditor1.TextFormatting.SetAlignment(Alignment.Full);
                        break;
                    case "orderlist":
                        this.htmlEditor1.Document.CreateOrderedList();
                        break;
                    case "unorderlist":
                        this.htmlEditor1.Document.CreateUnorderedList();
                        break;
                        /// TABLE
                    case "insertrow":
                        this.htmlEditor1.TableFormatter.InsertTableRow();
                        break;
                    case "insertcolumn":
                        this.htmlEditor1.TableFormatter.InsertTableColumn();
                        break;                    
                    case "deleterow":
                        this.htmlEditor1.TableFormatter.DeleteTableRow();
                        break;
                    case "deletecolumn":
                        this.htmlEditor1.TableFormatter.DeleteTableColumn();
                        break;                    
                    case "deletecell":
                        this.htmlEditor1.TableFormatter.DeleteCell();
                        break;
                    case "insertcell":
                        this.htmlEditor1.TableFormatter.InsertCell();
                        break;                    
                    case "mergecells":
                        this.htmlEditor1.TableFormatter.MergeCells();
                        break;
                    case "mergeleft":
                        this.htmlEditor1.TableFormatter.MergeLeft();
                        break;
                    case "mergeright":
                        this.htmlEditor1.TableFormatter.MergeRight();
                        break;
                    case "mergetop":
                        this.htmlEditor1.TableFormatter.MergeUp();
                        break;
                    case "mergebottom":
                        this.htmlEditor1.TableFormatter.MergeDown();
                        break;
                    case "splitcellvertical":
                        this.htmlEditor1.TableFormatter.SplitVertical();
                        break;
                    case "splitcellhorizontal":
                        this.htmlEditor1.TableFormatter.SplitHorizontal();
                        break;
                        /// PARA
                    case "h1":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Heading1);
                        break;
                    case "h2":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Heading2);
                        break;
                    case "h3":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Heading3);
                        break;
                    case "h4":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Heading4);
                        break;
                    case "h5":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Heading5);
                        break;
                    case "h6":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Heading6);
                        break;
                    case "paragraph":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Paragraph);
                        break;
                    case "removeformat":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Normal);
                        break;
                    case "preformatted":
                        this.htmlEditor1.TextFormatting.SetHtmlFormat(HtmlFormat.Formatted);
                        break;
                }
            }
             </code>
             To use other packages like Infragistics just replace the first line of the method to get the Tag property
             of your favorite ToolBar.
             <para>
             To use the .NET standard menu items you can still use the toolbar, but you must set your own class, derive
             from the internal one and add the missing <c>Tag</c> property. Then write the values of the case branches
             in that property of each BarItem or ToolButton and attach the method as click handler.
             </para>
             </example>
             <param name="format">Formatting instruction from <see cref="T:GuruComponents.Netrix.HtmlFormat">HtmlFormat</see> enumeration.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.MapAlignment(GuruComponents.Netrix.Alignment)">
            <summary>
            This methods maps the aligment enumeration used from host application to
            the internally used IDM commands.
            </summary>
            <param name="alignment">Aligment value. <see cref="T:GuruComponents.Netrix.Alignment"/></param>
            <returns>IDM command or -1 in case of unrecognized enum value</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.DirectionRtlDocument(System.Boolean)">
            <summary>
            Set the whole document to LTR (left to right) or RTL (right to left) mode.
            </summary>
            <remarks>
            RTL is used for languages primarily running from right to left, like arabic,
            whereas LTR is used for western languages.
            </remarks>
            <param name="rtl">True set RTL, false LTR. Both cases set the attribute.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.DirectionRtlBlock(System.Boolean)">
            <summary>
            Set a block (paragraph, header) to LTR (left to right) or RTL (right to left) mode.
            </summary>
            <remarks>
            RTL is used for languages primarily running from right to left, like arabic,
            whereas LTR is used for western languages.
            </remarks>
            <param name="rtl">True set RTL, false LTR. Both cases set the attribute.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.DirectionRtlInline(System.Boolean)">
            <summary>
            Set an inline element to LTR (left to right) or RTL (right to left) mode.
            </summary>
            <remarks>
            RTL is used for languages primarily running from right to left, like arabic,
            whereas LTR is used for western languages.
            </remarks>
            <param name="rtl">True set RTL, false LTR. Both cases set the attribute.</param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.SetAlignment(GuruComponents.Netrix.Alignment)">
            <summary>
            Align the current block selection or current block.
            </summary>
            <remarks>Full alignment justifies the text.</remarks>
            <param name="alignment"></param>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.GetAlignment">
            <summary>
            Get the current Alignment of the paragraph where the caret resides.
            </summary>
            <returns>A value of the Alignment enumeration.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleBold">
            <summary>
            Toggles the current selection with the bold formatting (STRONG tag).
            </summary>
            <remarks>
            This applies always to selected text only or inserts an empty tag.
            </remarks>
            <example>
            The following code assumes you have a toolbar and the <c>Tag</c> property set properly.
            The event handler simply checks the Tag property and calls the toggle methods accordingly:
            <code>
            private void toolBarFormatting_ButtonClick(object sender, System.Windows.Forms.ToolBarButtonClickEventArgs e)
            {
               ToolBarButton tb = e.Button;
               switch (tb.Tag.ToString())
               {
                   case "B":
                   this.htmlEditor1.TextFormatting.ToggleBold();
                   break;
                   case "U":
                   this.htmlEditor1.TextFormatting.ToggleUnderline();
                   break;
                   case "I":
                   this.htmlEditor1.TextFormatting.ToggleItalics();
                   break;
               }
            }
            </code>
            </example>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleItalics">
            <summary>
            Toggles the current selection with the italic formatting (EM tag).
            </summary>
            <remarks>
            This applies always to selected text only or inserts an empty tag.
            </remarks>
            <example>
            The following code assumes you have a toolbar and the <c>Tag</c> property set properly.
            The event handler simply checks the Tag property and calls the toggle methods accordingly:
            <code>
            private void toolBarFormatting_ButtonClick(object sender, System.Windows.Forms.ToolBarButtonClickEventArgs e)
            {
               ToolBarButton tb = e.Button;
               switch (tb.Tag.ToString())
               {
                   case "B":
                   this.htmlEditor1.TextFormatting.ToggleBold();
                   break;
                   case "U":
                   this.htmlEditor1.TextFormatting.ToggleUnderline();
                   break;
                   case "I":
                   this.htmlEditor1.TextFormatting.ToggleItalics();
                   break;
               }
            }
            </code>
            This makes the buttons work, but they still do not appear pushed-on, when the caret is inside a bold or italic tag.
            <para>
            To checkout the current position add an event handler for SelectionChanged events. If you have already done this using the PropertyGrid, it is not necessary to use an additional handler:
            </para>
            <code>
            this.htmlEditor1.Selection.SelectionChanged += new  GuruComponents.NetrixEvents.SelectionChangedEventHandler (Selection_SelectionChanged);
            </code>
            Using the current element will work under most circumstances, but is not yet perfected. If a complete paragraph is 
            bold and somewhere inside is an italic formatting, this method will recognize the italic element and “ignore” 
            the bold one. The toggle button for bold will then not appear pushed-on, but clicking it will remove the 
            current bold formatting, which is the exact opposite operation to the one that is expected.
            <para>
            To do it the right way, you need to traverse the parent tree beginning from the current element. This is easy, because the component does feature the correct methods for this operation.
            </para>
            <para>
            The event handler checks for some tags currently under the caret and sets the buttons after entering such element:
            </para>
            <code>
            private void Selection_SelectionChanged(object sender, GuruComponents.NetrixEvents.SelectionChangedEventArgs e)
            {
              // some other stuff here
              this.toolBarButtonB.Pushed = false;
              this.toolBarButtonI.Pushed = false;
              this.toolBarButtonU.Pushed = false;
              // Build element collection from current element in
              ElementCollection ec = this.htmlEditor1.Selection.GetParentHierarchy(element);
              // Add current element to the first position
              ec.Insert(0, element);
              // traverse the hierarchy to check out which buttons should set
              foreach (IElement el in ec)
              {
                switch (el.TagName)
                {
                    case "STRONG":
                    case "B":
                        this.toolBarButtonB.Pushed = true;
                        break;
                    case "EM":
                    case "I":
                        this.toolBarButtonI.Pushed = true;
                        break;
                    case "U":
                        this.toolBarButtonU.Pushed = true;
                        break;
                }
              }
            }
            </code>
            The method works this way: First, it releases all buttons. Then it checks for the current parent hierarchy and 
            adds the current element to the first position of the hierarchy. Next, a simple loop goes through the collection 
            and if an element associated with a button is found, the button appearance changes to pushed-in. As you can see, 
            this method is somewhat fuzzy against the elements. Even if the ToggleBold method sets &lt;STRONG&gt; tags, it 
            can check out for &lt;B&gt;. Using the toggle method again will replace the &lt;B&gt; tag with &lt;STRONG&gt;. The same happens with &lt;I&gt; and &lt;EM&gt;. Internally &lt;EM&gt; is the preferred tag.
            </example>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleStrikethrough">
            <summary>
            Toggles the current selection with the strikethrough formatting (STRIKE tag).
            </summary>
            <remarks>
            This applies always to selected text only or inserts
            an empty tag.
            <para>
            For an in-depth explanation of using the toggle commands see 
            <see cref="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleBold">ToggleBold</see>.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleSubscript">
            <summary>
            Toggles the current selection with the subscript formatting (SUB tag).
            </summary>
            <remarks>
            This applies always to selected text only or inserts
            an empty tag.
            <para>
            For an in-depth explanation of using the toggle commands see 
            <see cref="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleBold">ToggleBold</see>.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleSuperscript">
            <summary>
            Toggles the current selection with the superscript formatting (SUP tag).
            </summary>
            <remarks>
            This applies always to selected text only or inserts
            an empty tag.
            <para>
            For an in-depth explanation of using the toggle commands see 
            <see cref="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleBold">ToggleBold</see>.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleUnderline">
            <summary>
            Toggles the current selection with the underline formatting (U tag).
            </summary>
            <remarks>
            This applies always to selected text only or inserts
            an empty tag.
            <para>
            For an in-depth explanation of using the toggle commands see 
            <see cref="M:GuruComponents.Netrix.HtmlTextFormatting.ToggleBold">ToggleBold</see>.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.Indent">
            <summary>
            Indents the current text.
            </summary>
            <remarks>
            This applies always to the whole paragraph, or if in an ordered or unorderlist, for the current bullet.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.UnIndent">
            <summary>
            Unindents the current text.
            </summary>
            <remarks>
            This applies always to the whole paragraph. If there is no outdent
            level is available the command will be ignored.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.HtmlTextFormatting.ConvertMSHTMLColor(System.Object)">
            <summary>
            Converts an MSHTML color to a Framework color.
            </summary>
            <remarks>
             Internally it is COLORREF of type DWORD.
            </remarks>
            <param name="colorValue">object colorValue - The color value returned from MSHTML</param>
            <returns>Color which the parameter represents</returns>
        </member>
        <member name="T:GuruComponents.Netrix.InternetConnectState">
            <summary>
            Provides state information about internet connection where
            the control is running. This is a bitfield.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.MSHTMLSite">
            <summary>
            This is the basic implementation of the MSHTML host.
            </summary>
            <remarks>
            This class implements the interfaces building
            the base services and the basic editor host, which implements TAB key, table recognition and DEL
            key support.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.MSHTMLSite.htmlEditor">
            the Control used to host (and parent) the mshtml window
        </member>
        <member name="F:GuruComponents.Netrix.MSHTMLSite.oleDocumentObject">
            <summary>
            the mshtml instance and various related objects
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.MSHTMLSite.WithUI">
            <summary>
            Show UI on start?
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.MSHTMLSite.propNotifyCookie">
            <summary>
            cookie representing our sink
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.MSHTMLSite.#ctor(GuruComponents.Netrix.HtmlEditor)">
            <summary>
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.MSHTMLSite.DataObjectConverter">
            <summary>
            Access to drop information after dragdrop operations. The object
            converter contains the dropped element.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.MSHTMLSite.MSHTMLDocument">
            <summary>
            Access to current document. The set accessor should only set to null during cleanup.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.MSHTMLSite.ActivateMSHTML">
            <overloads/>
            <summary>
            Activate with UI activation. 
            </summary>
            <remarks>
            UI activation means that the caret appears immediately after the designer surface appears, whether or not the
            control has the focus.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.MSHTMLSite.ActivateMSHTML(System.Boolean)">
            <summary>
            Activate the editor
            </summary>
            <param name="withUI">Activates the UI of the control immediately after start up.</param>
            <remarks>
            UI activation means that the caret appears immediately after the designer surface appears, whether or not the
            control has the focus.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.MSHTMLSite.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.MSHTMLSite.CreateMSHTML">
            <summary>
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.MSHTMLSite.ParentResize">
            <summary>
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.MSHTMLSite.GetExternal(System.Object@)">
            <summary>
            Called if in JScript windows.external.WhatEver is being executed.
            </summary>
            <remarks>
            E_NOTIMPL = fires native error window
            E_DEFAULTACTION = security exception
            E_FAIL = unspecified error
            E_ABORT = suppress an native window
            E_HANDLE = provide valid handle to invoke code
            E_UNEXPECTED = unexpected error
            E_POINTER = pointer expected
            E_NOINTERFACE = null or not object
            E_ACCESSDENIED = security error
            E_OUTOFMEMORY = out of mem error
            </remarks>
            <param name="ppDispatch"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.NetRixControlDesigner">
            <summary>
            Adds the license manager verb (action) to context menu at VS.NET design time.
            </summary>
            <remarks>
            THIS CLASS CANNOT BE USED FROM USER CODE. IT SUPPORTS THE NETRIX DESIGN TIME INFRASTRUCTURE ONLY.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.NetRixControlDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            Filters the list of properties in the property grid.
            </summary>
            <remarks>
            THIS METHOD CANNOT BE USED FROM USER CODE. IT SUPPORTS THE NETRIX DESIGN TIME INFRASTRUCTURE ONLY.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.NetRixControlDesigner.Verbs">
            <summary>
            Creates a new collection of designer verbs.
            </summary>
            <remarks>
            THIS PROPERTY CANNOT BE USED FROM USER CODE. IT SUPPORTS THE NETRIX DESIGN TIME INFRASTRUCTURE ONLY.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.ClientSite">
            <summary>
            This is the implementation of the <see cref="T:GuruComponents.Netrix.ComInterop.Interop.IOleClientSite"/> interface.
            Additionally the internal authentication was implemented later.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.InternetSessionFactory.GetIInternetSession">
            <summary>
            Gets ISessionFactory interface.
            </summary>
            <remarks>
            IInternetSession is the main interface exposed by an asynchronous pluggable protocol
            to handle private mime types.
            </remarks>
            <returns>Returns IInternetSession handler.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.FileProtocolHandler">
            <summary>
            This is the implementation of IInternetProtocol, the main class for using asynchronous pluggable
            protocol.
            </summary>
            <remarks>
            <para>
            This class and the implementation of IInternetProtocolSink communicate closely during
            load operations to resolve the local paths whereever relative paths used in src or href attributes.
            </para>
            <para>
            The implementation uses only Load operations, not real downloads from network, therefore some methods
            are not fully implemented.
            </para>
            </remarks> 
        </member>
        <member name="M:GuruComponents.Netrix.Networking.FileProtocolHandler.Start(System.String,GuruComponents.Netrix.ComInterop.Interop.IInternetProtocolSink)">
            <summary>
            Called during the start of any load sequence. If the caller does not provide a valid source, such
            as an empty string, a standard HTML code block will created.
            </summary>
            <param name="szUrl">Complete URL to download from, including pluggable protocol.</param>
            <param name="protocolSink">The IInternetProtocolSink interface, to which the loader communicates.</param>
            <returns>0 in case of success</returns>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.FileProtocolHandlerFactory">
            <summary>
            Creates a protocol handler to handle file based loading of documents.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.FileProtocolHandlerFactory.#ctor(GuruComponents.Netrix.IHtmlEditor)">
            <summary>
            Creates a loader that loads file based documents and belongs to the referenced editor.
            </summary>
            <param name="editor">The editor this handler blongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.FileProtocolHandlerFactory.GetIInternetProtocol">
            <summary>
            Gets IInternetProtocol interface.
            </summary>
            <remarks>
            IInternetProtocol is the main interface exposed by an asynchronous pluggable protocol. 
            This interface and the IInternetProtocolSink interface communicate with 
            each other very closely during download operations.
            </remarks>
            <returns>Returns IIneternetProtocol handler.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.FileProtocolHandlerFactory.DownloadControllerDelegate">
            <summary>
            A delegate which is used to invoke the private handler once a resource download is required.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="F:GuruComponents.Netrix.Networking.FileProtocolHandlerFactory.AllowDownloadDelegate">
            <summary>
            Allows an external method to handle downloads instead of the internal procedure. 
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.HttpBaseClass">
            <summary>
            Basic HTTP loader class.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.HttpBaseClass.#ctor(System.String,System.String,System.String,System.Int32,System.Net.ICredentials,System.String,GuruComponents.Netrix.HtmlEditor)">
            <summary>
            Creates a new instance of the HTTP loader class.
            </summary>
            <param name="HttpUserName">User name, required only if authentication is necessary.</param>
            <param name="HttpUserPwd">Password, required only if authentication is necessary.</param>
            <param name="HttpProxyServer">Proxy server, optional. Provide empty string if none is required.</param>
            <param name="HttpProxyPort">Port the proxy is listening to.</param>
            <param name="HttpRequest">Current request data.</param>
            <param name="proxyCredentials"></param>
            <param name="editor">Editor the HTTP loader belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.HttpBaseClass.CreateWebRequest(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            This method creates secure/non secure web
            request based on the parameters passed.
            </summary>
            <param name="uri"></param>
            <param name="collHeader">This parameter of type
               NameValueCollection may contain any extra header
               elements to be included in this request      </param>
            <param name="RequestMethod">Value can POST OR GET</param>
            <param name="NwCred">In case of secure request this would be true</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.HttpBaseClass.GetRedirectURL(System.Net.HttpWebResponse,System.String@)">
            <summary>
            This method retreives redirected URL from
            response header and also passes back
            any cookie (if there is any)
            </summary>
            <param name="webresponse"></param>
            <param name="Cookie"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.HttpBaseClass.GetFinalResponse(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Get the response as binary data.
            </summary>
            <param name="baseUri">URI requested.</param>
            <param name="Cookie">Cookie data, if any.</param>
            <param name="RequestMethod">The method used, like GET or POST.</param>
            <param name="NwCred">Tells the method that this is a secure request.</param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.HttpProtocolHandlerFactory">
            <summary>
            HttpProtocolHandlerFactory class. This class implements IProtocolFactory interface.
            </summary>
            <remarks>
            The purpose is a custom loader mechanism. It allows the control to intercept the loading procedure and
            change the content while reading bytes.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.HttpProtocolHandlerFactory.GetIInternetProtocol">
            <summary>
            Gets IInternetProtocol interface.
            </summary>
            <remarks>
            IInternetProtocol is the main interface exposed by an asynchronous pluggable protocol. 
            This interface and the IInternetProtocolSink interface communicate with 
            each other very closely during download operations.
            </remarks>
            <returns>Returns IIneternetProtocol handler.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.HttpRequestResponse">
            <summary>
            Receives a request and send the response.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.HttpRequestResponse.#ctor(System.String,System.String)">
            <summary>
            Constructor of class, set request data and request URI.
            </summary>
            <param name="pRequest">The request data.</param>
            <param name="pURI">The request URI.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.HttpRequestResponse.SendRequest(GuruComponents.Netrix.HtmlEditor,System.Int32)">
            <summary>
            This public interface receives the request and send the response of type byte array
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.MhtBuilder">
            <summary>
            This class provides support for creation of MHTML format files.
            </summary>
            <remarks>
            MHTML stands for MIME HTML. It is a standard for including resources that in usual HTTP pages are linked externally, 
            such as images and sound files, in the same file as the HTML code. The included data files are encoded using MIME. 
            This format is sometimes referred to as MHT, after the suffix .mht given to such files by default when created by 
            Microsoft Word, Internet Explorer or Opera.
            <para>
            The main idea of the MHTML standard is that you send a HTML document, together with in-line graphics, applets, etc., and also other linked documents if you so wish, in a MIME multipart/related body part. Links in the HTML to other included parts can be provided by CID (Content-ID) URLs or by any other kind of URI, and the linked body part is identified in its heading by either a Content-ID (linked to by CID URLs) or a Content-Location (linked to by any other kind of URL). (In fact, the "Content-ID: foo@bar header" can be seen as a special case of the "Content-Location: CID: foo@bar header".) 
            </para>
            <para>The Content-Location identifies a URI for a content part, the part need not be universally retrievable using this base. 
            </para>
            <para>The Content-Base identifies a base URI for a content, or for all objects within it which do not have their own Content-Base. 
            </para>
            <para>
            URIs in HTML-formatted messages and in Content-Location headers can be absolute and relative. If they are relative, and a base can be found, they are to be converted to absolute URIs before matching with other body parts. If no base can be found, then exact matching of the relative URIs in the HTML and the Content-Location of the linked parts is performed instead. The base can be found in a surrounding absolute Content-Location header.
            </para>
            <b>Note: </b> Before NetRix v1.6 the editor does not provide support for loading MHT documents.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.#ctor(System.String)">
            <summary>
            Creates an instance and the object is responsible for one MHT document.
            </summary>
            <param name="szUrl">URI of request which is packed as MHT.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.GetStringBuilder">
            <summary>
            <see cref="T:System.Text.StringBuilder"/> which contains the MHT document data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.AddQuotedString(System.String)">
            <summary>
            Add a quoted string to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="content">The content being added.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.AddQuotedString(System.String,System.Boolean)">
            <summary>
            Add a quoted string to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="content">The content being added.</param>
            <param name="addNewLine">Whether or not a new line is being added after content.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.AppendNewLine">
            <summary>
            Adds a newline.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.AppendText(System.String)">
            <summary>
            Appends text without any quotation.
            </summary>
            <param name="text">The text being added.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.AppendText(System.String,System.Boolean)">
            <summary>
            Appends text without any quotation and a newline.
            </summary>
            <param name="text">The text being added.</param>
            <param name="addNewLine">Whether or not a new line is being added after text.</param>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.AppendBoundary">
            <summary>
            Append boundary information.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.AppendChunkBase64(System.Byte[],System.Int32)">
            <summary>
            Append binary content Base64 encoded.
            </summary>
            <param name="data">The data.</param>
            <param name="chunk">The chunk length in bytes.</param>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable">
            <summary>
            <para>
            Robust and fast implementation of Quoted Printable
            Multipart Internet Mail Encoding (MIME) which encodes every 
            character, not just "special characters" for transmission over 
            SMTP.
            </para>
            <para>
            More information on the quoted-printable encoding can be found
            here: http://www.freesoft.org/CIE/RFC/1521/6.htm
            </para>
            </summary>
            <remarks>
            <para>
            detailed in: RFC 1521
            </para>
            <para>
            more info: http://www.freesoft.org/CIE/RFC/1521/6.htm
            </para>
            <para>
            The QuotedPrintable class encodes and decodes strings and files
            that either were encoded or need encoded in the Quoted-Printable
            MIME encoding for Internet mail. The encoding methods of the class
            use pointers wherever possible to guarantee the fastest possible 
            encoding times for any size file or string. The decoding methods 
            use only the .NET framework classes.
            </para>
            <para>
            The Quoted-Printable implementation
            is robust which means it encodes every character to ensure that the
            information is decoded properly regardless of machine or underlying
            operating system or protocol implementation. The decode can recognize
            robust encodings as well as minimal encodings that only encode special
            characters and any implementation in between. Internally, the
            class uses a regular expression replace pattern to decode a quoted-
            printable string or file.
            </para>
            </remarks>
            <example>
            This example shows how to quoted-printable encode an html file and then
            decode it.
            <code>
            string encoded = QuotedPrintable.EncodeFile(
            	@"C:\WEBS\wwwroot\index.html"
            	);
            
            string decoded = QuotedPrintable.Decode(encoded);
            
            Console.WriteLine(decoded);
            </code>
            </example>
        </member>
        <member name="F:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.RFC_1521_MAX_CHARS_PER_LINE">
            <summary>
            Gets the maximum number of characters per quoted-printable
            line as defined in the RFC minus 1 to allow for the =
            character (soft line break).
            </summary>
            <remarks>
            (Soft Line Breaks): The Quoted-Printable encoding REQUIRES 
            that encoded lines be no more than 76 characters long. If 
            longer lines are to be encoded with the Quoted-Printable 
            encoding, 'soft' line breaks must be used. An equal sign 
            as the last character on a encoded line indicates such a 
            non-significant ('soft') line break in the encoded text.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.Encode(System.String)">
            <summary>
            Encodes a very large string into the Quoted-Printable
            encoding for transmission via SMTP
            </summary>
            <param name="toencode">
            the very large string to encode
            </param>
            <returns>The Quoted-Printable encoded string</returns>
            <exception cref="T:System.ObjectDisposedException">
            A problem occurred while attempting to read the encoded 
            string.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to allocate a buffer for the
            returned string. 
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs, such as the stream being closed.
            </exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">
            The charsperline argument is less than or equal to 0.
            </exception>
            <remarks>
            This method encodes a large string into the quoted-printable
            encoding and then properly formats it into lines of 76 characters
            using the <see cref="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.FormatEncodedString(System.String,System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.Encode(System.String,System.Int32)">
            <summary>
            Encodes a very large string into the Quoted-Printable
            encoding for transmission via SMTP
            </summary>
            <param name="toencode">
            the very large string to encode
            </param>
            <param name="charsperline">
            the number of chars per line after encoding
            </param>
            <returns>The Quoted-Printable encoded string</returns>
            <exception cref="T:System.ObjectDisposedException">
            A problem occurred while attempting to read the encoded 
            string.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to allocate a buffer for the
            returned string. 
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs, such as the stream being closed.
            </exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">
            The charsperline argument is less than or equal to 0.
            </exception>
            <remarks>
            This method encodes a large string into the quoted-printable
            encoding and then properly formats it into lines of 
            charsperline characters using the <see cref="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.FormatEncodedString(System.String,System.Int32)"/> 
            method.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.EncodeFile(System.String)">
            <summary>
            Encodes a file's contents into a string using
            the Quoted-Printable encoding.
            </summary>
            <param name="filepath">
            The path to the file to encode.
            </param>
            <returns>The Quoted-Printable encoded string</returns>
            <exception cref="T:System.ObjectDisposedException">
            A problem occurred while attempting to encode the 
            string.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to allocate a buffer for the
            returned string. 
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs, such as the stream being closed.
            </exception>  
            <exception cref="T:System.IO.FileNotFoundException">
            The file was not found.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to open
            the file specified in filepath.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            filepath is read-only or a directory.
            </exception>
            <remarks>
            This method encodes a file's text into the quoted-printable
            encoding and then properly formats it into lines of 76 characters
            using the <see cref="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.FormatEncodedString(System.String,System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.EncodeFile(System.String,System.Int32)">
            <summary>
            Encodes a file's contents into a string using
            the Quoted-Printable encoding.
            </summary>
            <param name="filepath">
            The path to the file to encode.
            </param>
            <param name="charsperline">
            the number of chars per line after encoding
            </param>
            <returns>The Quoted-Printable encoded string</returns>
            <exception cref="T:System.ObjectDisposedException">
            A problem occurred while attempting to encode the 
            string.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to allocate a buffer for the
            returned string. 
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs, such as the stream being closed.
            </exception>  
            <exception cref="T:System.IO.FileNotFoundException">
            The file was not found.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to open
            the file specified in filepath.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            filepath is read-only or a directory.
            </exception>
            <remarks>
            This method encodes a file's text into the quoted-printable
            encoding and then properly formats it into lines of 
            charsperline characters using the <see cref="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.FormatEncodedString(System.String,System.Int32)"/> 
            method.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.EncodeSmall(System.String)">
            <summary>
            Encodes a small string into the Quoted-Printable encoding
            for transmission via SMTP. The string is not split
            into lines of X characters like the string that the 
            Encode method returns.
            </summary>
            <param name="s">
            The string to encode.
            </param>
            <returns>The Quoted-Printable encoded string</returns>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <remarks>
            This method encodes a small string into the quoted-printable
            encoding. The resultant encoded string has NOT been separated
            into lined results using the <see cref="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.FormatEncodedString(System.String,System.Int32)"/>
            method.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.EncodeSmallLine(System.String)">
            <summary>
            Encodes a small string with an appended newline into the 
            Quoted-Printable encoding for transmission via SMTP. The 
            string is not split into lines of X characters like the 
            string that the Encode or the EncodeFile methods return.
            </summary>
            <param name="s">
            The string to encode.
            </param>
            <returns>The Quoted-Printable encoded string</returns>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <remarks>
            This method encodes a small string into the quoted-printable
            encoding. The resultant encoded string has NOT been separated
            into lined results using the <see cref="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.FormatEncodedString(System.String,System.Int32)"/>
            method.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.FormatEncodedString(System.String,System.Int32)">
            <summary>
            Formats a quoted-printable string into lines equal to maxcharlen,
            following all protocol rules such as byte stuffing. This method is
            called automatically by the Encode method and the EncodeFile method.
            </summary>
            <param name="qpstr">
            the quoted-printable encoded string.
            </param>
            <param name="maxcharlen">
            the number of chars per line after encoding.
            </param>
            <returns>
            The properly formatted Quoted-Printable encoded string in lines of
            76 characters as defined by the RFC.</returns>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs, such as the stream being closed.
            </exception>  
            <remarks>
            Formats a quoted-printable encoded string into lines of
            maxcharlen characters for transmission via SMTP.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.DecodeFile(System.String)">
            <summary>
            decodes an entire file's contents into plain text that 
            was encoded with quoted-printable.
            </summary>
            <param name="filepath">
            The path to the quoted-printable encoded file to decode.
            </param>
            <returns>The decoded string.</returns>
            <exception cref="T:System.ObjectDisposedException">
            A problem occurred while attempting to decode the 
            encoded string.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is insufficient memory to allocate a buffer for the
            returned string. 
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs, such as the stream being closed.
            </exception>  
            <exception cref="T:System.IO.FileNotFoundException">
            The file was not found.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to open
            the file specified in filepath.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            filepath is read-only or a directory.
            </exception>
            <remarks>
            Decodes a quoted-printable encoded file into a string
            of unencoded text of any size.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.Networking.MhtBuilder.QuotedPrintable.Decode(System.String)">
            <summary>
            Decodes a Quoted-Printable string of any size into 
            it's original text.
            </summary>
            <param name="encoded">
            The encoded string to decode.
            </param>
            <returns>The decoded string.</returns>
            <exception cref="T:System.ArgumentNullException">
            A string is passed in as a null reference.
            </exception>
            <remarks>
            Decodes a quoted-printable encoded string into a string
            of unencoded text of any size.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.MhtNotBuiltException">
            <summary>
            Exception thrown if no MHT content available.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.Networking.SecurityManager">
            <summary>
            Controls the zone management the control is running in if activated.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor">
            <summary>
            Modifies the descriptor content populated to propertygrid.
            </summary>
            <remarks>
            This overwrites the
            default property names and enhances the standard attributes with the DisplayNameAttribute.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
            <summary>
            The constructor called on first access to the property from any designer.
            </summary>
            <remarks>
            This class should not being instantiated directly. It supports the NetRix infrastructure
            and external designers, like VS.NET or the propertygrid.
            </remarks>
            <param name="pd">The descriptor for which the properties beeing requested.</param>
            <param name="filter">The filter which controls the properties not beeing shown.</param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.IsLocalizable">
            <summary>
            Makes the decsriptor localizable.
            </summary>
            <remarks>
            This property is overwritten to return always <c>true</c>.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.IsBrowsable">
            <summary>
            Returns whether this property is browsable (viewable) in the grid.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.IsReadOnly">
            <summary>
            Returns whether this property is readonly.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether this property resetting when the value is overwritten. 
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.ComponentType">
            <summary>
            Returns the type of the component containing this property.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value of the property.
            </summary>
            <param name="component">The component which contains the property.</param>
            <returns>An object that represents the value. It is up to the caller to cast to the right type.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.PropertyType">
            <summary>
            The type of the property themselfes.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Reset the value of the property to the default one.
            </summary>
            <param name="component">The component which contains the property.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the property. 
            </summary>
            <param name="component">The component which contains the property.</param>
            <param name="Value">The value beeing set.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.WebControlPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines a value indicating whether the value of this property needs to be persistend.
            </summary>
            <param name="component">The component which contains the property.</param>
            <returns><c>True</c> if the property should be persistent; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.WindowsEvents">
            <summary>
            Handle events on window and optional on document level.
            </summary>
        </member>
    </members>
</doc>
