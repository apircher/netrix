<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GuruComponents.Netrix.Professional.UI.v45</name>
    </assembly>
    <members>
        <member name="T:GuruComponents.Netrix.UserInterface.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ResourceManager">
            <summary>
            This class controls the resource manager of all UI resources. 
            </summary>
            <remarks>
            The class contains static methods and properties to give other consumers direct access to the recource
            management. Resources are global and apply to all instances of NetRix HtmlEditor.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ResourceManager.GridLanguageType">
            <summary>
            Used to determine the type of attribute names used in a propertygrid.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager.GridLanguageType.Standard">
            <summary>
            The standard names (HTML) are used.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager.GridLanguageType.Localized">
            <summary>
            The localized names (from satellite assemblies) are used.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager.GridLanguage">
            <summary>
            Controls the language for properties in the grid. Set by Toolbar.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager.GridFilter">
            <summary>
            Controls the filter for properties in the grid. Set by Toolbar.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager._customColors">
            <summary>
            A list of colors which is used to fill the custom tab of each color selector control.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager._resources">
            <summary>
            The internal store of the resource manager.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager.currentCulture">
            <summary>
            The current culture
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ResourceManager.baseName">
            <summary>
            The basename for the satellite assemblies namespace.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.Initialize">
            <summary>
            Used to force the initialization from other assemblies. If not used the initialization will start before
            the first call of GetString has finished.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.Initialize(System.Object)">
            <summary>
            Initialize the resource manager with associated document property.
            </summary>
            <param name="htmlDocument">A relation to the active HTML document.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.Initialize(System.Object,System.String)">
            <summary>
            Initialize the resource manager with associated document property.
            </summary>
            <param name="htmlDocument">A relation to the active HTML document.</param>
            <param name="Culture">The culture which is actually beeing set. Should be the current UI culture.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.Initialize(System.Object,System.String,System.Collections.Generic.List{System.Drawing.Color})">
            <summary>
            Initialize the resource manager with associated document property.
            </summary>
            <param name="htmlDocument">A relation to the active HTML document.</param>
            <param name="Culture">The culture which is actually beeing set. Should be the current UI culture.</param>
            <param name="CustomColorsArray">The array of custom colors.</param>		
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.SetGridFilter(GuruComponents.Netrix.UserInterface.ResourceManager.GridFilterType)">
            <summary>
            Set the filter for the property descriptor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.GetGridFilter">
            <summary>
            Get the filter the descriptor should use. Called from PropertyDescriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.SetGridLanguage(GuruComponents.Netrix.UserInterface.ResourceManager.GridLanguageType)">
            <summary>
            Set the language for the property descriptor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.GetGridLanguage">
            <summary>
            Get the language the descriptor should use. 
            </summary>
            <remarks>Called from PropertyDescriptor.</remarks>
            <returns>Type of Language for the PropertyGrid.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ResourceManager.CurrentCulture">
            <summary>
            Sets the current culture form the host application.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ResourceManager.GetString(System.String)">
            <summary>
            Retrieves a string from the embedded resource or the satellites, if any. 
            </summary>
            <remarks>Uses the two
            predefines sets is the current culture is ether english or german.</remarks>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ResourceManager.Resources">
            <summary>
            Gets the resource manager. 
            </summary>
            <remarks>If no resource manager is defined the property will create one.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ResourceManager.CustomColors">
            <summary>
            Gets or sets the custom colors which uses the ColorPicker control to set the custom tab.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ResourceManager.ColorPickerButtonSystemVisible">
            <summary>
            Makes the 'system' color button systemwide visible or invisible.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.AreaCollectionEditor">
            <summary>
            AreaCollectionEditor lets the user edit area tags.
            </summary>
            <remarks>
            Used to build clickable images. This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.AreaCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.AreaCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.AreaCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.AreaCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            User can remove tags.
            </summary>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.AreaCollectionEditor.CanSelectMultipleInstances">
            <summary>
            User cannot select multiple tags at the same time.
            </summary>
            <returns>Returns always <c>false</c>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorPixel">
            <summary>
            Editor to create and edit unit values.
            </summary>
            <remarks>
            A unit value is either a percentage or pixel value in HTML. The editor can build the 
            right values using the mouse instead of keyboard.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorPixel.UIEditorCallback">
            <summary>
            Callback to a customized unit editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (integrated unit editor). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated editor.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorPixel.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUnit.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIUnitEditor">UIUnitEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorPixel.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorAngle">
            <summary>
            Editor to create and edit unit values.
            </summary>
            <remarks>
            A unit value is either a percentage or pixel value in HTML. The editor can build the 
            right values using the mouse instead of keyboard.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorAngle.UIEditorCallback">
            <summary>
            Callback to a customized unit editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (integrated unit editor). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated editor.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorAngle.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorAngle.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIAngleEditor">UIAngleEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorAngle.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor">
            <summary>
            Modifies the descriptor content populated to propertygrid.
            </summary>
            <remarks>
            This overwrites the
            default property names and enhances the standard attributes with the DisplayNameAttribute.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
            <summary>
            The constructor called on first access to the property from any designer.
            </summary>
            <remarks>
            This class should not being instantiated directly. It supports the NetRix infrastructure
            and external designers, like VS.NET or the propertygrid.
            </remarks>
            <param name="pd">The descriptor for which the properties beeing requested.</param>
            <param name="filter">The filter which controls the properties not beeing shown.</param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.IsLocalizable">
            <summary>
            Makes the decsriptor localizable.
            </summary>
            <remarks>
            This property is overwritten to return always <c>true</c>.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.GetResource(System.String,System.String)">
            <summary>
            Retrieve the resource string from localization assembly.
            </summary>
            <remarks>
            The resource strings must follow
            the pattern "Type.Attribute", e.g. "Category.Class".
            </remarks>
            <param name="Type">Type, such as "Attribute", "Category"</param>
            <param name="Element">Attribute name for the given type</param>
            <returns>String with the localized name</returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.Category">
            <summary>
            Indicates the category that the property will appear in.
            </summary>
            <remarks>
            The value will be the value given for the CategoryAttribute
            attribute for the property, if one exists.  If there is no CategoryAttribute, then this will be DefaultCategoryName.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.DisplayName">
            <summary>
            Indicates the name for the property that will be displayed in the PropertyGrid control.
            </summary>
            <remarks>
            The value will be the value given for the
            isplayNameAttribute attribute for the property. If there is no DisplayNameAttribute, then this will be the name of
            the property.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.Description">
            <summary>
            Indicates the description for the property.</summary><remarks>The value will be the value given for the <see cref="T:System.ComponentModel.DescriptionAttribute"/>
            attribute for the property, if one exists. If there is no DescriptionAttribute, then this will be null.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.IsBrowsable">
            <summary>
            Returns whether this property is browsable (viewable) in the grid.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.IsReadOnly">
            <summary>
            Returns whether this property is readonly.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether this property resetting when the value is overwritten. 
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.ComponentType">
            <summary>
            Returns the type of the component containing this property.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value of the property.
            </summary>
            <param name="component">The component which contains the property.</param>
            <returns>An object that represents the value. It is up to the caller to cast to the right type.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.PropertyType">
            <summary>
            The type of the property themselfes.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Reset the value of the property to the default one.
            </summary>
            <param name="component">The component which contains the property.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the property. 
            </summary>
            <param name="component">The component which contains the property.</param>
            <param name="Value">The value beeing set.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.CustomPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines a value indicating whether the value of this property needs to be persistend.
            </summary>
            <param name="component">The component which contains the property.</param>
            <returns><c>True</c> if the property should be persistent; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.DisplayNameAttribute">
            <summary>
            DisplayNameAttribute overwrites the property name for the property grid.
            </summary>
            <remarks>
            If the string is empty the PropertyDescriptor tries to use the resource file
            to gather the string for displaying.
            <para>
            If the string is not empty the resource manager tries to gather the information
            from the given name instead of the attribute (property) name. This allows the
            usage of different properties with the same name.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.DisplayNameAttribute.#ctor">
            <overloads>Instantiate the DisplayNameAttribute class.</overloads>
            <summary>
            The contructor sets the state to an empty string.
            </summary>
            <remarks>
            This constructor supports the NetRix infrastructure and should never be called from user code directly.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.DisplayNameAttribute.#ctor(System.String)">
            <summary>
            The constructor sets the property to a defined text.
            </summary>
            <remarks>
            This constructor supports the NetRix infrastructure and should never be called from user code directly.
            </remarks>
            <param name="Text"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.DisplayNameAttribute.ToString">
            <summary>
            Returns the display name of the property.
            </summary>
            <remarks>
            This method is necessary to support automatic display option some components
            use simple by calling the ToString method.
            </remarks>
            <returns>The Text being displayed instead of the real property name.</returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.TypeEditors.DisplayNameAttribute.DisplayName">
            <summary>
            The Text beeing displayed instead of the real property name.
            </summary>
            <remarks>
            This method is necessary to support automatic display option some components
            use simple by calling the Name property. The name of this property is predefined.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.LinkCollectionEditor">
            <summary>
            StylesheetCollectionEditor edits the collection of &lt;link&gt; tags in the head
            section of the HTML document.
            </summary>    
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.LinkCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.LinkCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.LinkCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.LinkCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            User can remove tags.
            </summary>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.LinkCollectionEditor.CanSelectMultipleInstances">
            <summary>
            User cannot select multiple tags at the same time.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.MetaCollectionEditor">
            <summary>
            MetaCollectionEditor lets the user edit META tags. 
            </summary>
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.MetaCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.MetaCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.MetaCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.MetaCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            User can remove tags.
            </summary>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.MetaCollectionEditor.CanSelectMultipleInstances">
            <summary>
            User cannot select multiple tags at the same time.
            </summary>
            <returns>Returns always <c>false</c>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor">
            <summary>
            OptionCollectionEditor lets the user edit OPTION tags within a SELECT tag.
            </summary>
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            <para>
            This editor supports OPTION and OPTGROUP tags.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor.CreateNewItemTypes">
            <summary>
            This method defines the both option types for the dropdown button.
            </summary>
            <remarks>
            The purpose of this method is to prepare the editor for handling to different instances.
            This is necessary to support the HTML 4.0 SELECT tag which can handle OPTION as well as OPTGROUP
            elements the same time.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            User can remove tags.
            </summary>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor.CanSelectMultipleInstances">
            <summary>
            User cannot select multiple tags at the same time.
            </summary>
            <returns>Returns always <c>false</c>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.OptionOnlyCollectionEditor">
            <summary>
            OptionCollectionEditor lets the user edit OPTION tags within a SELECT tag.
            </summary>
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            <para>
            This editor supports OPTION tags only.
            </para>
            <seealso cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor">OptionCollectionEditor</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionOnlyCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionOnlyCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionOnlyCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionOnlyCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            User can remove tags.
            </summary>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.OptionOnlyCollectionEditor.CanSelectMultipleInstances">
            <summary>
            User cannot select multiple tags at the same time.
            </summary>
            <returns>Returns always <c>false</c>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.ParamCollectionEditor">
            <summary>
            ParamCollectionEditor lets the user edit PARAM tags within a OBJECT or EMBED tag.
            </summary>
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            <para>
            This editor supports OPTION tags only.
            </para>
            <seealso cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.OptionCollectionEditor">OptionCollectionEditor</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ParamCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ParamCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ParamCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ParamCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            Allows the removing of instances.
            </summary>
            <remarks>
            Removing an instance will change the DOM immediataly. It cannot be guaranteed that the UNDO manager will
            recognize the change all the time.
            </remarks>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ParamCollectionEditor.CanSelectMultipleInstances">
            <summary>
            Prohibits the selection of multiple instances.
            </summary>
            <remarks>
            It is not allowed to edit multiple instances of the script editor at the same time.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.ScriptCollectionEditor">
            <summary>
            ScriptCollectionEditor lets the user edit script blocks outside the editor using
            the PropertyGrid.
            </summary>
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            <para>
            This is a <seealso cref="T:System.ComponentModel.Design.CollectionEditor">
            System.ComponentModel.Design.CollectionEditor</seealso> derived class changing some of the
            base features via reflection.</para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ScriptCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ScriptCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ScriptCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ScriptCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            Prohibits the removing of instances.
            </summary>
            <remarks>
            The purpose of this method is to avoid the user from removing script blocks using the collection editor.
            This is necessary because the user cannot recognize the real position of the script fragment within the
            HTML page using this editor. Removing and adding can cause scripting errors because JavaScript and VBScript
            fragments depends on their position of the page.
            <para>
            It is recommended to replace the script editing features with a more sophisticated solution based on the DOM
            instead of using this editor in a real life environment. The purpose of this editor is to have an fast and simple
            access to the script fragments on the page without any programming tasks required.
            </para>
            </remarks>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>false</c> to prohibit instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.ScriptCollectionEditor.CanSelectMultipleInstances">
            <summary>
            Prohibits the selection of multiple instances.
            </summary>
            <remarks>
            It is not allowed to edit multiple instances of the script editor at the same time.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor">
            <summary>
            StylesheetCollectionEditor edits the collection of STYLE tags in the head
            section of the HTML document.
            </summary>    
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            <para>
            This editor supports STYLE tags only.
            </para>
            <seealso cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.LinkCollectionEditor">LinkCollectionEditor</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor.CanRemoveInstance(System.Object)">
            <summary>
            User can remove tags.
            </summary>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor.CanSelectMultipleInstances">
            <summary>
            User cannot select multiple tags at the same time.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.StyleSelectorEditor">
            <summary>
            StyleSelectorEditor edits the collection of selectors of an embedded style element.
            </summary>    
            <remarks>
            This editor is used to support the PropertyGrid.
            You should not use this class directly from user code as far as you don't write
            your own PropertyGrid support.
            <para>
            This editor supports style rules only. It is used from the 
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor">StyleCollectionEditor</see>.
            </para>
            <seealso cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.StyleCollectionEditor">StyleCollectionEditor</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleSelectorEditor.#ctor(System.Type)">
            <summary>
            Instantiates the collection editor the first time.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and should not beeing used from user code.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleSelectorEditor.CreateCollectionForm">
            <summary>
            Takes the base collection form and apply some changes.
            </summary>
            <remarks>
            This method uses reflection to change the internal collection editor dialog on-thy-fly.
            </remarks>
            <returns>The changed form is beeing returned completely.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleSelectorEditor.CanRemoveInstance(System.Object)">
            <summary>
            User can remove tags.
            </summary>
            <param name="value">The current value. Not beeing used here.</param>
            <returns>Returns always <c>true</c> to allow instance removing.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.StyleSelectorEditor.CanSelectMultipleInstances">
            <summary>
            User cannot select multiple tags at the same time.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor">
            <summary>
            Color TypeEditor for PropertyGrid, which used a direct inctance of the ColorPickerForm.
            </summary>
            <remarks>
            This editor can be replaced by a customized editor using the static callback function.
            See <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.UIEditorCallback">UIEditorCallback</see> for
            more information.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.UIEditorCallback">
            <summary>
            Callback to a customized color editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call the internal color editor. If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated color picker control.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.#ctor">
            <summary>
            The contructor of the color editor dialog.
            </summary>
            <remarks>
            This constructor is used to set various values on first call. This assignes the 
            event handler beeing used and the custom colors set in the custom color tab.
            Using this constructor to set the values results in better perfomance an call but 
            means that the colors cannot be changed if the grid is open. You must close the grid to
            reset the colors.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This editor paints its own thumbnail.
            </summary>
            <remarks>
            This method supports the NetRix infrastructure and cannot be called directly from user code.
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <returns>Always <c>true</c>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            This method generates the colored thumbnail.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIColorEditor">UIColorEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorColor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorComment">
            <summary>
            This editor let the user edit comments. Builds a simple TextBox as the user interface. 
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorComment.UIEditorCallback">
            <summary>
            Callback to a customized comment editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call the internal comment editor. If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated comment editor control.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorComment.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorComment.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UICommentEditor">UICommentEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorComment.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorFont">
            <summary>
            TypeEditor for selecting multiple fonts.
            </summary>
            <remarks>
            Returns list of fonts as comma separated list. Uses the 
            <see cref="T:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl">FontPickerUserControl</see>
            internally.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorFont.UIEditorCallback">
            <summary>
            Callback to a customized font editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call the internal font editor. If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated color picker control.
            <seealso cref="T:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl">FontPickerUserControl</seealso>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorFont.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorFont.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIFontEditor">UIFontEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorFont.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorInt">
            <summary>
            Int editor. Uses the standard string editor if no external callback function is assigned.
            </summary>
            <remarks>
            For conversion of string values into integer see the TypeConverter namespace.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorInt.UIEditorCallback">
            <summary>
            Callback to a customized number editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (simple text field). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated box.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorInt.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorInt.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIIntEditor">UIIntEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorInt.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorScript">
            <summary>
            This editor let the user editor script areas outside the editor.
            </summary>
            <remarks>
            This is only a rudimentary editor, based on a simple multiline textbox. An external editor
            should provide more functionality like line numbering and syntax coloring.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorScript.UIEditorCallback">
            <summary>
            Callback to a customized script editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (enhanced text field). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated TextBox.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorScript.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorScript.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIScriptEditor">UIScriptEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorScript.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorString">
            <summary>
            String editor.
            </summary>
            <remarks>
            Uses the standard string editor if no external callback function is assigned.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorString.UIEditorCallback">
            <summary>
            Callback to a customized string editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (enhanced text field). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated TextBox.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorString.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorString.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIStringEditor">UIStringEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorString.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDwon</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorStyleStyle">
            <summary>
            This is used to present the style editor for attributes containing inline styles.
            </summary>
            <remarks>
            This editor calls the integrated style editor control, placed on a advanced form surface.
            This adds a textbox for style preview to the control.
            For more information about this control see
            <see cref="T:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm">StyleEditorForm</see> class.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorStyleStyle.UIEditorCallback">
            <summary>
            Callback to a customized string editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (enhanced text field). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated TextBox.
            <para>
            A customized editor can use the 
            <see cref="T:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl">StyleControl</see>
            to provide a graphical interface to the user.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorStyleStyle.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorStyleStyle.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIStyleEditor">UIStyleEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorStyleStyle.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as modal. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.Modal">UITypeEditorEditStyle.Modal</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUnit">
            <summary>
            Editor to create and edit unit values.
            </summary>
            <remarks>
            A unit value is either a percentage or pixel value in HTML. The editor can build the 
            right values using the mouse instead of keyboard.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUnit.UIEditorCallback">
            <summary>
            Callback to a customized unit editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (integrated unit editor). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated editor.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUnit.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUnit.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIUnitEditor">UIUnitEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUnit.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as dropdown. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown">UITypeEditorEditStyle.DropDown</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUrl">
            <summary>
            UITypeEditorUrl presents a type editor for URL selection. 
            </summary>
            <remarks>
            This editor calls the <see cref="T:System.Windows.Forms.OpenFileDialog">OpenFileDialog</see> from .NET
            framework as a modal dialog.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUrl.UIEditorCallback">
            <summary>
            Callback to a customized url editor.
            </summary>
            <remarks>
            This callback must be <c>null</c> to call standard editor (<see cref="T:System.Windows.Forms.OpenFileDialog">OpenFileDialog</see>). If it points
            to a method this method should invoke a dialog which is displayed instead of the
            integrated <see cref="T:System.Windows.Forms.OpenFileDialog">OpenFileDialog</see>.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUrl.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This method calls the editor dialog used in the property grid.
            </summary>
            <remarks>
            This method can invoke an internal dialog or an external one. The external one is called whenever a 
            callback is set. To set an external dialog simple set the 
            <see cref="F:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUrl.UIEditorCallback">UIEditorCallback</see> delegate of type
            <see cref="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIUrlEditor">UIUrlEditor</see>.
            </remarks>
            <param name="context">The component which contains the property beeing edited.</param>
            <param name="provider">The service provider which invokes the editor.</param>
            <param name="val">The value currently beeing set in the property.</param>
            <returns>The changed value the user has created using the invoked dialog.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeEditors.UITypeEditorUrl.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Defines the edit style for that control.
            </summary>
            <remarks>
            This component defines the dialog as modal. This value cannot be overwritten by a external
            delegate which produces a customized dialog.
            </remarks>
            <param name="context">The calling component.</param>
            <returns>The style beeing set; always <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.Modal">UITypeEditorEditStyle.Modal</see>.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIUrlEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a src or href attribute where an URL or file
            can selected. 
            </summary>
            <remarks>
            If no callback exists the standard openFileDialog control will
            be used. The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIUnitEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a unit (pixel or percentage value).
            </summary><remarks>
            If no callback exists the <see cref="T:GuruComponents.Netrix.UserInterface.UnitEditor">UnitEditor</see> control will be used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIPixelEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a unit (pixel or percentage value).
            </summary><remarks>
            If no callback exists the <see cref="T:GuruComponents.Netrix.UserInterface.UnitEditor">UnitEditor</see> control will be used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIAngleEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing an angle (in degrees between 0° and 360°).
            </summary><remarks>
            If no callback exists the <see cref="T:GuruComponents.Netrix.UserInterface.AngleEditor">AngleEditor</see> control will be used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIColorEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a color.    
            </summary>
            <remarks>
            If no callback exists the <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl"/> control will be used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIFontEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a font.
            </summary>
            <remarks>
            If no callback exists the <see cref="T:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl">FontPickerUserControl</see> control will be used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIStyleEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a style definition.
            </summary>
            <remarks>
            If no callback exists the <see cref="T:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl">StyleUserControl</see> will be used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UICommentEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a comment.
            </summary>
            <remarks>
            If no callback exists the <see cref="T:GuruComponents.Netrix.UserInterface.UnitEditor">UnitEditor</see> control will be used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIScriptEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a script from a scripting section (JavaScript).
            </summary>
            <remarks>
            If no callback exists a simple text editor is used (based on the <see cref="T:System.Windows.Forms.TextBox"/> control).
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIIntEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing an integer.
            </summary>
            <remarks>
            If no callback exists the the standard editor is used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIStringEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a string.
            </summary>
            <remarks>
            If no callback exists the the standard editor is used.
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeEditors.UIDropListEditor">
            <summary>
            This delegate allows the host application to define a dialog which is called
            whenever the propertygrid edits a attribute containing a dropdown list, build from an enumeration.
            </summary>
            <remarks>
            The signature accepts a string (the old value in propertgrid item) and gets
            a string back as the new item.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterColor">
            <summary>
            This class provides a type converter to convert instances of color from an to html color codes.
            </summary>
            <remarks>
            Html
            color codes are written as three hex codes with a preceding # sign. If the user types a well know name
            the control converts it into the #HHHHHH representing the color.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterColor.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what this type can be created from
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="sourceType">The type of the source data.</param>
            <returns>True if the source type can be converted.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterColor.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a specified type to a native, if possible.
            </summary>
            <remarks>
            This function tries to set
            allways colors as hex strings, even if the user types names.
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture"></param>
            <param name="value">Color of HTML format</param>
            <returns>The converted data as <see langref="object"/>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterColor.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what the type can be converted to.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="destinationType">The destination type in which the converter converts.</param>
            <returns>True if conversion is possible.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterColor.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert user input to a specified type that is delivered to color control.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture">The current culture (not applicable in NetRix).</param>
            <param name="value">Color of type <see cref="T:System.Drawing.Color"/>.</param>
            <param name="destinationType">The destination type in which the converter converts.</param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList">
            <summary>
            This class provides a type converter to convert dropdown lists to divide the UI (language) from
            the internal value. It handles dropdown lists generated from enum or boolean values. In the resource
            file the descriptor has the format "PropertyGrid.XXX" whereas "XXX" is the name of the enum type or
            the string "Boolean". The type is given with its name only, without any part of the namespace.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what this type can be created from
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what the type can be converted to
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates that the UI should request standard values for the list.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Get the collection of default values for the list.
            </summary>
            <remarks>
            For boolean types a short list with the values "true" and "false" will be created.
            <para>
            Use this attribute to get this typeconverter working:
            [TypeConverter(typeof(GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList))]
            </para>
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns always true and does not allow the user to enter own values 
            for droplists.
            </summary>
            <remarks>
            This behavior can be modified by detecting the property name and 
            decide to return false instead. 
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns the localized version of the current value into underlying system type.
            </summary>
            <remarks>
            For boolean values,
            treated here as a collection of two list elements (which represent true and false), the resource must
            return the text for "true" as first value, the text for "false" as second one.
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture">The current UI culture.</param>
            <param name="value">The value from which the converter converts.</param>
            <returns>The value into which the converter has the input converted.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropList.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert the given value from a enum or bool field into the localized version.
            </summary>
            <remarks>
            The boolean values are treated as some special kind of enum, because we display the values as dropdownlist containing "Yes" or "No" list elements.
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture">The current UI culture.</param>
            <param name="value">The value beeing converted.</param>
            <param name="destinationType">The type to which the converter converts the value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection">
            <summary>
            This class provides a type converter which generates predefined values for string properties
            as a drop down list.
            </summary><remarks>
            This is used by properties like usemap, class, and id to have a conjunction
            between the current element and connection points in the current document.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what this type can be created from.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what the type can be converted to
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates that the UI should request standard values for the list.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Get the preselection for either id or classes from the current linked stylesheet, if any.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns always false and does allow the user to enter own values for this drop list.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns the localized version of the current value into underlying system type.
            </summary>
            <remarks>
            This methos accepts all values except empty strings. Empty strings a treated a "no value" and used to remove
            the setting from current selection.
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture">The current UI culture.</param>
            <param name="value">The value from which the converter converts.</param>
            <returns>The value into which the converter has the input converted.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterDropSelection.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert the given value from a enum or bool field into the localized version.
            </summary>
            <remarks>
            
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterFile">
            <summary>
            Sets and resets the file monikers internally used to ease the input for the user
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterFile.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what this type can be created from
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterFile.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a specified type to a native, if possible. 
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture">The current UI culture.</param>
            <param name="value">The value from which the converter converts.</param>
            <returns>The value into which the converter has the input converted.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterFile.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what the type can be converted to.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterFile.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert user input to a specified type that is delivered to open file dialog.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture"></param>
            <param name="value">File name</param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterInt">
            <summary>
            This class provides a type converter to convert instances of color from an to html color codes. Html
            color codes are written as three hex codes with a preceding # sign. If the user types a well know name
            the control converts it into the #HHHHHH representing the color.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterInt.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what this type can be created from
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterInt.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns the localized version of the current value into underlying system type.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture">The current UI culture.</param>
            <param name="value">The value from which the converter converts.</param>
            <returns>The value into which the converter has the input converted.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterInt.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what the type can be converted to.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterInt.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert to a specified type
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum">
            <summary>
            This class is a type converter used to convert the META tag enumerations into strings.
            </summary>
            <remarks>
            It preserves different (customized) strings. The droplist created contains the following 
            META tag names (hardcoded). First, the list of named META tags:
            <list type="bullet">
            <item>Robots</item>
            <item>Description</item>
            <item>Keywords</item>
            <item>Author</item>
            <item>Generator</item>
            <item>Formatter</item>
            <item>Classification</item>
            <item>Copyright</item>
            <item>Rating</item>
            </list>
            Note: The NetRix component will nether set the "Generator" META tag internally. If you
            want your application set this tag this must be done programmatically.
            <para>
            Second, the list of HTTP-Equiv META tags. These tags creating HTTP equivalent headers sent
            to the browser.
            <list type="bullet">
            <item>Content-Disposition</item>
            <item>Expires</item>
            <item>Pragma</item>
            <item>Content-Type</item>
            <item>Content-ScriptType</item>
            <item>Content-StyleType</item>
            <item>Default-Style</item>
            <item>Content-Language</item>
            <item>Refresh</item>
            <item>Window-Target</item>
            <item>ExtCache</item>
            <item>SetCookie</item>
            <item>PICSLabel</item>
            <item>Cache-Control</item>
            <item>Vary</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what this type can be created from.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns the localized version of the current value into underlying system type.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture">The current UI culture.</param>
            <param name="value">The value from which the converter converts.</param>
            <returns>The value into which the converter has the input converted.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Check what the type can be converted to.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert to a specified type.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates that the UI should accept user input.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <returns>Always false.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates that the UI should not request standard values for the list.
            </summary>
            <param name="context">Context from which the editor is called.</param>
            <returns>Always false.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.TypeConverters.UITypeConverterMetaEnum.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Get the default list of options.
            </summary>
            <remarks>
            This method is called to fill the list of default values.
            </remarks>
            <param name="context">Context from which the editor is called.</param>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.NetrixUIDesigner">
            <summary>
            This class supports the design mode.
            </summary>
            <remarks>
            This class supports the NetRix infrastructure in designer level and cannot be
            instantiated nor used in user code directly.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.NetrixUIDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            Optional filter properties for the propertygrid.
            </summary>
            <remarks>
            This method is used to remove property the control doesn't support.
            </remarks>
            <param name="properties"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.NetrixUIDesigner.Verbs">
            <summary>
            Creates the command which leads to website.
            </summary>
            <remarks>
            This creates the link in the command section and the context menu entry, respectively.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.AngleChangedEventArgs">
            <summary>
            Event arguments for AngleChanged event.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Ctor, internally used.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleChangedEventArgs.Angle">
            <summary>
            Current angle. Set to change immediately (does not refire event).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.AngleChangedEventHandler">
            <summary>
            Used to fire the AngleChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.AngleEditor">
            <summary>
            A control to set an angle.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.#ctor">
            <summary>
            A user control to enter angle values.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden to paint the content.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.OnResize(System.EventArgs)">
            <summary>
            Invalidates on resize.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Control mouse to move the spot.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Control mouse to get the spot.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.AngleEditor.AngleChanged">
            <summary>
            Fired if angle has been changed.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.OnAngleChanged(System.Int32)">
            <summary>
            Called if angle has been changed.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.Angle">
            <summary>
            Current Angle set by user.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.PointerColor">
            <summary>
            Color or 'pointer' (spot for mouse).
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.CircleColor">
            <summary>
            Color of circle around the angle area.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.StickColor">
            <summary>
            Color of sticks used to tag 0°, 90°, 180, and 270° positions.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.UserInterface.AngleEditor.DrawSticks"/>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.DrawSticks">
            <summary>
            Draw the sticks at 0°, 90°, 180, and 270° positions.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.UserInterface.AngleEditor.StickColor"/>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.ShowLabel">
            <summary>
            Show an additional label.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.UserInterface.AngleEditor.LabelProperties"/>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.PointerSize">
            <summary>
            Size of the pointer (mouse spot). Default is 8 (pixel).
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.NumUpDownProperties">
            <summary>
            Access to the NumericUpDown control.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.AngleEditor.LabelProperties">
            <summary>
            Access to the label control.
            </summary>
            <seealso cref="P:GuruComponents.Netrix.UserInterface.AngleEditor.ShowLabel"/>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.AngleEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.AngleEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorCancelEventHandler">
            <summary>
            The ColorCancelEvent delegate.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorChangedEventHandler">
            <summary>
            The ColorChangedEvent delegate.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorChangedEventArgs">
            <summary>
            Provides data for the <c>ColorChanged</c> event.
            </summary>
            <remarks>
            The ColorChanged event occurs when a user selects a new color in the
            ColorPicker, ColorPanel or CustomColorPicker controls.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorChangedEventArgs.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>ColorChangedEventArgs</c> class.
            </summary>
            <param name="color">
            The selected color.
            </param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorChangedEventArgs.Color">
            <summary>
            Gets the selected color.
            </summary>
            <value>
            The color which set by the user.
            </value>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel">
            <summary>
            A control that allows the selection of a color from a fixed color palette.
            </summary>
            <remarks>
            The color panel displays a grid of colors.  These colors are either derived from the
            System.Drawing.KnownColor enumeration, or supplied by the user using the <c>CustomColor</c> property.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.#ctor">
            <summary>
            Initializes a new instance of the ColorPanel class.
            </summary>
            <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.LayoutColorWells">
            <summary>
            Layout the color wells in the available space.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ColorChanged">
            <summary>
            The ColorChangedEvent event handler.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.FireColorChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnColorChanged(GuruComponents.Netrix.UserInterface.ColorPicker.ColorChangedEventArgs)">
            <summary>
            Raises the ColorChanged event.
            </summary>
            <param name="e">A ColorChangedEventArgs contains the event data.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ColorWellFromPoint(System.Int32,System.Int32)">
            <summary>
            Get the color well at the specified point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ColorWellFromColor(System.Drawing.Color)">
            <summary>
            Get the first color well with the specified color.
            There may be multiple color wells with the same color for custom color palettes.
            Note that Color.White != Color.Window even when Color.Window is white!
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.IndexFromColorWell(GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellInfo)">
            <summary>
            Get the sorted index of the color well (not the original index).
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnClick(System.EventArgs)">
            <summary>
            Overrides the OnClick event in order to detect user color selection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ChangeColor(GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellInfo)">
            <summary>
            Change the color currently selected. Does not cause a ColorChanged event.
            </summary>
            <param name="newColor"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the OnMouseMove event in order to track mouse movement.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnMouseLeave(System.EventArgs)">
            <summary>
            Overrides OnMouseLeave in order to detect when the mouse
            has left the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnGotFocus(System.EventArgs)">
            <summary>
            Overrides OnGotFocus so the control can be redrawn with the focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnLostFocus(System.EventArgs)">
            <summary>
            Overrides OnLostFocus so the control can be redrawn without the focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overrides IsInputKey.<br></br><br></br>
            This allows the control to tell the base class that the keys
            Keys.Left, Keys.Right, Keys.Up and Keys.Down should cause the OnKeyDown event.
            </summary>
            <param name="keyData">One of the <c>System.Windows.Forms.Keys</c> values</param>
            <returns><B>true</B> if keyData is one of 
            Keys.Left, Keys.Right, Keys.Up and Keys.Down.  Otherwise <B>false</B>.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides OnKeyDown so that a color may be selected using the keyboard.<br></br><br></br>
            Use the keys - Left, Right, Up, Down and Enter.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.GetPreferredWidth">
            <summary>
            When the ColorPanel is being resized GetPreferredWidth is called to
            determine the preferred width.
            For ColorPanel the preferred width is the control's default Width, i.e the control may be resized.
            <br></br>
            Derived classes, such as ColorPanelWithCapture may override this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.AutoSizePanel">
            <summary>
            This method is called internally to set the control's size.<br></br>
            If the Columns property is 0 then the control fixes it's width to the 
            nearest number of columns that fit into the value returned by GetPreferredWidth.<br></br>
            If the Columns property is greater than 0 then the control will display that many columns.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnResize(System.EventArgs)">
            <summary>
            Overrides OnResize so the control can be auto-sized.
            </summary>
            <remarks>
            The control auto-sizes.  It first fixes the width to the nearest
            whole multiple of the color well width, and then fixes the height to
            the nearest whole multiple of the color well height.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnEnabledChanged(System.EventArgs)">
            <summary>
            Overrides OnEnabledChanged so the control can redraw itself 
            enabled/disabled.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides OnPaint so the control can be drawn.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Override OnSystemColorsChanged to that the System color palette
            can be updated when a user modifies the system colors.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.BorderStyle">
            <summary>
            Set/get the controls border style.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.UpdateBorderSize">
            <summary>
            Update the border size values based on the current border style.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.Color">
            <summary>
            Set/get the pick Color.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ResetColor">
            <summary>
            Design time support to reset the Color property to it's default value.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ShouldSerializeColor">
            <summary>
            Design time support to indicate whether the Color property should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ColorSet">
            <summary>
            Set/get the set of colors displayed by the control. Some colorsets are prepared to be used in typical web apps.
            See <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSet">ColorSet</see>, too.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ColorWellSize">
            <summary>
            Set/get the size of the color wells.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ResetColorWellSize">
            <summary>
            Design time support to reset the ColorWellSize property to it's default value.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ShouldSerializeColorWellSize">
            <summary>
            Design time support to indicate whether the ColorWellSize property should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ColorSortOrder">
            <summary>
            Set/get the order in which colors in the palette should be sorted.<br></br><br></br>
            See <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder">ColorSortOrder</see>.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.Columns">
            <summary>
            Set/get the number of preferred columns.<br></br><br></br>
            If you set this value less than or equal to 0, you may resize the control.<br></br>
            If you set this greater that 0 the control will have a fixed width
            of 'Columns' unless 
            there are fewer colors than 'Columns' in the palette in which case it will display all colors in
            a single row.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.CustomColors">
            <summary>
            Set/get the custom color palette to be displayed.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ResetCustomColors">
            <summary>
            Design time support to reset the CustomColors property to it's default value.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.DefaultCustomColors">
            <summary>
            Helper for ColorPicker/ColorPanel
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ShouldSerializeCustomColors">
            <summary>
            Design time support to indicate whether the CustomColors property should be serialized.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel.ShouldSerializeCustomColors(System.Collections.Generic.List{System.Drawing.Color})">
            <summary>
            Helper for ColorPicker/ColorPanel
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm">
            <summary>
            ColorPanelForm is used to host an instance of ColorPanelUserControl.
            </summary>
            <remarks>
            This enable the ColorPanel control to be dropped down by the
            ColorPicker.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.#ctor">
            <summary>
            Creates a new instance of color panel form.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.ButtonCustomVisible">
            <summary>
            Set whether the 'custom' button is visible.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.ButtonWebVisible">
            <summary>
            Set whether the 'web' button is visible.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.ButtonSystemVisible">
            <summary>
            Set whether the 'system' button is visible.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.Columns">
            <summary>
            Number of columns of the color grid.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.CustomColors">
            <summary>
            List of custom colors.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm.Color">
            <summary>
            Current color.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl">
            <summary>
            ColorPanelUserControl is used to host an instance of ColorPanel together with various options.
            </summary>	
            <remarks>
            This is the base control which is placed into the 
            <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm">ColorPanelForm</see>
            form to be dropped from the 
            <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl">ColorPickerUserControl</see>.
            Normally this control should not be placed as a standalone user control onto a form. It is public to
            be used if a replacement of the <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelForm">ColorPanelForm</see> form
            is requiered.
            <para>
            This control uses the satellite assemblies to localize the labels. For that reason, the control
            should not be used without the satellites for all languages used in the final application. Otherwise
            a replacement string is used as the embedded default resource.
            </para>
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.#ctor">
            <summary>
            The contructor which instantiate the control.
            </summary>
            <remarks>
            Build the control using this constructor when used on a form.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.SetColorSortNames(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method internally sets the names of buttons
            </summary>
            <param name="standard"></param>
            <param name="cont"></param>
            <param name="saturation"></param>
            <param name="bright"></param>
            <param name="name"></param>
            <param name="distance"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ResetControl">
            <summary>
            Sets the control in an undefined state.
            </summary>
            <remarks>
            This is used to inform other controls to not rewrite the value in the control.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ResetControl(System.Collections.Generic.List{System.Drawing.Color})">
            <summary>
            Sets the control in an undefined state.
            </summary>
            <remarks>
            This is used to inform other controls
            to not rewrite the value in the control. Additionally the custom color table 
            is filled with a array of colors.
            </remarks>
            <param name="customiser">Array of colors to customize the palette.</param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.PanelBorderStyle">
            <summary>
            Gets or sets the Border of the panel.
            </summary>
            <remarks>
            The value of type <see cref="T:System.Windows.Forms.BorderStyle"/> controls the style around
            the embedded color panel, not of the whole control.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.Color">
            <summary>
            The current selected color.
            </summary>
            <remarks>
            Gets or sets the color which becomes selected if found on the currently opened panel.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ColorSet">
            <summary>
            Gets or sets the color panel.
            </summary>
            <remarks>
            This controls the color display and switches the buttons accordingly the current setting.
            The possible values are:
            <list type="bullet">
            <item>Web</item>
            <item>System</item>
            <item>Custom</item>
            </list>
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ColorWellSize">
            <summary>
            The size of one colored square in pixels.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ColorSortOrder">
            <summary>
            Gets or sets the color sort technique.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.Columns">
            <summary>
            Gets or sets the number of columns displayed.
            </summary>
            <remarks>
            This value should
            not be changed because the sorted color patterns does not work
            with different column numbers.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.CustomColors">
            <summary>
            Gets or sets the custom colors.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.CurrentColor">
            <summary>
            Gets or sets the current color.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ColorChanged">
            <summary>
            Fired if the color has changed.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ColorCancel">
            <summary>
            Event informs the caller that the user will reset the color.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ButtonWebVisible">
            <summary>
            Controls visiblity of "Web" button.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ButtonCustomVisible">
            <summary>
            Controls visiblity of "Custom" button.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanelUserControl.ButtonSystemVisible">
            <summary>
            Controls visiblity of "System" button.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ZAxis">
            <summary>
            This represents the Z Axis of a RGB color cube.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ZAxis.red">
            <summary>The Z Axis is red</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ZAxis.blue">
            <summary>The Z Axis is blue</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ZAxis.green">
            <summary>The Z Axis is green</summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSet">
            <summary>
            Specifies the set of colors to be displayed in the color palette.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSet.System">
            <summary>Show the system color palette.</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSet.Web">
            <summary>Show the web color palette.</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSet.Continues">
            <summary>Show Continues palette.</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSet.Custom">
            <summary>Show custom scale.</summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder">
            <summary>
            Specifies the order the colors contained in the selected palette should be sorted.
            </summary>
            <remarks>
            Additionally
            the grid can be shown in a Dreamwaever like color sorting box using 12 columns to order colors
            in fours blocks, each 6x6 cells to have color groups (meaning that all green variants are closed
            together).
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder.Name">
            <summary>Sort by name.</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder.Brightness">
            <summary>Sort by brightness.</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder.Continues">
            <summary>Sort as continues colors in 18x12 websafe grid (216 colors only).</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder.Saturation">
            <summary>Sort by saturation.</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder.Distance">
            <summary>Sort by linear distance from the origin (0,0,0) of the RGB color space.</summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder.Unsorted">
            <summary>
            Colors are sorted according to their original order.
            </summary>
            <remarks>
            For System and Web color sets this is the same as sort by name.
            For custom colors it will be the order of the colors in the array assigned to the CustomColors property
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.Utils">
            <summary>
            Utility class.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.Utils.CheckValidEnumValue(System.String,System.Object,System.Type)">
            <summary>
            Check that the supplied enum value belongs to the supplied System.Type.<br></br>
            If not throw an InvalidEnumArgumentException.
            </summary>
            <param name="argumentName">The name of the argument.</param>
            <param name="enumValue">The enum value.</param>
            <param name="enumClass">The type of the enum that 'enumValue' should belong to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorComparer.CompareColorDistance">
            <summary>
            Returns an new instance of a class used to sort the color table.
            </summary>
            <returns>IComparer</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorComparer.CompareColorName">
            <summary>
            Returns an new instance of a class used to sort the color table.
            </summary>
            <returns>IComparer</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorComparer.CompareColorSaturation">
            <summary>
            Returns an new instance of a class used to sort the color table.
            </summary>
            <returns>IComparer</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorComparer.CompareColorHue">
            <summary>
            Returns an new instance of a class used to sort the color table.
            </summary>
            <returns>IComparer</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorComparer.CompareColorBrightness">
            <summary>
            Returns an new instance of a class used to sort the color table.
            </summary>
            <returns>IComparer</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorComparer.CompareUnsorted">
            <summary>
            Returns an new instance of a class used to sort the color table.
            </summary>
            <returns>IComparer</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellHelper.GetCustomColorWells(System.Collections.Generic.List{System.Drawing.Color},GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder)">
            <summary>
            Generate an array of ColorWellInfo from the supplied array of Color.
            </summary>
            <param name="customColors"></param>
            <param name="colorSortOrder"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellHelper.GetColorWells(GuruComponents.Netrix.UserInterface.ColorPicker.ColorSet,GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder)">
            <summary>
            This method return an array of colorWells that belong to the desired ColorSet and 
            that have been sorted in the desired ColorSortOrder.
            </summary>
            <param name="colorSet">The color palette to be generated.</param>
            <param name="colorSortOrder">The order the generated palette should be sorted.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellHelper.SortColorWells(GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellInfo[],GuruComponents.Netrix.UserInterface.ColorPicker.ColorSortOrder)">
            <summary>
            Sort the supplied colorWells according to the required sort order.
            </summary>
            <param name="colorWells"></param>
            <param name="colorSortOrder"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellHelper.DrawColorWell(System.Drawing.Graphics,System.Boolean,System.Boolean,System.Boolean,GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellInfo)">
            <summary>
            Draws the ColorWell on the Graphics surface.
            </summary>
            <remarks>
            This method draws the ColorWell as either enabled or disabled.
            It also indicates the currently selected color and the color
            that is ready to chosed (picked) by the mouse or keyboard.
            </remarks>
            <param name="g">Graphics object.</param>
            <param name="enabled">Enable appearance</param>
            <param name="selected">Selected appearance.</param>
            <param name="pickColor">Color used.</param>
            <param name="cwi">ColorWellInfo object.</param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorWellInfo">
            <summary>
            This class is used to hold the information about each color in the collection. The enhances the
            color store with sorting capabilites.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl">
            <summary>
            A Color picker control specialized for HTML colors.
            </summary>
            <remarks>
            This is the basic color control. It provides a button to pop-up a color selection box,
            a textbox for entering colors as names or RGB values and a context menu for a few simple
            configuration options.
            <para>
            The control has two selection modes:
            <list type="bullet">
            <item><see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel">ColorPanel</see></item>
            <item><see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider">ColorSlider</see></item>
            </list>
            Whereas the <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider">ColorSlider</see> supports
            the whole RGB space the <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel">ColorPanel</see> has
            three specialized panes:
            <list type="bullet">
            <item><term>Web</term><description>Contains the 216 web safe colors as a grid.</description></item>
            <item><term>Custom</term><description>Allows the user to add his own color collection.</description></item>
            <item><term>System</term><description>The standard system colors used by Windows.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.#ctor">
            <summary>
            The constructor, used to instantiate the control.
            </summary>
            <remarks>
            This constructor sets various default values. The list of custom colors is empty.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.ResetControl">
            <summary>
            Sets the control in a undefined state.
            </summary>
            <remarks>
            This resets the current color and removes the list of custom colors.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.Version">
            <summary>
            The current Assembly version.
            </summary>                   
            <remarks>
            This property returns the current assembly version to inform during design session about the assembly loaded.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.ResetControl(System.Collections.Generic.List{System.Drawing.Color})">
            <summary>
            Sets the control in an undefined state.
            </summary>
            <remarks>
            This is used to inform other controls
            to not rewrite the value in the control. Additionally the custom color table 
            is filled with a array of colors.
            </remarks>
            <param name="customiser">Array of colors to customize the palette.</param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.SetPanelCaption">
            <summary>
            Sets the caption of the sub windows of both controls.
            </summary>
            <remarks>
            This option can be used to localize or to customize the control. The value appears as the
            text property of both pop-up forms, 
            <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPanel">ColorPanel</see> and <see cref="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider">ColorSlider</see>.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.SetMenuNames(System.String,System.String,System.String)">
            <summary>
            Set the menu item names (caption) of the context menu.
            </summary>
            <remarks>
            This option can be used to localize or to customize the control.
            </remarks>
            <param name="disableMenuText">Menu entry 'Reset color'.</param>
            <param name="selectGridMenuText">Menu entry 'Show Grid'.</param>
            <param name="selectSliderMenuText">Menu entry 'Show Slider'.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.Dispose(System.Boolean)">
            <summary>
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.InitializeComponent">
            <summary>
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.OnGotFocus(System.EventArgs)">
            <summary>
            Refreshes the control if the focus is gotten.
            </summary>
            <remarks>
            This refreshes the textbox and the panel colors if the control got the focus.
            </remarks>
            <param name="e">The event arguments send from the caller.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.OnLostFocus(System.EventArgs)">
            <summary>
            Refreshes the control if the focus is lost.
            </summary>
            <remarks>
            This refreshes the textbox and the panel colors if the control lost the focus.
            </remarks>
            <param name="e">The event arguments send from the caller.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.Paint">
            <summary>
            Overrides the OnPaint event to control the button painting.
            </summary>
            <remarks>
            This is used to display the color name and the colored button background.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Opens popup then Down arrow or Down arrow with Alt key is hit.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Captures the mouse and show context menu.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.ShowPopUp">
            <summary>
            Shows the selected pop-up window.
            </summary>
            <remarks>
            This method shows the pop-up, whatever was selected.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.ColorChanged">
            <summary>
            Fired if the color has changed or resetted.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.OnColorChanged(GuruComponents.Netrix.UserInterface.ColorPicker.ColorChangedEventArgs)">
            <summary>
            Called if the color has changed.
            </summary>
            <remarks>
            used to fire the external color change event.
            </remarks>
            <param name="e">The event args contain the color.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.GenesisColor_Resize(System.Object,System.EventArgs)">
            <summary>
            Reorganize the buttons on resize.
            </summary>
            <remarks>
            The definition for the control is simple: The textbox will take two third of the control and 
            the colored pop-up button will take one third. The context menu button will always set to a
            constant width. If the control is stretched in the VS.NET designer the both controls are 
            stretched relatively.
            </remarks>
            <param name="sender">This control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorPickerUserControl.CurrentColor">
            <summary>
            Sets or gets the current color.
            </summary>
            <remarks>
            Setting the value forces a refresh to show the value immediataly.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider">
            <summary>
            A control that allows the user to select any color from the
            RGB color space.
            </summary>
            <remarks>
            The control presents a 2 dimensional slice through the 3D color cube.  The user
            may select Red, Green or Blue to be the z-axis where the z-axis extends into the screen and the
            x and y-axes are the remaining pair of colors.
            The control displays a 256x256 color palette calculated over the x and y axes combined
            with the selected z-axis value.  This palette is varied continuously as the user changes the 
            selected z-axis value.
            <br></br><br></br>
            The control is inpired from <a href="http://dotnet.securedomains.com/colorpicker/default.aspx">
            Peter McMahon's ColorPicker.NET</a>.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.#ctor">
            <summary>
            Creates a CustomColorPicker control.
            It defaults to the blue/green side of the color cube (z-axis=red).
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.ColorChanged">
            <summary>
            The ColorChangedEvent event handler.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.OnColorChanged(GuruComponents.Netrix.UserInterface.ColorPicker.ColorChangedEventArgs)">
            <summary>
            Raises the ColorChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.Color">
            <summary>
            Sets/gets the pick color.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.ResetColor">
            <summary>
            Design time support to reset the Color property to it's default value.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.ShouldSerializeColor">
            <summary>
            Design time support to indicate whether the Color property should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.EnableContinuousScrollZ">
            <summary>
            Enable/disable smooth scrolling of the z-axis of the color cube.
            You may want to disable this on slower systems since continuously recomputing
            the color palette is fairly processor intensive.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.OnEnabledChanged(System.EventArgs)">
            <summary>
            Overrides OnEnabledChanged so the control can redraw itself 
            enabled/disabled.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSlider.OnLoad(System.EventArgs)">
            <summary>
            Overrides OnLoad.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSliderForm">
            <summary>
            The class for the ColorSlider.
            </summary>
            <remarks>
            The slider can select any value from the RGB color space. Display devices can only 
            display a limited number of colors from that space.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSliderForm.components">
            <summary>
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSliderForm.#ctor">
            <summary>
            The constructor initializes a new instance of the slider.
            </summary>
            <remarks>
            The slider is use internally as a replacement for the color grid. It can be used 
            externally but is needs some infrastructure around to make sense.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSliderForm.Color">
            <summary>
            Gets or sets the currently selected color.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSliderForm.OnDeactivate(System.EventArgs)">
            <summary>
            Called on deactivation of the control.
            </summary>
            <remarks>
            Used to set the return value to a definitive state.
            </remarks>
            <param name="e">The event arguments beeing sent from the caller.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSliderForm.Dispose(System.Boolean)">
            <summary>
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.ColorSliderForm.InitializeComponent">
            <summary>
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.PixelData">
            <summary>
            Holds pixel data for unsafe slider code.
            </summary>
            <remarks>
            This class is for internal use only.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.PixelData.blue">
            <summary>
            Holds a blue pixel.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.PixelData.green">
            <summary>
            Holds a green pixel.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ColorPicker.PixelData.red">
            <summary>
            Holds a red pixel.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe">
            <summary>
            A helper class for very fast bitmap operations.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.#ctor(System.Drawing.Bitmap)">
            <summary>
            Ctor
            </summary>
            <param name="bitmap">Bitmap the content is stored in.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.Save(System.String)">
            <summary>
            Save to bitmap.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.Dispose">
            <summary>
            Dispose bitmap.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.Bitmap">
            <summary>
            Access to related bitmap.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.PixelSize">
            <summary>
            Size of bitmap.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.MakeGrey">
            <summary>
            Convert all pixels to gray.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.MakeRedPalette(System.Byte)">
            <summary>
            Make the red palette.
            </summary>
            <param name="redValue">The fixed value.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.MakeBluePalette(System.Byte)">
            <summary>
            Make the blue palette.
            </summary>
            <param name="blueValue">The fixed value.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.MakeGreenPalette(System.Byte)">
            <summary>
            Make the green palette.
            </summary>
            <param name="greenValue">The fixed value.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.LockBitmap">
            <summary>
            Lock the bitmap.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.PixelAt(System.Int32,System.Int32)">
            <summary>
            Retrieve a pixel at specified location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ColorPicker.BitmapUnsafe.UnlockBitmap">
            <summary>
            Unlock the bitmap.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.FontPicker.ContentChangedEventHandler">
            <summary>
            Delegate to attach a handler receives a call when the content of the list has changed.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox">
            <summary>
            This class builds the form for font selection.
            </summary>
            <remarks>
            The purpose to introduce a new font picker control is the possiblity to select 
            multiple font at a time. This is used in styles (<c>font-family</c> attribute) and
            the (deprecated) &lt;font&gt; tag. The browser can select any font from list and it will
            take the first locally installed one. Such list make sense if we think for font lists
            as a fallback instruction. Typically the user will select a list like "Arial, Univers,
            Helvetice, Sans Serif". This assumes that the most people have Arial on their system.
            Some of us, using a Macintosh computer, have a similar font called Univers. And a few
            a professionals working with expensive high quality fonts like Helvetica. Any other
            exotic systems are probably able to provide a generic font like Sans Serif, which is in
            fact replaced with the best matching font without serifs. 
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox.components">
            <summary>
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox.#ctor">
            <summary>
            Instantiates a new font selection form.
            </summary>
            <remarks>
            This control makes usage of the satellite assemblies to gather localized strings 
            for labels and buttons. If the control is used outside of NetRix assure that the 
            satellites are in place to avoid embedded replacement strings.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox.ResetUI">
            <summary>
            Reset the UI to change labels after changing the culture.
            </summary>
            <remarks>
            The call of this method simply reloads the localized strings after the 
            current culture has changed.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox.SampleString">
            <summary>
            Sets the sample string.
            </summary>
            <remarks>
            The font list shows any font with its font name and a small sample. This sample
            is formatted with the font themselfes. The sample should have a relevant selection
            of letters and numbers.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox.Dispose(System.Boolean)">
            <summary>
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox.InitializeComponent">
            <summary>
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerBox.SelectedFont">
            <summary>
            Gets or sets the list of fonts.
            </summary>
            <remarks>
            This property gets or sets the list on fonts as a 
            <see cref="T:System.Collections.Specialized.StringCollection">StringCollection</see> collection.
            The result is nether <c>null</c>, but the list can be empty.
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox">
            <summary>
             Enhances the font listbox to show currently selected fonts.
            </summary>
            <remarks>
            This class provides the elementary list which is able to shows the fontnames 
            in there appropriate font.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.imageWidth">
            <summary>
            Used as left space between border and the beginning of font. In pixel.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.nfont">
            <summary>
            Current font.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox._listtype">
            <summary>
            Type of listbox.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.maxwid">
            <summary>
            Max width, unlimited in 0.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.samplestr">
            <summary>
            Sample string to display fonts.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.type">
            <summary>
            Default font list shown.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox._userfonts">
            <summary>
            Array of user fonts.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.#ctor">
            <summary>
            The contructor is used to instantiate the control.
            </summary>
            <remarks>
            Some base values are set:
            <list type="bullet">
            <item><term>IntegralHeight</term><description>false</description></item>
            <item><term>Sorted</term><description>false</description></item>
            <item><term>DrawMode</term><description>DrawMode.OwnerDrawVariable</description></item>
            <item><term>FamilyType</term><description>FontFamilyType.Web</description></item>
            </list>
            The list of selected fonts is always clear.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.Select(System.Int32)">
            <summary>
            Select a specific entry.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.HighlightNext">
            <summary>
            Set the highlighter ones down in the list.
            </summary>
            <remarks>
            This method can be used if the list is used as separate control to
            set the highlighted entry depending on an external event.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.HighlightPrevious">
            <summary>
            Set the highlighter ones up in the list.
            </summary>
            <remarks>
            This method can be used if the list is used as separate control to
            set the highlighted entry depending on an external event.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.Count">
            <summary>
            Number of elements in the listbox.
            </summary>
            <remarks>
            This returns simply the <c>Count</c> property of the base list.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Recognizes the F2 (select), Insert (select and take), Del (remove), Enter (select),
            KeyDown/KeyUp (moves current font).
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.NewItem(System.String)">
            <summary>
            Called if a new item is inserted.
            </summary>
            <remarks>
            If called from outside the control the item will be added to the list and 
            control will refresh. If it has no focus the focus is moved there.
            The method checks for the given font name and will not insert the font more
            than once. The font is compared using the name, not the real font file.
            The method does nothing if the font already exists in the list.
            </remarks>
            <param name="FontName"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.RemoveSelected">
            <summary>
            Called if the current font should removed.
            </summary>
            <remarks>
            If one or more lines highlighted within the list this method removes these
            fonts from the list.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.MoveSelectedUp">
            <summary>
            Move one up.
            </summary>
            <remarks>
            The currently selected font will be moved upwards in the list.
            This method expects that exactly one (1) font is selected. If no font or
            more than one is selected the method ignores the call and does nothing.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.MoveSelectedDown">
            <summary>
            Move one down.
            </summary>
            <remarks>
            The currently selected font will be moved downwards in the list.
            This method expects that exactly one (1) font is selected. If no font or
            more than one is selected the method ignores the call and does nothing.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.SampleString">
            <summary>
            Used to override the sample string.
            </summary>
            <remarks>
            Gets or sets the sample string.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.FamilyType">
            <summary>
            Used to set or get the font family type.
            </summary>
            <remarks>
            If the list is prefilled with fonts (which is an option) this property 
            determines the type of font list. If the list is used for the final font selection the
            user mades the type <see cref="F:GuruComponents.Netrix.UserInterface.FontPicker.FontFamilyType.User"/> is used.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.UserFonts">
            <summary>
            Used to get or set the user fonts.
            </summary>
            <remarks>
            If the list type is user and the prefilled user list is used this property allows to
            set the list of fonts as an string array.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.ListType">
            <summary>
            Used to set or get the listbox type.
            </summary>
            <remarks>
            Related to the base list the control derived from.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.Populate">
            <summary>
            Used to fill the listbox with a predefined font list.
            </summary>
            <remarks>
            After the various property are set this method will fill the list with the
            selected fonts. After setting the font the selected index is set to 0.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            Measures one entry in the owner drawn listbox.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Creates on entry in the owner drawn listbox.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl">
            <summary>
            This class realises the FontPicker UserControl
            </summary>
            <remarks>
            The user control shows a font selection box and allows
            the user to selected multiple fonts from different lists. Used for the style sheet editor and
            in the PropertyGrid.
            <para>
            To protect the user interface the width of the control is limited to 168 pixel.
            </para>
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.#ctor">
            <summary>
            The constructor is used to instantiate the control.
            </summary>
            <remarks>
            This method sets the basix values and the localization. The list of selected fonts
            is clear.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.Version">
            <summary>
            The current Assembly version.
            </summary>                   
            <remarks>
            This property returns the current assembly version to inform during design session about the assembly loaded.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.ResetUI">
            <summary>
            Reset the UI.
            </summary>
            <remarks>
            The call will reset the localizable strings for the current culture.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.BoxCaption">
            <summary>
            Caption of the window.
            </summary>
            <remarks>
            This sets the text of the font box. It is not necessary to set this option because the
            value is loaded from the satellite assemblies. Setting of this property is only required
            if a different text is necessary.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.SampleString">
            <summary>
            The sample string used in the font list.
            </summary>
            <remarks>
            This presets the sample string shown in the font list.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.ContentChanged">
            <summary>
            Adds or removes the event handler for the event fired if any of the content is changed
            </summary>
            <remarks>
            The event is fired if one of the fields has had a interaction with the user.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.OnContentChanged(System.Object)">
            <summary>
            Fired if the content of the list has changed.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.PopulateStringList">
            <summary>
            Gets or sets the list of fonts using a comma separated string.
            </summary>
            <remarks>
            This property transform the string collection used internally to populate a 
            comma separated list. This is for direct usage in the face or font-family attributes
            which requires such a list.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.OnResize(System.EventArgs)">
            <summary>
            Helps to protect the minimum measures of the control to more than 168 pixel.
            </summary>
            <remarks>
            This is necessary to show the buttons and description text properly.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.Items">
            <summary>
            Populates the inner list to transparent access.
            </summary>
            <remarks>
            If the final application needs other types of font lists this property allows
            the access to the base class list. This property is read only.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.Border">
            <summary>
            Gets or sets the border style around the control.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.AllowDrop">
            <summary>
            Allows the user to drop fonts onto the control.
            </summary>
            <remarks>
            If dropping is allowed the listbox (not the entire control) will accept
            fontnames (if strings are the data) or font objects from which the string is
            extracted.
            <para>
            The control does not allow adding fonts more than once. If a font is added as string the whole string
            is treated as one name. To allow users to add multiple fonts at the same time use the data type 
            <see cref="F:System.Windows.Forms.DataFormats.FileDrop">FileDrop</see>. The control expects that the path points
            to a TrueType or OpenType font which exists on the local computer. The name will than be added to the
            list. Font variants (Arial, Arial Bold, Arial Italics) are treated as one font and added only once, 
            as long as the fonts have the same base font.
            </para>
            <para>
            Note: The control cannot be used as a drop source in the current version.
            </para>
            </remarks>
            <example>
            Assuming you have a button on your form and the AllowDrop property set to <c>true</c>. The button has
            a property <c>Tag</c> set to "Arial". The following code will create a drag drop solution for adding
            fonts to the list:
            <code>
            private void button_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
            {
               button1.DoDragDrop(((Button) sender).Tag.ToString(), DragDropEffects.Copy);
            }
            </code>
            </example>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.OnGotFocus(System.EventArgs)">
            <summary>
            Called if the button got the focus.
            </summary>
            <remarks>
            Used to set the focus to the list instead to the button after the button was clicked.
            </remarks>
            <param name="e">The event arguments to put through to the handler.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.btnAddEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Called if the Add (+) button has clicked. Shows the fontpicker list form.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.Title">
            <summary>
            Gets or sets the Title of the Control, displayed left hand above the list.
            </summary>
            <remarks>
            The title should only be set if the localized string is not appropriate.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.btnRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Called if the Remove (-) button was clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.btnUp_Click(System.Object,System.EventArgs)">
            <summary>
            Called if the Up button was clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.FontPicker.FontPickerUserControl.btnDown_Click(System.Object,System.EventArgs)">
            <summary>
            Called if the down button was clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.FontPicker.FontFamilyType">
            <summary>
            Tells the FontListBox what Font list to load. The user list is filled by
            the client application.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontFamilyType.System">
            <summary>
            System font
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontFamilyType.Web">
            <summary>
            Web related fonts (IE fonts).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontFamilyType.Generic">
            <summary>
            Generic fonts, like "Sans Serif".
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.FontFamilyType.User">
            <summary>
            User defined list.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.FontPicker.ListBoxType">
            <summary>
            Tells the FontListBox how to show the fonts (with or without Sample).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.ListBoxType.FontName">
            <summary>
            Display the names.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.ListBoxType.FontSample">
            <summary>
            Display the sample string only.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.FontPicker.ListBoxType.FontNameAndSample">
            <summary>
            Display both, name and sample (recommended).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.PixelEditor">
            <summary>
            This class creates a simple unit editor to allow users selecting either pixel or percentage
            values from within a given range.
            </summary>
            <remarks>
            This improves the PropertyGrid usability.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.PixelEditor.components">
            <summary> 
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.PixelEditor.#ctor">
            <summary>
            The constructor.
            </summary>
            <remarks>
            Requests internally the localized information from satellite assemblies.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.PixelEditor.ResetUI">
            <summary>
            Reset the UI resources after culture changes.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.PixelEditor.Version">
            <summary>
            The current Assembly version.
            </summary>                   
            <remarks>
            This property returns the current assembly version to inform during design session about the assembly loaded.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.PixelEditor.Dispose(System.Boolean)">
            <summary> 
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.PixelEditor.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.PixelEditor.Border">
            <summary>
            Gets or sets the border style.
            </summary>
            <remarks>
            This allows the developer to set a common border style around the whole control.
            The subcontrols will change their behavior accordingly to the outer border.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.PixelEditor.Unit">
            <summary>
            The unit displayed in the control.
            </summary>
            <remarks>
            Gets or sets the value within the control.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.PixelEditor.ValueChanged">
            <summary>
            Fired if the value has been changed.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.ScaleMode">
            <summary>
            Mode the scale appears.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.ScaleMode.Points">
            <summary>
            Use points (pt).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.ScaleMode.Pixels">
            <summary>
            Use pixels (px). Recommended.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.ScaleMode.Centimetres">
            <summary>
            Use centimeters (cm).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.ScaleMode.Inches">
            <summary>
            Use inches (in).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerAlignment">
            <summary>
            Alignment of grid scale within the rulers surface.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerAlignment.TopOrLeft">
            <summary>
            Top (for horizontal) or left (for vertical) position.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerAlignment.Middle">
            <summary>
            Middle (for horizontal) or center (for vertical) position.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerAlignment.BottomOrRight">
            <summary>
            Bottom (for horizontal) or right (for vertical) position.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.Orientation">
            <summary>
            The orientiation of the ruler control.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.Orientation.Horizontal">
            <summary>
            Appears horizontal, for top ruler (from left to right).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.Orientation.Vertical">
            <summary>
            Appears vertical, for left ruler (from top to bottom).
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerControl">
            <summary>
            Creates a ruler, which can be placed either vertical or horizontal.
            RulerControl creates a simple but powerful ruler.
            </summary>
            <remarks>
            The ruler has several features especially for designing HTML pages:
            <list type="bullet">
                <item>Show measures in pixel and point.</item>
                <item>Define beginning of scale to respect scroll positions.</item>
                <item>Show margins.</item>
                <item>Show segments, for instance, show table columns/rows or selected object's boundaries.</item>
                <item>Free setting of font, colors, and scales.</item>
                <item>Screen and show mouse position.</item>
            </list>
            Using various properties the ruler can be highly customized and used to present measures and
            boundaries of objects, set them interactively and fire events to change objects directly from ruler
            operations using the mouse.
            </remarks>
            <remarks>
            The ruler can be attache either vertically or horizontally. For usage with NetRix component it's recommended
            to use the scaling in pixel and attach the scroll event to set appropriate start value.
            <example>
            The following example assumes you have two ruler, one at the top and one at the left of the editor control:
            <code>
            // Attach the scroll event to an event handler
            this.htmlEditor1.Window.Scroll += new GuruComponents.Netrix.Events.DocumentEventHandler(Window_Scroll);
            
            // in the handler manipulate the ruler to follow the scrollbar
            void Window_Scroll(object sender, GuruComponents.Netrix.Events.DocumentEventArgs e)
            {
               rulerControl1.StartValue = htmlEditor1.HorizontalScrollPosition;
               rulerControl2.StartValue = htmlEditor1.VerticalScrollPosition;
            }
            </code>
            You can use VS.NET designer to set several properties of the ruler to customize according your application's conditions.
            </example>
            </remarks>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Margins">
            <summary>
            Controls the way margin areas are drawn.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Margins.None">
            <summary>
            No margin area.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Margins.LeftOrTop">
            <summary>
            Left (on horizontal) or top (on vertical).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Margins.RightOrBottom">
            <summary>
            Right (on horizontal) or bottom (on vertical).
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Margins.Both">
            <summary>
            Show both margins.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment">
            <summary>
            Defines a segment on the ruler to represent object dimensions.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment.#ctor(GuruComponents.Netrix.UserInterface.Ruler.RulerControl)">
            <summary>
            Creates a segment.
            </summary>
            <param name="parentControl">Rulercontrol this segment belongs to.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment.#ctor(GuruComponents.Netrix.UserInterface.Ruler.RulerControl,System.Int32,System.Int32)">
            <summary>
            Creates a segment with parameters.
            </summary>
            <param name="parentControl">Rulercontrol this segment belongs to.</param>
            <param name="start">Start position</param>
            <param name="end">End position</param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment.Start">
            <summary>
            Start value for object, e.g. left or top boundary of a DIV.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment.End">
            <summary>
            End value for object, e.g. right or bottom boundary of a DIV.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment.Orientation">
            <summary>
            Orientation of the ruler, either vertically or horizontally.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment.Element">
            <summary>
            Element attached to this segment.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment.ToString">
            <summary>
            String representation of a segment.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleModeChangedEventArgs">
            <summary>
            Event arguments for the ScaleModeChanged event.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleModeChangedEventArgs.Mode">
            <summary>
            Returns the current scale mode.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleModeChangedEventArgs.#ctor(GuruComponents.Netrix.UserInterface.Ruler.ScaleMode)">
            <summary>
            Ctor for ScaleModeChangedEventArgs class.
            </summary>
            <param name="Mode">Mode the scaling is running in.</param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.HooverValueEventArgs">
            <summary>
            Event arguments for the HooverValue event.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.HooverValueEventArgs.Value">
            <summary>
            Return the hover value.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.HooverValueEventArgs.#ctor(System.Double)">
            <summary>
            Ctor for HooverValueEventArgs class.
            </summary>
            <param name="Value">Current value</param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleModeChangedEvent">
            <summary>
            Used to declare the ScaleModeChanged event.
            </summary>
            <param name="sender">Ruler object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.HooverValueEvent">
            <summary>
            Used to declare the HooverValue event.
            </summary>
            <param name="sender">Ruler object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleModeChanged">
            <summary>
            Fired if the scaling changes.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.HooverValue">
            <summary>
            Fired on mouse over.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.SegmentBorderMoved">
            <summary>
            Fired for each mousemove step on a segments handle zone.
            </summary>
            <remarks>Not yet implemented. Reserved for future use.</remarks>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.MarginMoved">
            <summary>
            Fored for each mousemove step on a margins handle zone.
            </summary>
            <remarks>Not yet implemented. Reserved for future use.</remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.#ctor">
            <summary>
            Creates a new instance of ruler control.
            </summary>
            <remarks>
            The ctor sets various default values:
            <list type="bullet">
            <item>BackColor: White</item>
            <item>ForeColor: Black</item>
            <item>ScaleMode: Pixels</item>
            </list>
            </remarks>
            <seealso cref="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleMode"/>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filter mouse events to move ruler barks.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.PixelToScaleValue(System.Int32)">
            <summary>
            Scale value from pixel using the given offset.
            </summary>
            <param name="iOffset">The offset being used to calculate the value.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleValueToPixel(System.Double)">
            <summary>
            Calculate value to pixel using the given scale.
            </summary>
            <param name="nScaleValue">The scale being used to calculate the value.</param>
            <returns>Pixel value</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ToString">
            <summary>
            The ruler control class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Dispose(System.Boolean)">
            <summary>
            Dispose the component.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnResize(System.EventArgs)">
            <summary>
            Invalidate of resize.
            </summary>
            <remarks>
            Overwrite to prevent immediate refereshing.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Refresh">
            <summary>
            Invalidate the whole region.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override to prevent immediae repainting.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Override to handle Message filter disposing yourself.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Get mouse move operations to deal with margin settings.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnHooverValue(GuruComponents.Netrix.UserInterface.Ruler.RulerControl.HooverValueEventArgs)">
            <summary>
            Get mouse hover operations to deal with margin settings.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnScaleModeChanged(GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleModeChangedEventArgs)">
            <summary>
            Changed the scale mode, fires the <see cref="E:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleModeChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnEnter(System.EventArgs)">
            <summary>
            Invalidates on enter.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.OnLeave(System.EventArgs)">
            <summary>
            Invalidates on leave.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.BorderStyle">
            <summary>
            The border style use the Windows.Forms.Border3DStyle type.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Orientation">
            <summary>
            Horizontal or vertical layout.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.StartValue">
            <summary>
            A value from which the ruler marking should be shown. Default is zero.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleMode">
            <summary>
            The scale to use.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.MajorInterval">
            <summary>
            The value of the major interval. 
            </summary>
            <remarks>
            If displaying inches, 1 is a typical value. If displaying Points, 36 or 72 might good values.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Divisions">
            <summary>
            How many divisions should be shown between each major intervals.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.DivisionMarkFactor">
            <summary>
            The height or width of this control multiplied by the reciprocal of this number will be used to compute the height of the non-middle division marks.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.MiddleMarkFactor">
            <summary>
            The height or width of this control multiplied by the reciprocal of this number will be used to compute the height of the middle division mark.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScaleValue">
            <summary>
            The value of the current mouse position expressed in unit of the scale set (centimetres, inches, etc).
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.MouseTrackingOn">
            <summary>
            True if a line is displayed to track the current position of the mouse and events are generated as the mouse moves.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Font">
            <summary>
            The font used to display the division number.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.MouseLocation">
            <summary>
            Return the mouse position as number of pixels from the top or left of the control.
            </summary>
            <remarks>
             -1 means that the mouse is positioned before or after the control.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.SegmentStyle">
            <summary>
            The style used to draw additional segments.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.SegmentSides">
            <summary>
            The sides used to draw the border zone of a segment.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segments">
            <summary>
            The list of segments displayed on the ruler.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ForeColor">
            <summary>
            The color used to lines and numbers on the ruler.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.BackColor">
            <summary>
            The color used to paint the background of the ruler.
            </summary>
            <summary>
            The color used to paint the background of the ruler.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.MarginStyle">
            <summary>
            The style used to paint the background of the margin area.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ShowMargin">
            <summary>
            Whether it shows vertical numbers.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.LeftTopMargin">
            <summary>
            The left or top margin value.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.RightBottomMargin">
            <summary>
            The left or top margin value.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ScrollBarOffset">
            <summary>
            Offset which applies to margin and segment drawing if scrollbars inside the editor are visible.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.VerticalNumbers">
            <summary>
            Whether show numbers vertical.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.ZoomFactor">
            <summary>
            A factor between 0.1 and 10 by which the displayed scale will be zoomed.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.RulerAlignment">
            <summary>
            Determines how the ruler markings are displayed.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.AttachElementToSegment(GuruComponents.Netrix.WebEditing.Elements.IElement)">
            <summary>
            Attaches an element to a new segment.
            </summary>
            <remarks>
            </remarks>
            <returns>Returns the segment created to hold the element's relation.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.RemoveElementFromSegment(GuruComponents.Netrix.UserInterface.Ruler.RulerControl.Segment)">
            <summary>
            Removes the segment from segment list.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.CalculatePixel(System.Double)">
            <summary>
            May not return zero even when a -ve scale number is given as the returned value needs to allow for the border thickness.
            </summary>
            <param name="nScaleValue"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.Ruler.RulerControl.RenderTrackLine(System.Drawing.Graphics)">
            <summary>
            Render the track line (on screen line of current mouse position).
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl">
            <summary>
            This is the style editor control, which build the complete graphical user interface
            </summary>
            <remarks>
            It is used for editing of one style definition. It accepts and returns a string. It makes use
            of the style parser to built an object tree from the definitions. The control can be embedded
            as an standalone user control.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.Caret">
            <summary>
            Helps the num up down controls to set the caret correctly after internal value change.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.#ctor">
            <summary>
            The constructor, builds the interface and setup localizing.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.CustomColors">
            <summary>
            Controls the custom color tab of all color picker controls.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.HideTab(System.String)">
            <summary>
            Sets the visiblity of the specified TAB.
            </summary>
            <remarks>
            By default all TabPages are visible. The collection of names can be retrieved using the
            <see cref="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.GetTabNames"/> method.
            </remarks>
            <exception cref="T:System.ArgumentException">Fired if the given TabName does not exist within the collection.</exception>
            <param name="tabName">The Tab which should change their visiblity.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.SelectTab(System.Int32)">
            <summary>
            Selects the tabpage which has the given index.
            </summary>
            <param name="index">The index of the TabPage to select. Zero based.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.GetTabNames">
            <summary>
            Returns the list of TabNames to control the Tabs individually.
            </summary>
            <remarks>
            The list returns by default the following names:
            <list type="bullet">
            <item>tabPageFonts</item>
            <item>tabPageLayout</item>
            <item>tabPageBackground</item>
            <item>tabPagePosition</item>
            <item>tabPageBorders</item>
            <item>tabPageLists</item>
            <item>tabPageTables</item>
            <item>tabPageMisc</item>
            </list>
            <seealso cref="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.HideTab(System.String)"/>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.SetUp">
            <summary>
            Sets all base values, language resources and clears the state of comboboxes. 
            </summary>
            <remarks>
            Should be called after each change of the culture to update the UI.
            This method calls implicitily <see cref="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.ResetFields"/>. After that the current style string must 
            be set again to fill the fields with the proper values.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.Dispose(System.Boolean)">
            <summary> 
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.ContentChanged">
            <summary>
            Adds or removes the event handler for the event fired if any of the content is changed, e.g.
            one of the fields has had a interaction with the user.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.SupressEvents">
            <summary>
            Setting this property to true avoids recalling of the event during the parsing of style parts.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.OnContentChanged(System.Object)">
            <summary>
            Fires the OnContentChanged event after each field change operation
            </summary>
            <remarks>
            Fires the OnContentChanged event after each field change operation regardless whether the
            new value is valid or allowed. Invalid values may be removed later during parsing and the
            event is fired again with the correct values. This means for the event handler that any action
            can fire many times, but the last one contains always correct values.
            </remarks>
            <param name="sender">The control that has fired the event. Not used.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Fired if a drag enter event occurs.
            </summary>
            <remarks>
            This simply calls the base event handler and does not check the content beeing dragged.
            </remarks>
            <param name="drgevent">The event arguments. If overridden in derived class the method should perform some actions on the data.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Fired if the control receives a drop event.
            </summary>
            <remarks>
            This method is called during a drop event. It gathers the data and tries to deserialize a text string
            from dragged data. If this is possible the <see cref="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.StyleString">StyleString</see>
            fill be filled with the data without further investigation. The next change in the control may reduce the
            text to the recognizable parts.
            </remarks>
            <param name="drgevent">The event arguments. If overridden in derived class the method should perform some actions on the data.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.SelectorToString(GuruComponents.Netrix.UserInterface.StyleParser.StyleObject,System.Boolean)">
            <summary>
            Transforms the whole style object into one string. 
            </summary>
            <param name="so">StyleObject</param>
            <param name="Formatted">If <code>true</code> the output is formatted with Tabs and Newlines.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.GetStyleControl(System.Windows.Forms.Control,System.String)">
            <summary>
            Searches for the appropritiate control in the controls collections of the tab pages.
            To start c must be null. Returns the control.
            </summary>
            <param name="c"></param>
            <param name="StyleName"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.GetStylePropertyName(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Looks for a internal value in a given list based on the display name.
            </summary>
            <param name="cb"></param>
            <param name="Value"></param>
            <returns><code>String.Empty</code> if no element found, the element member else.</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.FieldsToObjects(System.Windows.Forms.Control,System.Collections.Hashtable@)">
            <summary>
            Run through all controls and create a hashtable with the changed/setted styles.
            </summary>
            <param name="c">Control where the operation starts.</param>
            <param name="ListOfStyles">The Hashtable with the current styles.</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.SelectorToFields">
            <summary>
            Takes a given StyleObject and fill fields from data. 
            </summary>
            <remarks>The method does nothing if StyleObject is null.</remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.FieldsToSelector">
            <summary>
            Refreshes a StyleObject object with the current state of the fields.
            </summary>
            <returns>Modified StyleObject</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.ResetFields">
            <summary>
            Sets all controls to an "undefined" state.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.StyleObjectToString(GuruComponents.Netrix.UserInterface.StyleParser.StyleObject,System.Boolean)">
            <summary>
            This method converts any StyleObject object into the appropreciated string representation.
            </summary>
            <param name="so">The StyleObjetc to convert.</param>
            <param name="Formatted">If <code>true</code> provides newlines and breaks.</param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.StyleObject">
            <summary>
            Gets or sets the current StyleObject, containing the Hashtable with all style objects.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.StyleString">
            <summary>
            Gets or sets the string representation of current StyleObject object. 
            </summary>
            <remarks>If the string is set it will
            parsed by the style parser. Internally a virtual selector 'b' is being created.</remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.SelectedTabName">
            <summary>
            Gets the name of currently selected tab.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.ParserReady">
            <summary>
            Fired if the parser used internally is done and all fields are populated.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.OnParserReady(System.Object,GuruComponents.Netrix.UserInterface.StyleParser.SelectorEventArgs)">
            <summary>
            Invokes the event that is fired if the parser used internally is done and all fields are populated.
            </summary>
            <param name="e">The parameters</param>
            <param name="sender">The control instance</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.button1_Click(System.Object,System.EventArgs)">
            <summary>
            Synchronizes the four border-style attributes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.numericUpDown_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method sets the caret within the numericUpDown fields to simulate the TextBox like
            behavior if the user enters the values directly. 
            </summary>
            <param name="sender">The NumericUpDown control receiving the key event.</param>
            <param name="e">The Key pressed.</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.StyleUserControl_Resize(System.Object,System.EventArgs)">
            <summary>
            This handler suppresses any resizing of the control during design time.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.Version">
            <summary>
            The current Assembly version.
            </summary>                   
            <remarks>
            This property returns the current assembly version to inform during design session about the assembly loaded.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.BorderDesign">
            <summary>
            The style of the border around the control
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.ButtonAppearance">
            <summary>
            Sets the appereance of the buttons and other controls.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.TabAppearance">
            <summary>
            The design of the button controls
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleControl.FontPickerSampleString">
            <summary>
            Sample String for Font Picker List Box.
            </summary>        
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm">
            <summary>
            StyleEditorForm contains the StyleEditor control and a simple textbox for direct style editing.
            </summary>
            <remarks>
            This form is called from the TypeEditor for styles.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.components">
            <summary>
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.#ctor">
            <summary>
            Instantiates the editor form.
            </summary>
            <remarks>
            This sets the localizable strings using the resource in the satellite assemblies.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.ResetStyleControl">
            <summary>
            Reset the style control to update UI.
            </summary>
            <remarks>
            This method is public to renew the localizable strings during run time to support 
            changing of UI culture on the fly.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.TabAppearance">
            <summary>
            Sets the appereance of the TABs.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.Dispose(System.Boolean)">
            <summary>
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.InitializeComponent">
            <summary>
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.ButtonAppearance">
            <summary>
            Sets the appereance of the buttons.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.StyleEditorForm.StyleString">
            <summary>
            Gets or sets the current style as string.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.StyleEditor.UnitPair">
            <summary>
            Used for Value/Pair Lists.
            </summary>
            <remarks>
            This structure stores attribute/parameter pairs 
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.StyleEditor.UnitPair.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="Value">Set the value.</param>
            <param name="Member">Set the name the value belongs to.</param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.UnitPair.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.StyleEditor.UnitPair.Member">
            <summary>
            Gets or sets the member the value belongs to.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox">
            <summary>
            Provides a simple toolbox implementation for editor purposes.
            </summary>
            <remarks>
            Content of toolbox can be created from XML document as well programmatically by calling
            methods. Several events support interaction.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.XmlTabName">
            <summary>
            Tab name for XML configuration.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.XmlItemName">
            <summary>
            Item name for XML configuration.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.WindowMessageDesigner">
            <summary>
            Controls windows messages for flexible mouse managing.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.WindowMessageDesigner.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.WindowMessageDesigner.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Window procedure override passes events to control.
            </summary>
            <param name="m"></param>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.TabChanged">
            <summary>
            Fired when user clicks on another tab.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ItemSelect">
            <summary>
            Fired when an item is selected by user action.
            </summary>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ItemActivate">
            <summary>
            Fired when the is going into active state by either user of programmatic action.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.BorderStyle">
            <summary>
            Style of border appearance.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AllowSelection">
            <summary>
            Allow selection of elements.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AllowItemDrop">
            <summary>
            Allow dropping items onto the surface.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ShowToolTip">
            <summary>
            Show tooltips on mouse over.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ItemHoverBorder">
            <summary>
            Border style for item hover (mouse over item).
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ItemSelectionBorder">
            <summary>
            Border for selected items.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SelectionColor">
            <summary>
            Color of selected items.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ItemHooverColor">
            <summary>
            Color on mouse over.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ButtonColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.OpenTabBackColor">
            <summary>
            Back color of opened tabs.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.OpenTabForeColor">
            <summary>
            Fore color of opened tabs.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.MovementTickInterval">
            <summary>
            Tick interval for movemenents.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ImageList">
            <summary>
            Images used to show beneath items.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.TabsCount">
            <summary>
            Number of tabs.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SelectedTabIndex">
            <summary>
            Currently selected index of open tab.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SelectedTabCaption">
            <summary>
            Currently selected caption of open tab.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SelectedItemCaption">
            <summary>
            Caption of currently selected item.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SelectedItemId">
            <summary>
            Id of selected item.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SelectedItemTag">
            <summary>
            Tag of selected item.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.Clear">
            <summary>
            Remove all the tabs and items from the Toolbox
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AddTab(System.String,System.Windows.Forms.ImageList,System.Windows.Forms.ContextMenu)">
            <summary>
            Add a new tab to the toolbox. The new tab will reference the specified ImageList.
            If this is null no ImageList will be used.
            </summary>
            <param name="caption">the caption of the new tab</param>
            <param name="imagelist">the ImageList to use for this tab</param>
            <param name="menu">the default context menu to use inside this tab</param>
            <returns>the index of the new tab inside the Toolbox</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AddTab(System.String,System.Windows.Forms.ContextMenu)">
            <summary>
            Add a new tab to the toolbox. The new tab will reference the default ImageList
            </summary>
            <param name="caption">the caption of the new tab</param>
            <param name="menu">the default context menu to use inside this tab</param>
            <returns>the index of the new tab inside the Toolbox</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AddItem(System.String,System.String,System.String,System.Int32,System.Object,System.Windows.Forms.ContextMenu,System.Int32)">
            <summary>
            Add a new item to the Toolbox
            </summary>
            <param name="caption">the caption of the new item</param>
            <param name="id">the id to be used to identify the item</param>
            <param name="descr">the description to use in the tooltip</param>
            <param name="imageIndex">the index inside the tab's ImageList to use</param>
            <param name="tag">an optional object that has to be associated to this item</param>
            <param name="menu">the menu to associate to this item. It overrides the tab context menu</param>
            <param name="tabIndex">the index of the tab the item has to be added to</param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.RemoveTab(System.Int32)">
            <summary>
            Remove a Tab
            </summary>
            <param name="index">the index of the tab to remove</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.RemoveItem(System.Int32,System.Int32)">
            <summary>
            Remove an item
            </summary>
            <param name="tabindex">the index of the tab the item to remove belongs to</param>
            <param name="itemindex">the index of the item to remove</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.GetTabIndex(System.String)">
            <summary>
            Returns the index of the tab with a specific caption
            </summary>
            <param name="caption">the caption of the tab to return</param>
            <returns>the index of the tab, -1 if the tab is not found</returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.ClearTab(System.Int32)">
            <summary>
            Removes all the items from the tab with a specified index
            </summary>
            <param name="index">The index of the tab to clear</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SaveTemplate(System.Xml.XmlElement)">
            <summary>
            Save the Toolbox tabs and items layout in an Xml Document starting from the node passed.
            </summary>
            <param name="xml">the XmlElement to use to store the data</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.LoadTemplate(System.Xml.XmlElement)">
            <summary>
            Replace the current Toolbox tabs and items layout with the one 
            stored in an Xml Document starting from the node passed.
            </summary>
            <param name="parentxml">the XmlElement to use to load the data</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.LoadTemplate(System.Xml.XmlElement,System.Windows.Forms.ImageList)">
            <summary>
            Replace the current Toolbox tabs and items layout with the one 
            stored in an Xml Document starting from the node passed.
            </summary>
            <param name="parentxml">the XmlElement to use to load the data</param>
            <param name="imagelist">the ImageList to use for the new added tabs</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AppendTemplate(System.Xml.XmlElement)">
            <summary>
            Append to the current Toolbox tabs and items layout the one 
            stored in an Xml Document starting from the node passed.
            </summary>
            <param name="parentxml">the XmlElement to use to load the data</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AppendTemplate(System.Xml.XmlElement,System.Windows.Forms.ImageList)">
            <summary>
            Append to the current Toolbox tabs and items layout the one 
            stored in an Xml Document starting from the node passed.
            </summary>
            <param name="parentxml">the XmlElement to use to load the data</param>
            <param name="imagelist">the ImageList to use for the new added tabs</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.AddXmlNode(System.String,System.Xml.XmlNode)">
            <summary>
            Add Node as XML.
            </summary>
            <param name="name"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.SetXmlAttribute(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Set XML Attribute.
            </summary>
            <param name="attr"></param>
            <param name="val"></param>
            <param name="root"></param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.GetXmlAttribute(System.String,System.Xml.XmlNode)">
            <summary>
            Get XML Attribute.
            </summary>
            <param name="attr"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.ToolBox.Toolbox.Site">
            <summary>
            Add toolboxservice if integrated in a design time environment.
            </summary>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs">
            <summary>
            Event arguments for Toolbox.
            </summary>
            <remarks>
            Provides access to selected item.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs.TabCaption">
            <summary>
            Caption of the Tab containing the selected Item.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs.TabIndex">
            <summary>
            Index of the Tab.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs.ItemCaption">
            <summary>
            Caption of the item.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs.ItemId">
            <summary>
            ID of the item.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs.ItemIndex">
            <summary>
            Index of the item.
            </summary>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs.Tag">
            <summary>
            Tag of the item.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.ToolBoxEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Event arguments ctor for Toolbox event.
            </summary>
            <param name="tc">Caption of the Tab containing the selected Item.</param>
            <param name="ic">Caption of the item.</param>
            <param name="iid">ID of the item.</param>
            <param name="ti">Index of the Tab.</param>
            <param name="ii">Index of the item.</param>
            <param name="tag">Tag of the item.</param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.ToolBox.ToolboxEventHandler">
            <summary>
            The toolbox event delegate
            </summary>
            <param name="sender">Toolbox instance</param>
            <param name="e">Parameters</param>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.ToolBox.ToolboxItem.Remove(System.Windows.Forms.ToolTip)">
            <summary>
            Removes an item.
            </summary>
            <param name="tip"></param>
        </member>
        <member name="T:GuruComponents.Netrix.UserInterface.UnitEditor">
            <summary>
            This class creates a simple unit editor to allow users selecting either pixel or percentage
            values from within a given range.
            </summary>
            <remarks>
            This improves the PropertyGrid usability.
            </remarks>
        </member>
        <member name="F:GuruComponents.Netrix.UserInterface.UnitEditor.components">
            <summary> 
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.UnitEditor.#ctor">
            <summary>
            The constructor.
            </summary>
            <remarks>
            Requests internally the localized information from satellite assemblies.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.UnitEditor.ResetUI">
            <summary>
            Reset the UI resources after culture changes.
            </summary>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.UnitEditor.Version">
            <summary>
            The current Assembly version.
            </summary>                   
            <remarks>
            This property returns the current assembly version to inform during design session about the assembly loaded.
            </remarks>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.UnitEditor.Dispose(System.Boolean)">
            <summary> 
            Die verwendeten Ressourcen bereinigen.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.UnitEditor.InitializeComponent">
            <summary> 
            Erforderliche Methode für die Designerunterstützung. 
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.UnitEditor.OnResize(System.EventArgs)">
            <summary>
            Controls the resizing behavior.
            </summary>
            <remarks>
            This control will regularly divide the elements on the final width.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.UnitEditor.Border">
            <summary>
            Gets or sets the border style.
            </summary>
            <remarks>
            This allows the developer to set a common border style around the whole control.
            The subcontrols will change their behavior accordingly to the outer border.
            </remarks>
        </member>
        <member name="P:GuruComponents.Netrix.UserInterface.UnitEditor.Unit">
            <summary>
            The unit displayed in the control.
            </summary>
            <remarks>
            Gets or sets the value within the control.
            </remarks>
        </member>
        <member name="E:GuruComponents.Netrix.UserInterface.UnitEditor.ValueChanged">
            <summary>
            Fired if either the numeric value or the unit type has been changed.
            </summary>
        </member>
        <member name="M:GuruComponents.Netrix.UserInterface.UnitEditor.OnValueChanged(System.Object)">
            <summary>
            Called if either the numeric value or the unit type has been changed.
            </summary>
            <param name="sender"></param>
        </member>
    </members>
</doc>
